1
00:00:00,001 --> 00:00:04,002
[MUSIC]                         

2
00:00:04,004 --> 00:00:06,771
Stanford University.            

3
00:00:06,773 --> 00:00:10,008
>> All right, well,             
welcome to Stanford CS193P.     

4
00:00:10,010 --> 00:00:15,846
This is Developing iOS          
Application, Winter of 2017.    

5
00:00:15,848 --> 00:00:19,116
And the only topic for          
today is a big one, Core Data,  

6
00:00:19,118 --> 00:00:22,352
which is an object              
oriented database.              

7
00:00:22,354 --> 00:00:23,620
But before I dive into this,    

8
00:00:23,622 --> 00:00:27,290
I'm actually going to revisit   
that demo we did last time      

9
00:00:27,292 --> 00:00:30,226
just briefly, because we        
ran out of time and so          

10
00:00:30,228 --> 00:00:33,462
I wasn't able to show           
you the refresh control.        

11
00:00:33,464 --> 00:00:34,863
Now I posted the code for       
it, so                          

12
00:00:34,865 --> 00:00:37,232
I'm not gonna type              
all the code in here.           

13
00:00:37,234 --> 00:00:39,801
But I'm just gonna              
briefly show you                

14
00:00:39,803 --> 00:00:42,670
how that refresh                
control worked, okay?           

15
00:00:42,672 --> 00:00:44,204
Okay, so we missed that.        

16
00:00:44,206 --> 00:00:47,040
So here is the app we           
had from last time.             

17
00:00:47,042 --> 00:00:50,043
By the way,                     
I have modified our app         

18
00:00:50,045 --> 00:00:51,944
here to change our              
request a little bit.           

19
00:00:51,946 --> 00:00:54,547
If you remember this line       
of code from last time,         

20
00:00:54,549 --> 00:00:55,681
it used to just                 
have the query.                 

21
00:00:55,683 --> 00:00:59,551
But I've changed it to also     
filter out retweets and         

22
00:00:59,553 --> 00:01:03,254
I've also put on the safe       
filter, which hopefully will    

23
00:01:03,256 --> 00:01:05,423
make it so                      
that when I do these look ups,  

24
00:01:05,425 --> 00:01:09,460
these sort of up looks, we      
don't get stuff on the screen,  

25
00:01:09,462 --> 00:01:11,128
you know this is                
a family show,                  

26
00:01:11,130 --> 00:01:14,531
so we don't want to see         
some of that stuff.             

27
00:01:14,533 --> 00:01:17,033
Anyway, hopefully,              
that'll work.                   

28
00:01:17,035 --> 00:01:18,868
So let's go back here and       

29
00:01:18,870 --> 00:01:21,771
take a look at what             
this looks like.                

30
00:01:21,773 --> 00:01:23,572
There's my simulator            
right here.                     

31
00:01:23,574 --> 00:01:24,072
So let's go ahead and search.   

32
00:01:24,074 --> 00:01:28,543
Let's try Trump again and       
cross our fingers, all right.   

33
00:01:28,545 --> 00:01:33,748
So that's not, I don't see      
anything too terrible there.    

34
00:01:33,750 --> 00:01:38,052
Okay so what we added was this  
UI where we can pull down.      

35
00:01:38,054 --> 00:01:39,319
Okay and it adds more tweets,   

36
00:01:39,321 --> 00:01:41,021
you see how it added            
a tweet there?                  

37
00:01:41,023 --> 00:01:42,889
We have the second              
pull right there,               

38
00:01:42,891 --> 00:01:43,623
this was with the first pull.   

39
00:01:43,625 --> 00:01:48,761
And we pull down again,         
no tweets this time, okay?      

40
00:01:48,763 --> 00:01:52,064
So each time we pull down       
it's doing another twitter      

41
00:01:52,066 --> 00:01:52,230
fetch, and                      

42
00:01:52,232 --> 00:01:56,134
may get more tweets depending   
if people are tweeting or not.  

43
00:01:56,136 --> 00:01:58,903
So let's take a look at         
the code to do this, again,     

44
00:01:58,905 --> 00:01:59,870
I posted this code, but         

45
00:01:59,872 --> 00:02:01,605
we'll just look at it,          
I'm not gonna type it all in,   

46
00:02:01,607 --> 00:02:03,006
we're just gonna look           
at it real quick.               

47
00:02:03,008 --> 00:02:05,975
First of all, let's talk about  
how do I get this UI where      

48
00:02:05,977 --> 00:02:10,380
we pull down and it calls       
a method, or whatever?          

49
00:02:10,382 --> 00:02:14,150
So let's go to look             
in our storyboard.              

50
00:02:15,852 --> 00:02:18,553
All right, so                   
here's our storyboard, and      

51
00:02:18,555 --> 00:02:22,824
what I did was I just selected  
my table view controller and    

52
00:02:22,826 --> 00:02:25,426
I went down here to             
this refreshing.                

53
00:02:25,428 --> 00:02:26,093
You see that                    
refreshing choice?              

54
00:02:26,095 --> 00:02:29,897
And I changed it from disabled  
to enabled, and when I set it   

55
00:02:29,899 --> 00:02:32,566
to enabled nothing              
changed here in the UI.         

56
00:02:32,568 --> 00:02:35,335
You can't see any               
spinning thing, but             

57
00:02:35,337 --> 00:02:39,405
over here in the document       
outline it created this         

58
00:02:39,407 --> 00:02:41,073
refresh control right here.     

59
00:02:41,075 --> 00:02:45,477
And so I can control drag from  
the document outline just as I  

60
00:02:45,479 --> 00:02:46,011
can through here.               

61
00:02:46,013 --> 00:02:49,047
So all I did to make this       
work is I just brought up       

62
00:02:49,049 --> 00:02:51,015
my controller right here.       

63
00:02:51,017 --> 00:02:52,550
And here's the method I         
did it with right here.         

64
00:02:52,552 --> 00:02:57,621
I just Ctrl dragged from the    
Refresh Control to this method  

65
00:02:57,623 --> 00:02:59,656
called refresh, okay?           

66
00:02:59,658 --> 00:03:03,827
That's all I did to,            
to make that happen.            

67
00:03:03,829 --> 00:03:04,360
And inside refresh,             

68
00:03:04,362 --> 00:03:07,229
I just called that same method  
I had before, searchForTweets.  

69
00:03:07,231 --> 00:03:09,898
This one right here, the one    
that search for tweets.         

70
00:03:09,900 --> 00:03:11,733
And that used to                
look like this,                 

71
00:03:11,735 --> 00:03:13,401
I only changed one              
thing in here.                  

72
00:03:13,403 --> 00:03:16,971
It used to just get             
the twitterRequest by           

73
00:03:16,973 --> 00:03:19,273
looking at our                  
search term up here.            

74
00:03:19,275 --> 00:03:20,474
Remember this function?         

75
00:03:20,476 --> 00:03:23,910
And all I did was added this,   
which says, if                  

76
00:03:23,912 --> 00:03:28,682
the lastTwitterRequest has a    
newer version, then use that.   

77
00:03:28,684 --> 00:03:32,652
But if it doesn't, then         
default back to doing to query  

78
00:03:32,654 --> 00:03:33,819
request the way we used to.     

79
00:03:33,821 --> 00:03:36,288
The only other things that I    
had to do was turn the refresh  

80
00:03:36,290 --> 00:03:38,290
control off, you do that        
with the end refreshing.        

81
00:03:38,292 --> 00:03:41,259
So I just did that when I went  
back to the main queue here,    

82
00:03:41,261 --> 00:03:43,661
to get my results,              
so I turned it off.             

83
00:03:43,663 --> 00:03:44,428
I also turned it off if for     

84
00:03:44,430 --> 00:03:47,164
some reason I couldn't get      
any request or whatsoever.      

85
00:03:47,166 --> 00:03:49,533
Okay, there's nothing in        
the search term field and       

86
00:03:49,535 --> 00:03:51,835
I couldn't get a newer          
version of my last request.     

87
00:03:51,837 --> 00:03:55,071
So I just said, I'm gonna       
make sure that thing is not     

88
00:03:55,073 --> 00:03:57,073
spinning and spinning forever.  

89
00:03:57,075 --> 00:03:58,307
They wanna get out              
of here with that.              

90
00:03:58,309 --> 00:04:00,909
And the only other thing        
I had to do was up here,        

91
00:04:00,911 --> 00:04:04,579
when the search text changes,   
someone types#Stanford or       

92
00:04:04,581 --> 00:04:08,149
something like that, I need to  
invalidate that last Twitter    

93
00:04:08,151 --> 00:04:11,352
request so that it's not        
trying to get new versions      

94
00:04:11,354 --> 00:04:13,253
of the previous                 
one that I had.                 

95
00:04:13,255 --> 00:04:15,422
I want it to do the new one.    

96
00:04:15,424 --> 00:04:18,992
And the way that I made it so   
that we had these little        

97
00:04:18,994 --> 00:04:23,129
titles right here, see these    
titles two, three, four, five?  

98
00:04:23,131 --> 00:04:26,599
I implemented another UI table  
view data source method,        

99
00:04:26,601 --> 00:04:28,133
this one down here.             

100
00:04:28,135 --> 00:04:30,369
Called                          
titleForHeaderInSection.        

101
00:04:30,371 --> 00:04:32,303
I just put titles               
on the sections.                

102
00:04:32,305 --> 00:04:36,274
Remember, each section is       
another pull from Twitter.      

103
00:04:36,276 --> 00:04:37,475
And so I just have each title.  

104
00:04:37,477 --> 00:04:40,844
It's actually gonna be the      
count of things I had minus     

105
00:04:40,846 --> 00:04:41,545
the section number.             

106
00:04:41,547 --> 00:04:43,446
So the top one                  
is section zero.                

107
00:04:43,448 --> 00:04:44,947
So section zero is gonna show   

108
00:04:44,949 --> 00:04:46,215
the number of pulls             
that I've made.                 

109
00:04:46,217 --> 00:04:47,916
tweets.count is how             
many pulls I made.              

110
00:04:47,918 --> 00:04:49,317
And it's obviously gonna        

111
00:04:49,319 --> 00:04:51,853
decrement as                    
the sections go down.           

112
00:04:53,222 --> 00:04:56,457
Okay, so                        
that's what gave us this.       

113
00:04:56,459 --> 00:04:58,025
And you can see that            
the longer we wait,             

114
00:04:58,027 --> 00:05:01,161
obviously it pulls              
more information,               

115
00:05:01,163 --> 00:05:02,829
as tweets pile up.              

116
00:05:03,430 --> 00:05:07,767
Okay, let's go back             
to our slides.                  

117
00:05:07,769 --> 00:05:09,068
All right, here we go.          

118
00:05:09,070 --> 00:05:13,071
So Core Data is this big        
framework inside of iOS for     

119
00:05:13,073 --> 00:05:15,507
doing object-oriented           
databases.                      

120
00:05:15,509 --> 00:05:18,609
So let's talk a little bit      
about what that means.          

121
00:05:18,611 --> 00:05:20,344
So, when do you                 
need a database?                

122
00:05:20,346 --> 00:05:22,613
Well you need a database when   
you have a large amount of      

123
00:05:22,615 --> 00:05:25,749
data, and especially if you     
want to kind of make queries    

124
00:05:25,751 --> 00:05:29,052
into that data and find out     
things about that data and      

125
00:05:29,054 --> 00:05:31,854
the relationships between       
all the things in there.        

126
00:05:31,856 --> 00:05:33,122
You really can't                
do that by like,                

127
00:05:33,124 --> 00:05:35,591
taking a big dictionary or      
a big array and                 

128
00:05:35,593 --> 00:05:38,460
searching through it,           
you need a database.            

129
00:05:38,462 --> 00:05:41,763
And so there's a lot of         
technologies for databases out  

130
00:05:41,765 --> 00:05:44,632
there but most of them          
are not object-oriented.        

131
00:05:44,634 --> 00:05:47,568
So we have this framework       
that Apple provides called      

132
00:05:47,570 --> 00:05:50,471
Core Data, it's what we call    
an object-oriented database     

133
00:05:50,473 --> 00:05:54,675
but actually, it's really not   
an object-oriented database     

134
00:05:54,677 --> 00:05:55,842
on the inside.                  

135
00:05:55,844 --> 00:05:58,778
It's only an object-oriented    
database on the outside.        

136
00:05:58,780 --> 00:06:00,046
The side that you look at.      

137
00:06:00,048 --> 00:06:03,749
Underneath, it's actually       
a relational database usually.  

138
00:06:03,751 --> 00:06:07,986
Now Core Data is designed to    
have any backend of storage.    

139
00:06:07,988 --> 00:06:10,755
But it's primary                
implementation is on top of     

140
00:06:10,757 --> 00:06:12,990
SQL which is                    
a relational database.          

141
00:06:12,992 --> 00:06:17,361
How many people know            
what SQL Database is?           

142
00:06:17,363 --> 00:06:18,195
Okay, almost all of you, good.  

143
00:06:18,197 --> 00:06:24,167
So, if we had to do databases   
in our iOS apps using SQL,      

144
00:06:24,169 --> 00:06:26,970
we'd be like no, I have         
to learn this whole query       

145
00:06:26,972 --> 00:06:28,438
language, and                   
how am I gonna do this?         

146
00:06:28,440 --> 00:06:31,607
Not to worry, we don't have to  
know any SQL to use core Data.  

147
00:06:31,609 --> 00:06:35,010
No SQL whatsoever- we're        
just gonna purely do this       

148
00:06:35,012 --> 00:06:37,713
on the object side.             

149
00:06:37,715 --> 00:06:38,780
So how does this work?          

150
00:06:38,782 --> 00:06:39,313
How does core Data work?        

151
00:06:39,315 --> 00:06:42,717
Well, first we're gonna         
create a visual mapping         

152
00:06:42,719 --> 00:06:44,818
between things in               
our database and                

153
00:06:44,820 --> 00:06:47,754
some objects that we're gonna   
be able to program with         

154
00:06:47,756 --> 00:06:51,191
in our object-oriented          
code that we like.              

155
00:06:51,193 --> 00:06:53,626
And kinda roughly, it's         

156
00:06:53,628 --> 00:06:57,563
the tables in the database      
are kinda gonna be objects.     

157
00:06:57,565 --> 00:07:00,699
And the columns in              
the tables are kind of vars.    

158
00:07:00,701 --> 00:07:03,068
But we don't even really        
care what it's doing there.     

159
00:07:03,070 --> 00:07:05,670
What we're gonna focus          
on is this visual map,          

160
00:07:05,672 --> 00:07:09,440
this visual description         
basically of our schema.        

161
00:07:09,442 --> 00:07:11,842
Okay, how many people know      
what the word schema means?     

162
00:07:11,844 --> 00:07:14,745
Okay, so two-thirds of you.     

163
00:07:14,747 --> 00:07:17,547
So schema is basically          
the description of what's       

164
00:07:17,549 --> 00:07:21,051
in your database, not the       
contents of it but how all its  

165
00:07:21,053 --> 00:07:23,753
data types are and how they     
relate to each other, etc.      

166
00:07:23,755 --> 00:07:27,156
So we're gonna do all           
that graphically.               

167
00:07:27,158 --> 00:07:29,358
And this is what                
it looks like.                  

168
00:07:29,360 --> 00:07:32,294
First, if I wanna use           
Core Data in my app,            

169
00:07:32,296 --> 00:07:36,898
I'm almost certainly going      
to wanna click this button      

170
00:07:36,900 --> 00:07:38,099
that says Use Core Data.        

171
00:07:38,101 --> 00:07:40,735
We've seen it every time we've  
created an app, and we haven't  

172
00:07:40,737 --> 00:07:43,070
clicked it so far, but          
now we are going to click it.   

173
00:07:43,072 --> 00:07:44,771
And clicking                    
Use Core Data there,            

174
00:07:44,773 --> 00:07:48,041
is gonna create two things for  
us, this visual map,            

175
00:07:48,043 --> 00:07:49,909
and some code in                
your App Delegate.              

176
00:07:49,911 --> 00:07:52,044
And I'm gonna talk about        
both of those things.           

177
00:07:52,046 --> 00:07:52,978
Now before I go to              
the next slide,                 

178
00:07:52,980 --> 00:07:55,714
notice that the name of this    
app is CoreDataExample.         

179
00:07:55,716 --> 00:07:59,317
That's the, just the name of    
the app that I typed in there.  

180
00:07:59,485 --> 00:08:02,219
So when I create this app,      
clicking that                   

181
00:08:02,221 --> 00:08:06,090
Use Core Data on, you'll see    
that it created this file,      

182
00:08:06,092 --> 00:08:09,393
CoreDataExample.xcdatamodeld.   

183
00:08:09,395 --> 00:08:11,294
So it chose the name            
of my app as it.                

184
00:08:11,296 --> 00:08:15,298
And this is going to be         
our data model, all right?      

185
00:08:15,300 --> 00:08:17,199
And so we'll, we'll talk        
about the AppDelegate           

186
00:08:17,201 --> 00:08:20,436
code that Use Core Data also    
generated a little bit later.   

187
00:08:20,438 --> 00:08:24,239
Right now we're gonna focus     
on this data model file.        

188
00:08:24,241 --> 00:08:27,776
All right, but before we even   
do that, what happens if we     

189
00:08:27,778 --> 00:08:31,346
have an existing app and you    
did not click Use Core Data?    

190
00:08:31,348 --> 00:08:33,714
And now you decided, hey,       
I wanna add core data.          

191
00:08:33,716 --> 00:08:37,317
Like maybe Smashtag Assignment  
5 comes out and                 

192
00:08:37,319 --> 00:08:39,986
I tell you to add some          
Core Data to Smashtag.          

193
00:08:39,988 --> 00:08:41,955
And you're like, woh,           
I can't go back and             

194
00:08:41,957 --> 00:08:43,556
click Use Core Data,            
it's too late.                  

195
00:08:43,558 --> 00:08:47,259
So you're gonna have to         
create this data model file     

196
00:08:47,261 --> 00:08:47,793
using new file.                 

197
00:08:47,795 --> 00:08:50,796
So you just go to File          
> New > File like this.         

198
00:08:50,798 --> 00:08:52,063
You're not gonna pick any of    

199
00:08:52,065 --> 00:08:53,464
the things we've picked so      
far.                            

200
00:08:53,466 --> 00:08:56,133
You're gonna scroll down        
to the section that             

201
00:08:56,135 --> 00:08:56,400
says Core Data.                 

202
00:08:56,402 --> 00:08:58,969
And inside there these,         
there's two things,             

203
00:08:58,971 --> 00:08:59,903
Data Model and Mapping Model.   

204
00:08:59,905 --> 00:09:03,439
And make sure you pick Data     
Model because that's what you   

205
00:09:03,441 --> 00:09:05,808
want to do here is              
create your data model,         

206
00:09:05,810 --> 00:09:08,544
your schema essentially,        
for your database.              

207
00:09:08,546 --> 00:09:09,978
It's gonna ask you              
what you wanna call it.         

208
00:09:09,980 --> 00:09:12,881
Now, you don't have to call     
this the same as the name of    

209
00:09:12,883 --> 00:09:15,650
your application like           
Use Core Data button does.      

210
00:09:15,652 --> 00:09:16,450
You can call it                 
anything you want.              

211
00:09:16,452 --> 00:09:19,787
So here, just to be different,  
I've called it Model,           

212
00:09:19,789 --> 00:09:21,488
it's my model.                  

213
00:09:21,490 --> 00:09:22,188
And by the way,                 

214
00:09:22,190 --> 00:09:26,793
your core data is usually       
the model of a lot of MVCs.     

215
00:09:26,795 --> 00:09:30,162
Okay, a lot of MVCs, their      
job is going to be to display   

216
00:09:30,164 --> 00:09:34,233
the data in the database, and   
so this data model is actually  

217
00:09:34,235 --> 00:09:36,768
the MVC model as well for       
a lot of MVCs.                  

218
00:09:36,770 --> 00:09:38,770
So I'll call this one model,    
and                             

219
00:09:38,772 --> 00:09:41,606
you can see it created          
model.xedatamodeld.             

220
00:09:41,608 --> 00:09:45,476
So whether you get that file    
by doing Use Core Data or       

221
00:09:45,478 --> 00:09:47,578
whether you get it by           
creating it yourself,           

222
00:09:47,580 --> 00:09:50,247
you're gonna have               
this mapping file.              

223
00:09:50,249 --> 00:09:52,816
Now, let me go back to          
that AppDelegate thing.         

224
00:09:52,818 --> 00:09:56,019
I said they was gonna put some  
code in your AppDelegate.       

225
00:09:56,021 --> 00:09:57,987
It's very small                 
amount of code.                 

226
00:09:57,989 --> 00:10:00,422
But I wanted to show            
it to you right here.           

227
00:10:00,424 --> 00:10:01,957
This is what it looks like.     

228
00:10:01,959 --> 00:10:05,794
It just creates this            
one var right here.             

229
00:10:06,061 --> 00:10:09,230
By the way, if you didn't do    
Use Core Data, of course,       

230
00:10:09,232 --> 00:10:11,565
you need this code              
in your AppDelegate,            

231
00:10:11,567 --> 00:10:12,899
how are you gonna get it?       

232
00:10:12,901 --> 00:10:15,502
Just go create some             
dummy application.              

233
00:10:15,504 --> 00:10:18,438
Call it Foo, it doesn't really  
matter what you call it.        

234
00:10:18,440 --> 00:10:20,606
Click Use Core Data             
when you create it and          

235
00:10:20,608 --> 00:10:23,609
then copy this code from        
that AppDelegate to here.       

236
00:10:23,611 --> 00:10:26,712
Okay, the code is               
identical from every app.       

237
00:10:26,714 --> 00:10:30,548
The only difference between     
any of those things is this     

238
00:10:30,550 --> 00:10:32,016
one string right here.          

239
00:10:32,018 --> 00:10:32,450
You see that string?            

240
00:10:32,452 --> 00:10:35,786
That's the name of              
that xcmodeld file, so          

241
00:10:35,788 --> 00:10:36,820
datamodeld file.                

242
00:10:36,822 --> 00:10:38,121
So with our core data example,  

243
00:10:38,123 --> 00:10:39,956
this string would               
be CoreDataExample.             

244
00:10:39,958 --> 00:10:42,992
When we went back and created   
it on our own with new file,    

245
00:10:42,994 --> 00:10:43,826
of course, we called it Model.  

246
00:10:43,828 --> 00:10:48,296
So just make sure this string   
matches the name of the file,   

247
00:10:48,298 --> 00:10:51,933
the xcmodel datamodeld file,    
okay?                           

248
00:10:51,935 --> 00:10:54,769
So that's what you need to      
do if you didn't do the use     

249
00:10:54,771 --> 00:10:57,038
Code Data originally            
you are going back and          

250
00:10:57,040 --> 00:10:57,771
adding it- just copy and        
paste.                          

251
00:10:57,773 --> 00:11:02,275
It's only this one var really,  
it does provide another thing   

252
00:11:02,277 --> 00:11:06,112
in your AppDelegate which is    
a function called saveContext.  

253
00:11:06,114 --> 00:11:07,046
It's a very simple              
little function.                

254
00:11:07,048 --> 00:11:10,216
I'm gonna show you how you      
could write it yourself.        

255
00:11:10,218 --> 00:11:11,684
If you wanna copy it in,        
you can.                        

256
00:11:11,686 --> 00:11:15,387
Also I notice that they have    
applicationWillTerminate which  

257
00:11:15,389 --> 00:11:17,689
is this application,            
AppDelegate method,             

258
00:11:17,691 --> 00:11:20,425
that gets called right          
before you get terminated or    

259
00:11:20,427 --> 00:11:23,627
you terminate it in any way     
and they call saveContext.      

260
00:11:23,629 --> 00:11:25,229
Well, it's a kind of an idea,   
a good idea.                    

261
00:11:25,231 --> 00:11:27,264
saveContext() just              
saves your database.            

262
00:11:27,266 --> 00:11:29,432
That's what saveContext does,   
all right?                      

263
00:11:29,434 --> 00:11:32,802
So this is how you can make     
up if you didn't do it.         

264
00:11:32,804 --> 00:11:36,205
So anyway, you can see that     
the only thing in here          

265
00:11:36,207 --> 00:11:38,640
is this lazy var                
persistentContainer, and        

266
00:11:38,642 --> 00:11:40,108
I'm gonna talk all about        
persistentContainer,            

267
00:11:40,110 --> 00:11:43,044
because that's the thing        
that essentially contains       

268
00:11:43,046 --> 00:11:45,279
your database, all right?       

269
00:11:45,281 --> 00:11:46,981
But let's go back and           
talk about the visual map.      

270
00:11:46,983 --> 00:11:49,917
Cuz we have to have a visual    
map before we can do anything   

271
00:11:49,919 --> 00:11:52,786
in our database because we      
have to have some things in     

272
00:11:52,788 --> 00:11:55,422
our database, some objects and  
things like that.               

273
00:11:55,424 --> 00:11:59,759
And Core database stores        
things in this kind of very     

274
00:11:59,761 --> 00:12:00,926
straightforward way.            

275
00:12:00,928 --> 00:12:04,830
It looks very object-oriented   
in our code because             

276
00:12:04,832 --> 00:12:07,599
in Core Data terms              
it's storing entities,          

277
00:12:07,601 --> 00:12:10,168
which look like                 
classes to our code.            

278
00:12:10,170 --> 00:12:13,671
Attributes, which look          
like vars on our classes.       

279
00:12:13,673 --> 00:12:17,141
And relationship, which just    
look like vars that point to    

280
00:12:17,143 --> 00:12:21,045
other objects in the database,  
other entities, etc.            

281
00:12:21,047 --> 00:12:24,481
And so we're gonna use this     
what I'm calling a storyboard.  

282
00:12:24,483 --> 00:12:25,281
It's not, don't get confused,   

283
00:12:25,283 --> 00:12:26,449
this is not a storyboard,       
okay?                           

284
00:12:26,451 --> 00:12:29,485
You know what a storyboard is,  
your Interface Builder thing.   

285
00:12:29,487 --> 00:12:31,153
But it's kind of                
like a storyboard,              

286
00:12:31,155 --> 00:12:33,789
that's why it's in quotes for   
databases.                      

287
00:12:33,791 --> 00:12:35,990
It's a graphical,               
visual editor to create and     

288
00:12:35,992 --> 00:12:39,527
describe all these entities,    
attributes and relationships,   

289
00:12:39,529 --> 00:12:42,029
okay, that's what               
we're gonna do here.            

290
00:12:42,031 --> 00:12:43,897
So let's start by               
adding an entity.               

291
00:12:43,899 --> 00:12:47,534
Very easy, we go down to this   
button on the bottom here       

292
00:12:47,536 --> 00:12:48,902
called Add Entity.              

293
00:12:48,904 --> 00:12:49,936
Okay, to add an entity.         

294
00:12:49,938 --> 00:12:52,138
By the way, there's couple      
other things in that if you     

295
00:12:52,140 --> 00:12:55,240
hold down on that button        
you'll see Add Fetch Request,   

296
00:12:55,242 --> 00:12:55,640
and Add Configuration.          

297
00:12:55,642 --> 00:12:57,475
I don't have time to talk       
about those unfortunately,      

298
00:12:57,477 --> 00:13:00,178
but especially Add Fetch        
Request is kind of a cool one.  

299
00:13:00,180 --> 00:13:03,080
So, if you can take what I      
teach you here and extend it    

300
00:13:03,082 --> 00:13:06,750
by going and learning about     
that, that would be great.      

301
00:13:06,752 --> 00:13:07,984
So you click Add Entity,        

302
00:13:07,986 --> 00:13:10,653
it creates a new                
entity called Entity.           

303
00:13:10,655 --> 00:13:12,855
Cuz it doesn't know what        
name you want for it yet.       

304
00:13:12,857 --> 00:13:15,324
And like I say,                 
this analogous to a class.      

305
00:13:15,326 --> 00:13:19,128
Now in our code we're gonna     
see any instances of this       

306
00:13:19,130 --> 00:13:23,365
entity as instances of a class  
called NSManagedObject.         

307
00:13:23,367 --> 00:13:26,101
So NSManagedObject super        
important in Core Data.         

308
00:13:26,103 --> 00:13:28,603
It is the super class or        
the class of everything that    

309
00:13:28,605 --> 00:13:31,639
comes, all these entities that  
come out of the database.       

310
00:13:31,641 --> 00:13:35,442
It's like the thing that        
represents them in our code,    

311
00:13:35,444 --> 00:13:37,010
and we'll see all about that.   

312
00:13:37,012 --> 00:13:39,512
So for my kind of slides here,  

313
00:13:39,514 --> 00:13:42,915
what I'm gonna do is create     
a database that would have      

314
00:13:42,917 --> 00:13:44,684
stuff like we got               
from Twitter.                   

315
00:13:44,686 --> 00:13:46,185
So it's gonna have tweets and   

316
00:13:46,187 --> 00:13:46,952
we're gonna have                
Twitter users.                  

317
00:13:46,954 --> 00:13:48,787
So those are gonna be two       
entities that we have and       

318
00:13:48,789 --> 00:13:51,356
you're gonna see eventually,    
we're gonna have Tweet and      

319
00:13:51,358 --> 00:13:52,556
TwitterUser classes             
in our code and                 

320
00:13:52,558 --> 00:13:54,458
we're gonna access vars and     
all that stuff.                 

321
00:13:54,460 --> 00:13:56,059
So I'm gonna rename             
this entity,                    

322
00:13:56,061 --> 00:13:58,928
this, that I added that         
was defaulted to entity,        

323
00:13:58,930 --> 00:14:01,164
I'm gonna rename it and         
call it Tweet.                  

324
00:14:01,166 --> 00:14:04,467
So this is gonna be the first   
entity that I'm creating        

325
00:14:04,469 --> 00:14:05,734
in the database.                

326
00:14:05,736 --> 00:14:07,803
Now, an entity can              
have attributes.                

327
00:14:07,805 --> 00:14:09,938
Those are kind of like vars,    
and relationships.              

328
00:14:09,940 --> 00:14:12,874
Those are like vars that        
point to other entities.        

329
00:14:12,876 --> 00:14:15,643
And I told you this fetched     
properties down at the bottom,  

330
00:14:15,645 --> 00:14:16,210
I'm not gonna talk about.       

331
00:14:16,212 --> 00:14:18,545
Very cool, but                  
not gonna talk about them.      

332
00:14:18,547 --> 00:14:19,946
Not just time-wise.             

333
00:14:19,948 --> 00:14:22,415
So let's go and add some        
attributes to this entity.      

334
00:14:22,417 --> 00:14:23,916
Real easy,                      
you click this plus button,     

335
00:14:23,918 --> 00:14:25,217
there's also                    
an Add Attribute button,        

336
00:14:25,219 --> 00:14:27,552
see it down in the lower        
right hand corner there.        

337
00:14:27,554 --> 00:14:28,787
But I'm gonna click             
this little plus                

338
00:14:28,789 --> 00:14:32,023
button right there under        
the section called Attributes.  

339
00:14:32,025 --> 00:14:35,192
And when I do there it adds a   
new attribute called attribute  

340
00:14:35,194 --> 00:14:37,127
and I'm gonna edit              
its name directly,              

341
00:14:37,129 --> 00:14:38,695
just like I did                 
the entity name.                

342
00:14:38,697 --> 00:14:39,496
I'm gonna change                
this to be text.                

343
00:14:39,498 --> 00:14:44,167
So, this is gonna be our tweet  
text, the 140 characters        

344
00:14:44,169 --> 00:14:48,337
of the tweet is gonna be        
this particular attribute.      

345
00:14:48,339 --> 00:14:52,141
Now, notice as soon as I        
did that, I got an error.       

346
00:14:52,143 --> 00:14:54,976
In the corner there,            
this red error.                 

347
00:14:54,978 --> 00:14:55,076
And the reason for              

348
00:14:55,078 --> 00:14:57,745
that is all attributes          
have to have a type.            

349
00:14:57,747 --> 00:15:00,181
They can't just be undefined    
type like this one is.          

350
00:15:00,183 --> 00:15:02,416
You see where it says           
the type is undefined.          

351
00:15:02,418 --> 00:15:04,685
So, we need to change           
that to be a type.              

352
00:15:04,687 --> 00:15:07,954
And it's really easy, right     
there where it says undefined.  

353
00:15:07,956 --> 00:15:08,955
We're just going                
to mouse down,                  

354
00:15:08,957 --> 00:15:11,857
it's gonna bring up a menu and  
we can choose our type.         

355
00:15:11,859 --> 00:15:14,226
Now, these are the types        
we have to choose from.         

356
00:15:14,228 --> 00:15:18,130
A lot of different numeric      
types like 16-bit integers,     

357
00:15:18,132 --> 00:15:19,197
32-bit integer, etc.            

358
00:15:19,199 --> 00:15:22,633
Doubles, floats,                
can a be string of course,      

359
00:15:22,635 --> 00:15:27,705
a Boolean value, a date which   
is going to look like a date,   

360
00:15:27,707 --> 00:15:30,941
you know,                       
the date struct in our code.    

361
00:15:30,943 --> 00:15:34,978
And binary data which is gonna  
look like the data struct       

362
00:15:34,980 --> 00:15:35,412
inside our code.                

363
00:15:35,414 --> 00:15:39,382
So, these are gonna map to      
very familiar data types        

364
00:15:39,384 --> 00:15:39,949
that we see.                    

365
00:15:39,951 --> 00:15:41,150
There is that one at            
the bottom there,               

366
00:15:41,152 --> 00:15:43,885
transformable, another thing    
I'm not gonna talk about.       

367
00:15:43,887 --> 00:15:47,255
But transformable allows        
you to store anything           

368
00:15:47,257 --> 00:15:50,692
into the database by            
converting it to a data, and    

369
00:15:50,694 --> 00:15:52,426
then converting it              
back on the way out.            

370
00:15:52,428 --> 00:15:53,794
And so if you pick              
transformable there,            

371
00:15:53,796 --> 00:15:55,495
you're gonna have to            
do some extra work.             

372
00:15:55,497 --> 00:15:58,365
To tell Core Data about that    
transformation, and that's why  

373
00:15:58,367 --> 00:16:00,867
I don't really have time to     
tell you about, but just know   

374
00:16:00,869 --> 00:16:02,802
that if you wanted to store     
something like a CGRect.        

375
00:16:02,804 --> 00:16:06,338
Actually, if I was going to     
store a CGRect, I might use     

376
00:16:06,340 --> 00:16:09,841
the function, there's some      
function called something like  

377
00:16:10,743 --> 00:16:12,510
NSStringFromCGRect.             

378
00:16:12,512 --> 00:16:13,444
It gives you a string, and      

379
00:16:13,446 --> 00:16:15,579
then there's                    
NSCGRectFromString or           

380
00:16:15,581 --> 00:16:15,846
something like that.            

381
00:16:15,848 --> 00:16:16,946
So I'd probably store           
it as a string,                 

382
00:16:16,948 --> 00:16:19,682
but if I had something more     
complicated than that,          

383
00:16:19,684 --> 00:16:20,549
then I might use                
a transformable.                

384
00:16:20,551 --> 00:16:26,488
All right, these attributes     
here are going to be accessed,  

385
00:16:26,490 --> 00:16:28,156
we're gonna get and             
set their values.               

386
00:16:28,158 --> 00:16:31,092
Well actually, we're not going  
to do this but fundamentally    

387
00:16:31,094 --> 00:16:33,728
the way you do it is you        
have these two methods,         

388
00:16:33,730 --> 00:16:35,329
value(forKey) and               
setValue (forKey).              

389
00:16:35,331 --> 00:16:37,364
And I'll talk about how         
we're gonna use that, but       

390
00:16:37,366 --> 00:16:42,102
that's how we're gonna set and  
get the values on an entity.    

391
00:16:42,104 --> 00:16:44,371
Notice the error went           
away as soon as we              

392
00:16:44,373 --> 00:16:46,072
gave this thing, a type.        

393
00:16:46,074 --> 00:16:49,508
So here I'm gonna add some      
more attributes, identifier,    

394
00:16:49,510 --> 00:16:51,977
which is just some string       
that identifies the tweet and   

395
00:16:51,979 --> 00:16:54,513
then created,                   
which was when it was tweeted.  

396
00:16:54,515 --> 00:16:59,117
Notice I'm setting created's    
type here to be date because    

397
00:16:59,119 --> 00:17:02,053
it is a date, obviously,        
when the thing was created.     

398
00:17:02,055 --> 00:17:05,589
Now this is one way to look at  
our entities and attributes,    

399
00:17:05,591 --> 00:17:06,023
this kind of table form.        

400
00:17:06,025 --> 00:17:08,625
But we can actually look at     
it in graphical form as well.   

401
00:17:08,627 --> 00:17:11,194
If you see down in the corner   
where it says editor style.     

402
00:17:11,196 --> 00:17:12,795
If I click on                   
the other button there,         

403
00:17:12,797 --> 00:17:15,131
the one that looks a little     
more like a graph,              

404
00:17:15,133 --> 00:17:17,232
then it shows me                
the same thing but              

405
00:17:17,234 --> 00:17:18,000
in this graphical form.         

406
00:17:18,002 --> 00:17:20,468
It's even on graph paper,       
all right?                      

407
00:17:20,470 --> 00:17:23,104
And in this form                
right here we can do            

408
00:17:23,106 --> 00:17:24,872
all the things that we          
did in the other one.           

409
00:17:24,874 --> 00:17:26,807
For example,                    
I can still add entity here.    

410
00:17:26,809 --> 00:17:29,910
So I'm gonna add another        
entity for my Twitter User,     

411
00:17:29,912 --> 00:17:31,277
this is people who tweet.       

412
00:17:31,279 --> 00:17:33,579
And there it is,                
it called it entity again,      

413
00:17:33,581 --> 00:17:34,413
that's the default.             

414
00:17:34,415 --> 00:17:37,349
We'll set its name              
to be TwitterUser.              

415
00:17:37,351 --> 00:17:39,785
All right, so we now have two   
entities, you see on there.     

416
00:17:39,787 --> 00:17:43,355
What's kinda cool is as you     
drag these entities around,     

417
00:17:43,357 --> 00:17:45,990
this, this kind of editor,      
this graphical                  

418
00:17:45,992 --> 00:17:49,260
editor, will automatically      
kind of keep them spaced apart  

419
00:17:49,262 --> 00:17:49,460
from each other.                

420
00:17:49,462 --> 00:17:51,561
Which is kind of fun,           
especially since they're going  

421
00:17:51,563 --> 00:17:53,530
to start having wires           
connecting them because         

422
00:17:53,532 --> 00:17:55,231
they're going to start          
having relationships            

423
00:17:55,233 --> 00:17:58,434
to each other as you're         
going to see in a moment.       

424
00:17:58,436 --> 00:18:01,670
We can add attributes in this   
graphical style as well- you    

425
00:18:01,672 --> 00:18:05,107
can edit those right in there   
just by double clicking on      

426
00:18:05,109 --> 00:18:06,608
them, change                    
whatever you want.              

427
00:18:06,610 --> 00:18:09,911
So, here I got a screenName,    
now of course I got an error    

428
00:18:09,913 --> 00:18:12,947
again because I didn't set      
the type of that screenName.    

429
00:18:12,949 --> 00:18:16,917
So, in this view you set        
the types by bringing up        

430
00:18:16,919 --> 00:18:17,050
the inspector.                  

431
00:18:17,052 --> 00:18:19,753
So you just bring up            
your normal inspector,          

432
00:18:19,755 --> 00:18:20,386
attribute inspector.            

433
00:18:20,388 --> 00:18:23,155
And the, here you can see       
it's inspecting screenName,     

434
00:18:23,157 --> 00:18:24,256
it's got the name there.        

435
00:18:24,258 --> 00:18:27,125
There's some other things       
in here like transient,         

436
00:18:27,127 --> 00:18:27,425
indexed, optional.              

437
00:18:27,427 --> 00:18:30,695
By the way, that optional       
doesn't mean this is optional   

438
00:18:30,697 --> 00:18:32,563
like the Swift thing optional.  

439
00:18:32,565 --> 00:18:36,433
This is optional like in        
SQL database terms, right.      

440
00:18:36,435 --> 00:18:38,402
In relational                   
database optional.              

441
00:18:38,404 --> 00:18:40,770
So I'm not gonna talk           
about any of the database       

442
00:18:40,772 --> 00:18:41,104
You rarely need to set any of   
these properties right here.    

443
00:18:41,106 --> 00:18:45,007
stuff of it.                    

444
00:18:45,875 --> 00:18:47,042
But you do need                 
to set the type.                

445
00:18:47,044 --> 00:18:48,309
So we're not gonna              
talk about that, but            

446
00:18:48,311 --> 00:18:50,278
we have to set                  
the type right here.            

447
00:18:50,280 --> 00:18:52,346
And the screenName,             
of course, is a string.         

448
00:18:52,348 --> 00:18:55,049
So I'm just gonna               
change it to a string.          

449
00:18:55,051 --> 00:18:58,585
I'm adding another attribute    
to the TwitterUser,             

450
00:18:58,587 --> 00:19:02,022
this one is the name,           
the person's actual name,       

451
00:19:02,024 --> 00:19:05,324
not their @ sign handle,        
but their actual name.          

452
00:19:05,326 --> 00:19:08,160
Now we've built a couple        
of entities with a bunch of     

453
00:19:08,162 --> 00:19:11,096
attributes on them, okay,       
and this is gonna look like     

454
00:19:11,098 --> 00:19:14,633
classes with vars in            
our code eventually.            

455
00:19:14,635 --> 00:19:17,936
But what about relationships,   
obviously a Tweet and           

456
00:19:17,938 --> 00:19:21,673
a TwitterUser have              
a relationship to each other.   

457
00:19:21,675 --> 00:19:24,075
And to create relationships     
between things we just          

458
00:19:24,077 --> 00:19:27,578
Ctrl+drag, this is our          
favorite gesture in Xcode and   

459
00:19:27,580 --> 00:19:28,111
we're using it again.           

460
00:19:28,113 --> 00:19:31,247
Ctrl+drag to create             
a relationship                  

461
00:19:31,249 --> 00:19:31,381
between two things.             

462
00:19:31,383 --> 00:19:35,084
And it actually doesn't matter  
which direction you Ctrl+drag,  

463
00:19:35,086 --> 00:19:38,387
because you're creating         
kind of a bidirectional         

464
00:19:38,389 --> 00:19:39,121
relationship.                   

465
00:19:39,123 --> 00:19:41,790
So here, I did Ctrl+drag, and   
it automatically created this   

466
00:19:41,792 --> 00:19:46,728
relationship, which it called   
newRelationship on both sides.  

467
00:19:46,730 --> 00:19:52,233
And this relationship is        
essentially just gonna be       

468
00:19:52,235 --> 00:19:53,534
a var in our class.             

469
00:19:53,536 --> 00:19:57,904
But the var's type is either    
going to be the type, if it's   

470
00:19:57,906 --> 00:20:00,507
like a Tweet, you know,         
it's gonna be a single one, or  

471
00:20:00,509 --> 00:20:03,276
it could be an NSSet,           
if it's many of them.           

472
00:20:03,278 --> 00:20:05,845
Like a Twitter user might       
have many tweets, and           

473
00:20:05,847 --> 00:20:07,680
I'll talk about                 
that in a moment.               

474
00:20:07,682 --> 00:20:11,683
So, from a Tweet's perspective  
this relationship to            

475
00:20:11,685 --> 00:20:13,585
a TwitterUser is the Tweeter.   

476
00:20:13,587 --> 00:20:15,620
The person who                  
tweeted this tweet.             

477
00:20:15,622 --> 00:20:18,356
So, I'm going to change the     
name of this relationship on    

478
00:20:18,358 --> 00:20:23,460
the Tweet side to be tweeter    
instead of newRelationship,     

479
00:20:23,462 --> 00:20:24,127
which was the default.          

480
00:20:24,129 --> 00:20:26,796
But, on the other, okay, so     
that's why I call it tweeter.   

481
00:20:26,798 --> 00:20:28,631
On the other side               
the TwitterUser from its        

482
00:20:28,633 --> 00:20:32,468
perspective though, okay, the   
relationship of the tweet is    

483
00:20:32,470 --> 00:20:34,536
the tweets that this            
Twitter user has tweeted.       

484
00:20:34,538 --> 00:20:37,773
Okay, it's not tweeter, the     
Twitter user is the tweeter,    

485
00:20:37,775 --> 00:20:40,408
so he would never call          
this relationship tweeter.      

486
00:20:40,410 --> 00:20:43,644
He's gonna call this            
relationship tweets             

487
00:20:43,646 --> 00:20:45,413
because this is the tweet.      

488
00:20:45,415 --> 00:20:46,914
Now notice that's plural,       
okay,                           

489
00:20:46,916 --> 00:20:49,349
we'll talk about                
that in a second.               

490
00:20:49,351 --> 00:20:53,019
Notice that when we do this,    
Xcode tracks if I'm inspecting  

491
00:20:53,021 --> 00:20:56,856
the tweet's relationship there  
on the TwitterUser side,        

492
00:20:56,858 --> 00:20:57,757
it knows the inverse.           

493
00:20:57,759 --> 00:20:59,692
It knows that tweeter goes      
the opposite direction,         

494
00:20:59,694 --> 00:21:02,828
there's always gonna be         
an inverse relationship.        

495
00:21:03,429 --> 00:21:06,364
So let's talk about that        
tweets being a plural right?    

496
00:21:06,366 --> 00:21:09,166
So a tweet can only             
have one tweeter.               

497
00:21:09,168 --> 00:21:10,901
Only one person can             
have tweeted it, but            

498
00:21:10,903 --> 00:21:16,073
a Twitter user can tweet        
thousands of tweets, okay?      

499
00:21:16,075 --> 00:21:17,907
And so                          
that's a little different       

500
00:21:17,909 --> 00:21:18,741
kind of relationship.           

501
00:21:18,743 --> 00:21:20,543
So how do we specify that?      

502
00:21:20,545 --> 00:21:23,545
We call the tweets              
relationship the,               

503
00:21:23,547 --> 00:21:27,282
a to many relationship          
because obviously the Twitter   

504
00:21:27,284 --> 00:21:28,850
user can have many tweets.      

505
00:21:28,852 --> 00:21:32,086
So that's called to many        
in database parlance, and       

506
00:21:32,088 --> 00:21:33,454
you set that right              
in the Inspector.               

507
00:21:33,456 --> 00:21:35,189
So you just click               
on that tweets and              

508
00:21:35,191 --> 00:21:36,456
you go over here to             
where it says Type,             

509
00:21:36,458 --> 00:21:39,726
and instead of having it be     
To One you're gonna change it   

510
00:21:39,728 --> 00:21:42,695
to be To Many, okay, so now     
it's a to many relationship.    

511
00:21:42,697 --> 00:21:48,768
Right there, you can see that   
it's changed a little bit as,   

512
00:21:48,770 --> 00:21:50,235
and we'll show                  
that in a second.               

513
00:21:50,237 --> 00:21:53,505
But the type of this            
relationship now on the tweet   

514
00:21:53,507 --> 00:21:56,775
side is still type              
NSManagedObject,                

515
00:21:56,777 --> 00:21:59,110
because it points to another    
entity in the database.         

516
00:21:59,112 --> 00:22:01,379
And we know that                
the objects in the database     

517
00:22:01,381 --> 00:22:03,147
are represented by              
an NSManagedObject.             

518
00:22:03,149 --> 00:22:05,582
So that's gonna be              
the type of that var.           

519
00:22:05,584 --> 00:22:08,251
Although we're eventually       
gonna make it even better than  

520
00:22:08,253 --> 00:22:10,219
that, but                       
on the other side though,       

521
00:22:10,221 --> 00:22:16,459
the type of that var is NSSet   
of NSManagedObject, okay?       

522
00:22:16,461 --> 00:22:22,364
Now NSSet, there is             
a Swift struct called set.      

523
00:22:22,366 --> 00:22:25,133
It's a generic type, it's just  
like an array where you have    

524
00:22:25,135 --> 00:22:25,533
to say what's in an array,      

525
00:22:25,535 --> 00:22:28,169
same thing with a set you       
have to say what's in it.       

526
00:22:28,171 --> 00:22:32,440
NSSet is kind of an older       
Objective-C kind of set.        

527
00:22:32,442 --> 00:22:34,174
It's not generic,               
it's untyped.                   

528
00:22:34,176 --> 00:22:38,045
The things in NSSet are any,    
which we kinda need a little    

529
00:22:38,047 --> 00:22:41,781
bit here cuz we really don't    
know what kinds of things       

530
00:22:41,783 --> 00:22:42,048
are in there.                   

531
00:22:42,050 --> 00:22:46,385
However, in your code you       
can cast from this NSSet        

532
00:22:46,387 --> 00:22:50,989
of NSManagedObject to a set of  
what you know to be in there    

533
00:22:50,991 --> 00:22:52,057
using as question mark, and     

534
00:22:52,059 --> 00:22:55,293
if that in fact is what's       
in there, it will work.         

535
00:22:56,595 --> 00:22:58,462
So that's the NSSet there.      

536
00:22:58,596 --> 00:23:00,130
One last thing I'm gonna        
show you here before            

537
00:23:00,132 --> 00:23:03,533
we get back to the slides       
is this Delete Rule.            

538
00:23:03,535 --> 00:23:05,134
You see the delete              
rule on the,                    

539
00:23:05,136 --> 00:23:09,038
clicked on tweets on here so    
we're inspecting tweets.        

540
00:23:09,040 --> 00:23:12,374
And this delete rule            
tells you what happens          

541
00:23:12,376 --> 00:23:17,145
to the pointed-to tweets if     
we deleted this Twitter user.   

542
00:23:17,147 --> 00:23:18,646
Cuz if I delete                 
this Twitter user,              

543
00:23:18,648 --> 00:23:22,350
does that mean I delete all     
of the Twitter user's tweets?   

544
00:23:22,352 --> 00:23:25,086
Well, it depends on this        
delete rule right here.         

545
00:23:25,088 --> 00:23:25,185
this delete rule is saying      
nullify, which would mean no.   

546
00:23:25,187 --> 00:23:28,055
So right now,                   

547
00:23:28,057 --> 00:23:30,957
Those tweets would stay in the  
database, and their tweeter     

548
00:23:30,959 --> 00:23:34,127
will be set to nil because      
their tweeter got deleted.      

549
00:23:34,129 --> 00:23:36,662
But there is a cascading        
delete rule, which would say    

550
00:23:36,664 --> 00:23:39,365
if I delete this thing then     
delete everything that it       

551
00:23:39,367 --> 00:23:41,867
points to, just go right        
down the graph and              

552
00:23:41,869 --> 00:23:42,300
delete everything.              

553
00:23:42,302 --> 00:23:45,169
So that's what controls what    
happens when you delete.        

554
00:23:45,171 --> 00:23:47,238
Now I'm not gonna ask           
you to even do delete;          

555
00:23:47,240 --> 00:23:50,674
I guess I might ask you an      
extra credit to do delete in    

556
00:23:50,676 --> 00:23:50,974
assignment five.                

557
00:23:50,976 --> 00:23:53,743
Because deletion kinda-         
you're really gonna know what   

558
00:23:53,745 --> 00:23:55,745
you're doing- when you          
can delete things, and          

559
00:23:55,747 --> 00:23:57,346
what kind of delete             
rules you want.                 

560
00:23:57,348 --> 00:23:59,214
But I just want to let          
you know that you specify       

561
00:23:59,216 --> 00:24:02,317
the delete rule right           
here in the inspector.          

562
00:24:02,651 --> 00:24:06,754
Okay, now that you've defined   
all your entities, attributes   

563
00:24:06,756 --> 00:24:10,558
in relationships, then what     
can we do with these things?    

564
00:24:10,560 --> 00:24:14,495
Well to do anything with it     
we need to get a hold of them   

565
00:24:14,497 --> 00:24:17,564
in our code,                    
grab onto them basically, and   

566
00:24:17,566 --> 00:24:19,599
to do that we need              
another important class,        

567
00:24:19,601 --> 00:24:22,335
NSManagedObjectContext, so      
I told you                      

568
00:24:22,337 --> 00:24:25,237
all those things in the         
database are NSManagedObjects,  

569
00:24:25,239 --> 00:24:27,039
you need                        
an NSManagedObjectContext,      

570
00:24:27,041 --> 00:24:30,942
which represents a database     
to do anything with them,       

571
00:24:30,944 --> 00:24:33,411
to get any of them,             
to create any of them, etc,     

572
00:24:33,413 --> 00:24:36,914
this is the hub around which    
Core Data activity turns,       

573
00:24:36,916 --> 00:24:37,481
as I say there.                 

574
00:24:37,483 --> 00:24:40,084
So how do I get one of these    
NSManagedObjectContext?         

575
00:24:40,086 --> 00:24:42,853
And the answer is, you need     
a persistentContainer.          

576
00:24:42,855 --> 00:24:45,789
Woo-hoo, and you know           
where to get one of those.      

577
00:24:45,791 --> 00:24:47,290
You just click,                 
Use Core Data, and              

578
00:24:47,292 --> 00:24:49,091
it's gonna appear in            
your AppDelegate.               

579
00:24:49,093 --> 00:24:50,859
You're gonna get                
that lazy var,                  

580
00:24:50,861 --> 00:24:52,494
that's called                   
persistentContainer.            

581
00:24:52,496 --> 00:24:54,362
And that is gonna be            
a persistentContainer.          

582
00:24:54,364 --> 00:24:56,330
And from that you               
can get the context.            

583
00:24:56,332 --> 00:24:59,734
Now, if you have the lazy       
var in your AppDelegate,        

584
00:24:59,736 --> 00:25:02,036
How the heck do                 
you call that var?              

585
00:25:02,038 --> 00:25:03,203
How do you get that var?        

586
00:25:03,205 --> 00:25:04,504
And this is how you do it,      
okay?                           

587
00:25:04,506 --> 00:25:08,808
You get a copy of the shared    
UIApplication, now,             

588
00:25:08,810 --> 00:25:11,444
we didn't talk about this but   
your app has this one and       

589
00:25:11,446 --> 00:25:15,381
only UIApplication object that  
represents your application     

590
00:25:15,383 --> 00:25:19,384
and you get it by doing         
UIApplication.shared,           

591
00:25:19,386 --> 00:25:20,085
it's a var.                     

592
00:25:20,087 --> 00:25:23,254
Static var in                   
UIApplication class.            

593
00:25:23,256 --> 00:25:23,688
Gives you the shared one.       

594
00:25:23,690 --> 00:25:27,758
Then you're gonna access this   
var in UIApplication which is   

595
00:25:27,760 --> 00:25:29,159
its delegate.                   

596
00:25:29,460 --> 00:25:31,661
Now, its delegate is            
automatically set up for        

597
00:25:31,663 --> 00:25:34,463
you to be this Swift class      
AppDelegate that you see        

598
00:25:34,465 --> 00:25:36,932
always; we always put it        
off in Supporting Files and     

599
00:25:36,934 --> 00:25:39,501
get it out of our way,          
but it's created for you,       

600
00:25:39,503 --> 00:25:39,801
it's a nice little class.       

601
00:25:39,803 --> 00:25:42,503
We're going to talk about the   
application life cycle, and     

602
00:25:42,505 --> 00:25:45,473
where it fits in, in a little   
bit, but for now all            

603
00:25:45,475 --> 00:25:48,308
you need to know is you can     
get AppDelegate, and you want   

604
00:25:48,310 --> 00:25:51,611
to send persistentContainer     
to it to get that var, but of   

605
00:25:51,613 --> 00:25:56,516
course you have to as it to be  
the AppDelegate class first.    

606
00:25:56,518 --> 00:25:58,051
So this is the code             
you're going to use.            

607
00:25:58,053 --> 00:26:00,186
(UIApplication.shared.delegate  
as!                             

608
00:26:00,188 --> 00:26:02,855
AppDelegate) All that           
in one expression               

609
00:26:02,857 --> 00:26:05,757
dot persistentContainer         
now you're gonna get this       

610
00:26:05,759 --> 00:26:08,593
persistentContainer, and        
notice I'm doing as             

611
00:26:08,595 --> 00:26:11,729
exclamation point this will     
crash if my App Delegate is     

612
00:26:11,731 --> 00:26:14,765
not in fact App Delegate,       
but it's already wired up       

613
00:26:14,767 --> 00:26:17,835
to be that for you when         
you create a new project,       

614
00:26:17,837 --> 00:26:20,103
so that should                  
never be a problem.             

615
00:26:20,838 --> 00:26:20,903
Okay?                           
So                              

616
00:26:20,905 --> 00:26:23,773
now I have this                 
persistentContainer,            

617
00:26:23,775 --> 00:26:26,942
I need to get                   
the context out of it.          

618
00:26:26,944 --> 00:26:27,509
And, so,                        

619
00:26:27,511 --> 00:26:32,080
the container has an awesome    
var called viewContext.         

620
00:26:32,082 --> 00:26:35,750
And the viewContext is an       
NSManagedObjectContext that's   

621
00:26:35,752 --> 00:26:39,153
only suitable for               
use on the main queue.          

622
00:26:39,155 --> 00:26:39,319
This is in red,                 

623
00:26:39,321 --> 00:26:41,955
you know whenever you see       
anything in red on my slides,   

624
00:26:41,957 --> 00:26:44,424
this means pay attention,       
it will matter for              

625
00:26:44,426 --> 00:26:46,826
your homework,                  
and in life, but                

626
00:26:46,828 --> 00:26:49,795
you can only use this           
viewContext in the main queue,  

627
00:26:49,797 --> 00:26:53,132
it called viewContext because   
you use it with your views,     

628
00:26:53,134 --> 00:26:57,869
okay, your UI views, that's     
why we call it viewContext.     

629
00:26:58,604 --> 00:27:01,506
So why do I make a point        
about this main queue?          

630
00:27:01,508 --> 00:27:05,276
Well, the reason I do that is   
because NSManagedObjectContext  

631
00:27:05,278 --> 00:27:06,577
is not thread-safe.             

632
00:27:06,579 --> 00:27:09,513
But I'm gonna talk you, talk    
to you about how we can do      

633
00:27:09,515 --> 00:27:12,682
multithreaded database stuff    
towards the end of this talk.   

634
00:27:12,684 --> 00:27:16,019
All right, so now you have      
this viewContext then you can   

635
00:27:16,021 --> 00:27:17,620
use it to do things.            

636
00:27:17,622 --> 00:27:20,823
Now, it's so                    

637
00:27:20,825 --> 00:27:23,058
{UIApplication.shared.delegate  
as!                             

638
00:27:23,060 --> 00:27:25,160
Appdelegate).persistentContai-  
ner,                            

639
00:27:25,162 --> 00:27:26,160
that's kind of                  
a messy line of code.           

640
00:27:26,162 --> 00:27:29,263
There's a lot of, there's as    
and all these things in there.  

641
00:27:29,265 --> 00:27:33,200
So at times we'll just          
create a static version of      

642
00:27:33,202 --> 00:27:36,603
persistentContainer in          
our AppDelegate.                

643
00:27:36,605 --> 00:27:38,204
Okay, we'll just call           
it the same thing.              

644
00:27:38,206 --> 00:27:40,273
persistentContainer but         
it's static and                 

645
00:27:40,275 --> 00:27:42,742
it's just gonna return          
that messy line of code.        

646
00:27:42,744 --> 00:27:45,177
So now we can get that          
persistentContainer with        

647
00:27:45,179 --> 00:27:48,180
AppDelegate.persistentContai-   
ner.                            

648
00:27:48,182 --> 00:27:49,014
See what I did there?           

649
00:27:49,016 --> 00:27:51,449
I just made it easier to get    
up by making that be a static,  

650
00:27:51,451 --> 00:27:55,019
a class var, and we can do the  
same thing with viewContext,    

651
00:27:55,021 --> 00:27:58,288
you might create a static       
called viewContext and for      

652
00:27:58,290 --> 00:28:00,891
the rest of these slides you    
can assume I've done this.      

653
00:28:00,893 --> 00:28:03,893
Which is good because typing    
that long messy thing would     

654
00:28:03,895 --> 00:28:06,529
make all my slides              
spill over the edge.            

655
00:28:06,531 --> 00:28:08,931
So I'm gonna use this           
shorter version as well.        

656
00:28:08,933 --> 00:28:10,366
And you're welcome              
to create the static            

657
00:28:10,368 --> 00:28:12,334
version in your                 
AppDelegate if you want         

658
00:28:12,336 --> 00:28:13,501
to make your code               
a little cleaner.               

659
00:28:13,503 --> 00:28:16,070
Now this viewContext in         
the persistentContainer         

660
00:28:16,072 --> 00:28:16,170
There's one of them that        
represents your entire          

661
00:28:16,172 --> 00:28:19,373
are shared.                     

662
00:28:19,375 --> 00:28:19,506
database.                       

663
00:28:19,508 --> 00:28:22,242
So it's perfectly fine to       
create a single static          

664
00:28:22,244 --> 00:28:22,542
that does this.                 

665
00:28:22,544 --> 00:28:25,177
By the way, what if you         
wanted multiple databases?      

666
00:28:25,179 --> 00:28:27,179
You could even have             
multiple databases with         

667
00:28:27,181 --> 00:28:28,246
different schema.               

668
00:28:28,248 --> 00:28:30,482
Very easy,                      
if you go look at the code for  

669
00:28:30,484 --> 00:28:33,818
persistentContainer in          
AppDelegate,                    

670
00:28:33,820 --> 00:28:36,020
you'll see it's only            
like four lines of code.        

671
00:28:36,022 --> 00:28:38,155
And you could just copy         
it to create a different        

672
00:28:38,157 --> 00:28:41,692
persistentContainer using       
a different xcmodeld file.      

673
00:28:41,694 --> 00:28:44,294
Instead of using model          
according to the example,       

674
00:28:44,296 --> 00:28:45,561
create another one with         
a different one and             

675
00:28:45,563 --> 00:28:49,265
you can just go file, new file  
and create another data model.  

676
00:28:49,267 --> 00:28:53,936
You could even create two       
persistent containers with      

677
00:28:53,938 --> 00:28:54,970
the same model.                 

678
00:28:54,972 --> 00:28:56,905
So they would be                
separate databases, but         

679
00:28:56,907 --> 00:28:58,940
have the same model,            
the same entities to that and   

680
00:28:58,942 --> 00:28:59,907
the same relationship to that.  

681
00:28:59,909 --> 00:29:01,108
It's perfectly                  
allowed as well.                

682
00:29:01,110 --> 00:29:03,610
But for everything you're       
going to do in this class, and  

683
00:29:03,612 --> 00:29:04,544
for really with most apps,      

684
00:29:04,546 --> 00:29:06,779
you're going to have            
one big database.               

685
00:29:06,781 --> 00:29:09,982
And you're going to have this   
one persistent container that   

686
00:29:09,984 --> 00:29:12,017
is the container for it.        

687
00:29:12,019 --> 00:29:13,318
All right.                      

688
00:29:13,320 --> 00:29:17,555
So now I have a context in      
my hand, this viewContext.      

689
00:29:17,557 --> 00:29:17,822
And what can I do?              

690
00:29:17,824 --> 00:29:20,491
Well, of course, I can insert   
objects into the database.      

691
00:29:20,493 --> 00:29:22,226
I can delete objects            
from the database.              

692
00:29:22,228 --> 00:29:24,461
And I can query for             
objects in the database.        

693
00:29:24,463 --> 00:29:25,528
So, let's talk about            
all those things.               

694
00:29:25,530 --> 00:29:28,498
Let's start with insert         
because until we insert some    

695
00:29:28,500 --> 00:29:31,133
data in the database we can't   
do any of those other things.   

696
00:29:31,135 --> 00:29:34,336
And the way you insert          
an object in the database, or   

697
00:29:34,338 --> 00:29:35,404
a way to do it,                 
and actually for                

698
00:29:35,406 --> 00:29:38,640
the next few slide I'm going    
to kind of show you the,        

699
00:29:38,642 --> 00:29:39,507
the essentials.                 

700
00:29:39,509 --> 00:29:42,943
But, we're eventually going to  
move up to a high level and     

701
00:29:42,945 --> 00:29:45,512
access this stuff in            
a much nicer way.               

702
00:29:45,514 --> 00:29:47,280
But I'll tell you               
the basics of it first.         

703
00:29:47,282 --> 00:29:50,250
So the basic way to put         
something in the database is    

704
00:29:50,252 --> 00:29:52,018
with this really                
interesting method.             

705
00:29:52,020 --> 00:29:57,556
NSEntityDescription.insertNew-  
Object(forEntityName: into:     

706
00:29:57,558 --> 00:29:58,357
context).                       

707
00:29:58,359 --> 00:30:01,660
Okay, that's a mouthful, used   
to be even more of a mouthful   

708
00:30:01,662 --> 00:30:03,094
before they renamed it.         

709
00:30:03,096 --> 00:30:07,799
And you just specify            
the name of the entity, so      

710
00:30:07,801 --> 00:30:08,699
Tweet or TwitterUser.           

711
00:30:08,701 --> 00:30:11,735
And you give it a context that  
is gonna be the viewContext     

712
00:30:11,737 --> 00:30:12,336
you got from the AppDelegate.   

713
00:30:12,338 --> 00:30:14,971
And boom, it's gonna create     
one of these in the database.   

714
00:30:14,973 --> 00:30:18,641
Now all of its                  
attributes will be nil.         

715
00:30:18,643 --> 00:30:20,743
Okay, although you can          
inspect the attributes in       

716
00:30:20,745 --> 00:30:23,212
the data model editor and       
specify default value.          

717
00:30:23,214 --> 00:30:25,781
And so it might start out       
with the default value.         

718
00:30:25,783 --> 00:30:30,218
But if it doesn't,              
then they'll start out as nil.  

719
00:30:30,220 --> 00:30:33,488
Okay, so that's great.          

720
00:30:33,490 --> 00:30:35,189
I can now create one.           

721
00:30:35,191 --> 00:30:39,193
And now I need to set those     
vars to have some value.        

722
00:30:39,195 --> 00:30:42,362
I need to set the text of the   
tweet and things like that and  

723
00:30:42,364 --> 00:30:45,965
I told you I'm gonna do         
this with value for key and     

724
00:30:45,967 --> 00:30:47,700
set value for key.              

725
00:30:47,702 --> 00:30:53,272
So for example I wanted to      
set the let's say the text,     

726
00:30:53,274 --> 00:30:55,007
I could just say tweet.         

727
00:30:55,009 --> 00:31:00,212
A set value for key quote       
text, to be a string.           

728
00:31:02,515 --> 00:31:05,083
And you can do dot notation     
here, with value for key path.  

729
00:31:05,085 --> 00:31:07,184
That's what I'm showing         
in green right there.           

730
00:31:07,186 --> 00:31:09,520
You can have, if you had        
a tweet you can actually set    

731
00:31:09,522 --> 00:31:14,091
the tweet's tweeter's name,     
using this dot notation to set  

732
00:31:14,093 --> 00:31:16,760
value for key path tweeter dot  
name and it would go through    

733
00:31:16,762 --> 00:31:19,462
the tweeter relationship        
which is kinda fun.             

734
00:31:19,464 --> 00:31:22,765
I'm kinda going fast through    
this because this is a really   

735
00:31:22,767 --> 00:31:24,433
terrible API.                   

736
00:31:24,435 --> 00:31:26,468
First of all it's               
got any in there so             

737
00:31:26,470 --> 00:31:28,803
there's not type checking       
going on here, okay?            

738
00:31:28,805 --> 00:31:36,277
You could say, set value date   
for key quote text, all right?  

739
00:31:36,279 --> 00:31:38,446
And that would be perfectly     
accepted by Swift.              

740
00:31:38,448 --> 00:31:42,416
Date is an Any and              
quote text is a String, but     

741
00:31:42,418 --> 00:31:45,752
of course that's gonna fail     
miserably at run time, okay,    

742
00:31:45,754 --> 00:31:46,986
because the text is a Atring.   

743
00:31:46,988 --> 00:31:49,655
So we're not really gonna       
use this API but this is        

744
00:31:49,657 --> 00:31:54,460
the underlying basic way that   
Core Data is doing this.        

745
00:31:54,462 --> 00:31:56,528
Yes the key is just the name    
of the attribute, and           

746
00:31:56,530 --> 00:32:00,732
the value is all the things     
we've talked about before.      

747
00:32:01,667 --> 00:32:04,302
I do have the blue              
Use Scalar Type there which     

748
00:32:04,304 --> 00:32:04,335
is interesting.                 

749
00:32:04,337 --> 00:32:09,039
If the thing you're putting     
in the database is a flow or    

750
00:32:09,041 --> 00:32:11,308
an Int32 or                     
one of these things.            

751
00:32:11,310 --> 00:32:15,178
It's actually gonna be stored   
in a database as an NSNumber,   

752
00:32:15,180 --> 00:32:15,778
which is a class,               

753
00:32:15,780 --> 00:32:19,248
it's an object, kind of         
generic holder of numbers.      

754
00:32:19,250 --> 00:32:24,153
But if you flip on the switch   
in the inspector in your data   

755
00:32:24,155 --> 00:32:27,522
modeller for that attribute     
saying use a scalar type,       

756
00:32:27,524 --> 00:32:31,760
then it'll make the type be     
double or int or whatever,      

757
00:32:31,762 --> 00:32:32,727
instead of NSNumber, so.        

758
00:32:32,729 --> 00:32:34,495
I know, you had a question?     

759
00:32:34,497 --> 00:32:37,398
>> Yes, so the question is,     
does set value reject           

760
00:32:37,400 --> 00:32:39,132
something where                 
the types don't match?          

761
00:32:39,134 --> 00:32:40,433
And the answer is, it can't.    

762
00:32:40,435 --> 00:32:42,535
It doesn't know the type,       
the types are any,              

763
00:32:42,537 --> 00:32:45,705
as long as it matches any- and  
everything matches any.         

764
00:32:45,707 --> 00:32:46,672
So, it can't.                   

765
00:32:46,674 --> 00:32:51,376
There's no way for it to have   
enough information to reject.   

766
00:32:51,378 --> 00:32:54,245
As long as it matches any,      
it'll accept that as the type.  

767
00:32:54,247 --> 00:32:55,346
And then at runtime,            
it will crash.                  

768
00:32:55,348 --> 00:32:58,416
If you try to set a date        
to be into a string field.      

769
00:32:58,418 --> 00:33:03,120
>> So                           
when it's like [INAUDIBLE]      

770
00:33:03,122 --> 00:33:05,922
save context,                   

771
00:33:05,924 --> 00:33:08,391
do you have to like             
make it go through.             

772
00:33:08,393 --> 00:33:09,559
Or is it.                       
>> Go and remove.               

773
00:33:09,561 --> 00:33:11,093
>> [CROSSTALK]                  
>> What do you                  

774
00:33:11,095 --> 00:33:12,394
mean go and remove it?          

775
00:33:12,396 --> 00:33:13,428
Remove what?                    

776
00:33:21,003 --> 00:33:23,071
Yeah, we'll talk                
about saving in this.           

777
00:33:23,073 --> 00:33:23,571
So, the question is,            

778
00:33:23,573 --> 00:33:25,539
when the app terminates         
it does save context and        

779
00:33:25,541 --> 00:33:28,508
they're trying to save this,    
we'll talk all about saving in  

780
00:33:28,510 --> 00:33:30,710
a minute cause that's           
an important piece of this.     

781
00:33:30,712 --> 00:33:34,113
That's the keys and values,     
pretty straightforward there;   

782
00:33:34,115 --> 00:33:37,583
in fact we're going to talk     
about saving right now.         

783
00:33:37,585 --> 00:33:38,684
We do a nice lead in.           

784
00:33:38,686 --> 00:33:42,320
All these changes that you      
make with that set value even   

785
00:33:42,322 --> 00:33:44,022
insert entity description for   

786
00:33:44,024 --> 00:33:47,225
entity name context whatever    
that thing is called.           

787
00:33:47,227 --> 00:33:49,627
All that stuff only             
happens in memory,              

788
00:33:49,629 --> 00:33:52,996
if you want that to actually    
happen permanently in           

789
00:33:52,998 --> 00:33:55,098
the database you                
need to save it.                

790
00:33:55,100 --> 00:33:56,966
And you do that by              
telling the context,            

791
00:33:56,968 --> 00:34:00,269
like that view context thing,   
to save with the method save.   

792
00:34:00,271 --> 00:34:04,240
It couldn't be simpler,         
except that it can throw.       

793
00:34:04,908 --> 00:34:06,708
Save is a method that           
can throw because               

794
00:34:06,710 --> 00:34:09,010
maybe there's a problem         
writing out to the database.    

795
00:34:09,012 --> 00:34:12,347
And there's many problems       
that could happen writing       

796
00:34:12,349 --> 00:34:13,514
out to the database.            

797
00:34:13,516 --> 00:34:15,015
And you need to look            
at documentation and            

798
00:34:15,017 --> 00:34:16,616
kind of figure out              
what they all are.              

799
00:34:16,618 --> 00:34:19,586
But the take home message       
here is you do need to save.    

800
00:34:19,588 --> 00:34:22,355
If you don't save, that         
substance is gonna be lost      

801
00:34:22,357 --> 00:34:24,657
when your app exists or         
whatever.                       

802
00:34:24,659 --> 00:34:25,324
So you definitely just save.    

803
00:34:25,326 --> 00:34:28,994
And especially when talking     
about multithreaded Core Data.  

804
00:34:28,996 --> 00:34:29,761
And one thread is working.      

805
00:34:29,763 --> 00:34:32,597
That thread needs to save if    
it wants any of the other       

806
00:34:32,599 --> 00:34:34,899
threads to see the work         
that it's done.                 

807
00:34:34,901 --> 00:34:39,837
Okay, so you can use try        
question mark here, remember,   

808
00:34:39,839 --> 00:34:40,637
which means try and             

809
00:34:40,639 --> 00:34:43,606
if it fails,                    
just return nil and ignore it.  

810
00:34:43,608 --> 00:34:47,176
You can do that, if you don't   
mind that it didn't save.       

811
00:34:47,178 --> 00:34:49,912
And the kinda things that       
can happen, saving errors.      

812
00:34:49,914 --> 00:34:52,314
You could obviously have        
file system problems,           

813
00:34:52,316 --> 00:34:54,683
your disk is full or            
something like that.            

814
00:34:54,685 --> 00:34:56,985
But you can also have           
inconsistencies in              

815
00:34:56,987 --> 00:34:59,854
the database,                   
maybe you had conflicting       

816
00:34:59,856 --> 00:35:03,190
data of two threads trying to   
save to the same database, and  

817
00:35:03,192 --> 00:35:05,559
they've tried to write over     
the top of each other,          

818
00:35:05,561 --> 00:35:07,127
those kind of things.           

819
00:35:07,129 --> 00:35:09,596
Again, a lot of those problems  
you're not gonna have,          

820
00:35:09,598 --> 00:35:11,264
unless you build                
a pretty complicated,           

821
00:35:11,266 --> 00:35:13,499
multithreaded application,      
or something like that,         

822
00:35:13,501 --> 00:35:16,168
but, again, you gotta check     
the documentation, I couldn't,  

823
00:35:16,170 --> 00:35:19,971
it would take too long for      
me to go through all of it.     

824
00:35:20,206 --> 00:35:25,376
Okay now, as I said value       
forKey and setValue forKey.     

825
00:35:25,378 --> 00:35:28,546
Really ugly,                    

826
00:35:28,548 --> 00:35:31,482
What we really want to do is    
be able to set these vars       

827
00:35:31,484 --> 00:35:35,052
as vars, we just wanna          
have a var called text          

828
00:35:35,054 --> 00:35:36,453
somewhere that we can set.      

829
00:35:36,455 --> 00:35:38,287
And of course we're             
exactly going to do that.       

830
00:35:38,289 --> 00:35:41,624
And the way we're going to do   
that is create a subclass of    

831
00:35:41,626 --> 00:35:44,460
NSManagedObject, instead of     
having NSManagedObject in       

832
00:35:44,462 --> 00:35:46,028
the database we doing           
set-value, get-value on it.     

833
00:35:46,030 --> 00:35:50,198
Instead we're going to create   
a subclass of NSManageObjects   

834
00:35:50,200 --> 00:35:53,568
and it's going to have vars on  
there for all the attributes,   

835
00:35:53,570 --> 00:35:57,004
like text, and screen name and  
all those things.               

836
00:35:57,006 --> 00:35:59,740
And Xcode will generate         
all that code for               

837
00:35:59,742 --> 00:36:00,107
you behind the scenes,          

838
00:36:00,109 --> 00:36:02,475
you don't have to do any        
work to make that happen.       

839
00:36:02,477 --> 00:36:04,944
Quite quite simple, so let's    
look and see how we do that.    

840
00:36:04,946 --> 00:36:08,647
You do that by                  
inspecting the entity.          

841
00:36:08,649 --> 00:36:10,249
So here I've chosen tweet.      

842
00:36:10,251 --> 00:36:11,416
Okay, not any of                
its attributes but              

843
00:36:11,418 --> 00:36:14,652
tweet itself, and               
I want to make it so            

844
00:36:14,654 --> 00:36:17,121
it generates this magic code,   
and how do I do that?           

845
00:36:17,123 --> 00:36:19,957
Well, if you go down            
on the inspector                

846
00:36:19,959 --> 00:36:22,593
a little ways you               
see it says Codegen.            

847
00:36:22,595 --> 00:36:23,860
See that Codegen, that's for    

848
00:36:23,862 --> 00:36:25,628
generating this code,           
this magic code.                

849
00:36:25,630 --> 00:36:28,798
Now, you actually have          
a couple of choices here for    

850
00:36:28,800 --> 00:36:29,198
the Codegen.                    

851
00:36:29,200 --> 00:36:32,568
The default I believe is        
this one Class Definition.      

852
00:36:32,570 --> 00:36:36,204
If you choose this one it will  
generate that subclass for      

853
00:36:36,206 --> 00:36:37,706
you and it will just work.      

854
00:36:37,708 --> 00:36:41,376
Okay, you'll be able to         
access your tweets as a class   

855
00:36:41,378 --> 00:36:42,043
called tweet.                   

856
00:36:42,045 --> 00:36:44,144
With all the vars.              

857
00:36:44,146 --> 00:36:45,145
Now this sounds good and        

858
00:36:45,147 --> 00:36:48,181
it is good; by the way if       
you do this class definition    

859
00:36:48,183 --> 00:36:51,017
codegen it will not show        
up in your navigator.           

860
00:36:51,019 --> 00:36:53,719
It's all behind the scenes-     
you never really see this file  

861
00:36:53,721 --> 00:36:57,790
that is, this codegen           
file that generates.            

862
00:36:57,792 --> 00:36:58,023
So don't look for               

863
00:36:58,025 --> 00:36:59,858
it there if you put this        
on class definition.            

864
00:36:59,860 --> 00:37:01,559
This might even be              
the default actually.           

865
00:37:01,561 --> 00:37:04,028
To be Class Definition          
might be on.                    

866
00:37:04,162 --> 00:37:05,796
But there's other               
choices in here.                

867
00:37:05,798 --> 00:37:10,033
And the one we choose the most  
often is Category/Extension.    

868
00:37:10,035 --> 00:37:14,904
By the way, category just       
is the Objective-C word for     

869
00:37:14,906 --> 00:37:15,538
extension.                      

870
00:37:15,540 --> 00:37:19,041
Objective-C has something like  
extensions called categories.   

871
00:37:19,043 --> 00:37:20,542
So that's why it says           
Category/Extension.             

872
00:37:20,544 --> 00:37:23,678
But you can think in your mind  
that this just says extension.  

873
00:37:23,680 --> 00:37:27,682
And what this is gonna do is    
only generate an extension      

874
00:37:27,684 --> 00:37:28,916
of your Tweet class.            

875
00:37:28,918 --> 00:37:31,785
You have to actually write      
the Tweet class itself.         

876
00:37:31,787 --> 00:37:34,421
But it's all gonna have         
only your code in it, or        

877
00:37:34,423 --> 00:37:35,822
it could be empty if you want.  

878
00:37:35,824 --> 00:37:39,525
The extension's gonna take      
care of all making the vars.    

879
00:37:39,527 --> 00:37:42,061
Okay, the var                   
magic right there.              

880
00:37:42,762 --> 00:37:46,198
So let's see how this works.    

881
00:37:46,200 --> 00:37:47,866
Even when I switch to           
Category/Extension.             

882
00:37:47,868 --> 00:37:50,835
Again, I don't get that         
extension showing up in         

883
00:37:50,837 --> 00:37:51,335
my navigator.                   

884
00:37:51,337 --> 00:37:53,704
It's kind of hidden from you.   

885
00:37:53,706 --> 00:37:57,207
Here I'm gonna add the          
extension way of doing it for   

886
00:37:57,209 --> 00:37:57,340
TwitterUser too.                

887
00:37:57,342 --> 00:37:59,942
So both of them, both Tweet     
and TwitterUser, I'm gonna      

888
00:37:59,944 --> 00:38:06,515
have an extension generated     
and, why do we like this one?   

889
00:38:06,517 --> 00:38:07,750
Because, a lot of times for     

890
00:38:07,752 --> 00:38:11,520
our Tweet or TwitterUser we     
want to add our own code.       

891
00:38:12,688 --> 00:38:12,820
Like in a tweet.                

892
00:38:12,822 --> 00:38:17,658
Imagine you wanted to add       
a static method that took data  

893
00:38:17,660 --> 00:38:21,895
from Twitter and turned it      
into a tweet in the database.   

894
00:38:21,897 --> 00:38:22,729
Where would you put that code?  

895
00:38:22,731 --> 00:38:25,865
Well, a great place to put it   
would be in a tweet class,      

896
00:38:25,867 --> 00:38:26,532
if there was such a thing.      

897
00:38:26,534 --> 00:38:29,235
And so, you're in fact,         
going to create such a thing.   

898
00:38:29,237 --> 00:38:33,439
And the extension is going to   
handle all of the var business  

899
00:38:33,441 --> 00:38:33,538
for you.                        

900
00:38:33,540 --> 00:38:36,474
If you did choose Manual/None,  
right here for Codegen,         

901
00:38:36,476 --> 00:38:40,044
meaning don't do any Codegen,   
then you're doing value for     

902
00:38:40,046 --> 00:38:41,445
set value for key.              

903
00:38:41,846 --> 00:38:44,481
Good luck with that, the        
code's gonna be a mess, okay?   

904
00:38:44,483 --> 00:38:48,284
So, we almost always do it      
this way with this extension.   

905
00:38:48,519 --> 00:38:51,520
Also, if we build our app       
using multiple modules          

906
00:38:51,522 --> 00:38:54,823
like we have in Smash Tag,      
we have a framework module and  

907
00:38:54,825 --> 00:38:56,258
then we have the main module.   

908
00:38:56,260 --> 00:38:57,892
Then you're probably            
gonna wanna choose              

909
00:38:57,894 --> 00:39:00,628
from this pull-down here        
where it says module,           

910
00:39:00,630 --> 00:39:02,063
current product module.         

911
00:39:02,065 --> 00:39:05,366
I think if you have a single    
app that's not modularized      

912
00:39:05,368 --> 00:39:09,436
like that you probably          
don't need to set that, but     

913
00:39:09,438 --> 00:39:13,473
in a multi-modual app           
you probably do want to.        

914
00:39:13,475 --> 00:39:17,310
So, since we've chosen here     
to create only the extension,   

915
00:39:17,312 --> 00:39:20,913
we obviously need to write the  
code for the classes Tweet And  

916
00:39:20,915 --> 00:39:24,450
TwitterUser, we have to create  
those classes ourselves.        

917
00:39:24,452 --> 00:39:25,717
So how do we do that?           

918
00:39:25,719 --> 00:39:27,852
Well, just like we              
create anything,                

919
00:39:27,854 --> 00:39:29,153
we use file, new file.          

920
00:39:29,155 --> 00:39:31,022
Then we do file, new file,      
this time we are back           

921
00:39:31,024 --> 00:39:34,625
to saying it's a cocoa touch    
class because NSManageObject.   

922
00:39:34,627 --> 00:39:36,493
Why is it code called           
cocoa touch class,              

923
00:39:36,495 --> 00:39:39,662
we wanna make sure we set       
our super class to be in its    

924
00:39:39,664 --> 00:39:41,130
managed object, right?          

925
00:39:41,132 --> 00:39:42,598
So, I'm creating                
a class called Tweet,           

926
00:39:42,600 --> 00:39:45,901
you see, which is a subclass    
of NSManagedObject.             

927
00:39:45,903 --> 00:39:47,602
And is gonna create this for    
us.                             

928
00:39:47,604 --> 00:39:51,039
See?                            
Class Tweet: NSManagedObject.   

929
00:39:51,041 --> 00:39:51,572
No code in there.               

930
00:39:51,574 --> 00:39:54,809
That space is for us,           
we get write anything we want.  

931
00:39:54,811 --> 00:39:58,178
The code that does the vars     
is in that extension which we   

932
00:39:58,180 --> 00:39:58,812
don't even see, but but         

933
00:39:58,814 --> 00:40:02,082
I'm gonna show it to            
yo in a second here.            

934
00:40:03,650 --> 00:40:06,218
Notice that I picked            
the name of this class Tweet    

935
00:40:06,220 --> 00:40:09,321
to be the same as the name of   
the entity in the database,     

936
00:40:09,323 --> 00:40:11,123
which, you want to do.          

937
00:40:11,125 --> 00:40:15,160
It is possible to not do that   
by inspecting the entity        

938
00:40:15,162 --> 00:40:17,295
in the data model,              
but, don't do it.               

939
00:40:17,297 --> 00:40:19,030
Just have the entity            
with the same name.             

940
00:40:19,032 --> 00:40:21,832
People reading your code are    
going to expect this class,     

941
00:40:21,834 --> 00:40:23,867
this subclass of                
NSManageObject that             

942
00:40:23,869 --> 00:40:24,601
represents a tweet.             

943
00:40:24,603 --> 00:40:28,371
Entity to be called tweet,      
so called it that.              

944
00:40:29,106 --> 00:40:32,841
Now, we've got an error here,   
I'll just created this class,   

945
00:40:32,843 --> 00:40:33,809
how I'm gonna possibly          
have an error,                  

946
00:40:33,811 --> 00:40:36,044
I'm done anything how could     
I've done anything wrong?       

947
00:40:36,046 --> 00:40:37,445
Well, the problem               
the problem here is,            

948
00:40:37,447 --> 00:40:39,914
really, Xcode has               
done something wrong.           

949
00:40:39,916 --> 00:40:44,885
When Xcode created this,        
it didn't seem to realize that  

950
00:40:44,887 --> 00:40:46,720
NSManageObject is               
not in UIKit.                   

951
00:40:46,722 --> 00:40:49,656
You see how it put              
import UIKit at the top?        

952
00:40:49,658 --> 00:40:53,926
Really, what we need there      
is import CoreData, okay.       

953
00:40:53,928 --> 00:40:54,760
All the code that you write,    

954
00:40:54,762 --> 00:40:56,462
any time you're doing           
something in CoreData,          

955
00:40:56,464 --> 00:40:57,996
you have to import CoreData.    

956
00:40:57,998 --> 00:40:59,798
It's a different framework      
that the UIKit so               

957
00:40:59,800 --> 00:41:01,733
you must import it everywhere   
that you're going to use it.    

958
00:41:01,735 --> 00:41:04,268
Just like we had to import      
Twitter everywhere we want to   

959
00:41:04,270 --> 00:41:06,937
use that Twitter framework      
that I gave you.                

960
00:41:07,205 --> 00:41:07,570
So, I don't know why Xcode,     
I think it's just an oversight  

961
00:41:07,572 --> 00:41:10,340
Okay?                           

962
00:41:10,342 --> 00:41:12,608
that Xcode when you             
choose NSManagedObject          

963
00:41:12,610 --> 00:41:15,077
as your super class you should  
know, that's in Core Data so    

964
00:41:15,079 --> 00:41:16,712
it should be import             
Core Data there.                

965
00:41:16,714 --> 00:41:18,613
Don't know why it               
doesn't do that.                

966
00:41:18,615 --> 00:41:21,783
So here I've created one for    
the TwitterUser class.          

967
00:41:21,785 --> 00:41:24,819
Again you can put anything      
you want in there.              

968
00:41:24,821 --> 00:41:25,519
This is your class.             

969
00:41:25,521 --> 00:41:26,186
You can do anything you want.   

970
00:41:26,188 --> 00:41:28,988
All the stuff about             
the vars is off in              

971
00:41:28,990 --> 00:41:30,323
an extension somewhere.         

972
00:41:30,325 --> 00:41:32,825
In fact, let's go take          
a look at that extension,       

973
00:41:32,827 --> 00:41:32,858
Even though it's not going to   
show up in your next navigator  

974
00:41:32,860 --> 00:41:34,693
what it looks like.             

975
00:41:34,695 --> 00:41:36,327
you're probably never           
going to look at it.            

976
00:41:36,329 --> 00:41:37,362
I thought I'd                   
show it to you so               

977
00:41:37,364 --> 00:41:39,163
you understand a little         
bit what's going on.            

978
00:41:39,165 --> 00:41:42,900
So, this is the extension,      
this generated for              

979
00:41:42,902 --> 00:41:43,266
TwitterUser.                    

980
00:41:43,268 --> 00:41:44,768
You see that is an extension    

981
00:41:44,770 --> 00:41:46,269
of the TwitterUser class,       
right?                          

982
00:41:46,271 --> 00:41:51,007
Remember extensions and         
it's got the vars.              

983
00:41:51,009 --> 00:41:53,609
They're defined not just        
name and screenName but         

984
00:41:53,611 --> 00:41:57,279
it's got that relationship      
var tweets as well.             

985
00:41:57,847 --> 00:41:58,212
All right?                      

986
00:41:58,214 --> 00:41:59,847
And look at                     
the type of tweets.             

987
00:41:59,849 --> 00:42:03,050
As promised, it's an NSSet,     
it's an optional because it     

988
00:42:03,052 --> 00:42:06,620
comes out of                    
the database as not set.        

989
00:42:06,622 --> 00:42:08,221
It's gonna get set.             

990
00:42:09,189 --> 00:42:10,222
So these are the vars.          

991
00:42:10,224 --> 00:42:11,023
And I'll talk                   
a little bit about              

992
00:42:11,025 --> 00:42:16,495
how these vars are actually     
implemented in a minute but     

993
00:42:16,497 --> 00:42:17,796
all the vars are there.         

994
00:42:17,798 --> 00:42:18,696
There's also some functions,    

995
00:42:18,698 --> 00:42:19,730
now at the bottom you           
see those functions,            

996
00:42:19,732 --> 00:42:22,933
those are kind of fun, those    
are convenience functions for   

997
00:42:22,935 --> 00:42:27,604
adding and removing tweets      
from the tweets set             

998
00:42:27,606 --> 00:42:32,909
because NSSet is immutable,     
okay?                           

999
00:42:32,911 --> 00:42:35,812
It's not var verses             
let like swift things,          

1000
00:42:35,814 --> 00:42:39,115
NS set is kind of old           
Objective-C way, and NSSet,     

1001
00:42:39,117 --> 00:42:43,485
like NSAttributedString, is     
immutable, cannot be changed,   

1002
00:42:43,487 --> 00:42:46,421
so how can I add any tweets     
to my database here?            

1003
00:42:46,423 --> 00:42:49,324
Well you used these functions   
instead, add to tweets,         

1004
00:42:49,326 --> 00:42:50,558
remove from tweets,             
add to tweets,                  

1005
00:42:50,560 --> 00:42:54,762
remove from tweets, there's a   
pair for doing a single tweet,  

1006
00:42:54,764 --> 00:42:57,631
and there having adding         
a whole bunch of tweets, or     

1007
00:42:57,633 --> 00:42:59,666
removing a whole bunch          
of tweets, okay?                

1008
00:42:59,668 --> 00:43:03,036
So you're definitely going      
to want those functions for     

1009
00:43:03,038 --> 00:43:04,337
your assignment five.           

1010
00:43:04,638 --> 00:43:07,539
Cuz you're gonna have some      
relationships where you're      

1011
00:43:07,541 --> 00:43:10,809
gonna want to add them          
using these functions.          

1012
00:43:10,811 --> 00:43:11,409
Now it adds those               
functions for                   

1013
00:43:11,411 --> 00:43:15,079
any too many relationship, any  
time you have a too many var    

1014
00:43:15,081 --> 00:43:18,315
like tweets, it's going to add  
these functions automatically   

1015
00:43:18,317 --> 00:43:18,382
It actually put it in its own   
little extension, this file     

1016
00:43:18,384 --> 00:43:21,551
in the extensions.              

1017
00:43:21,553 --> 00:43:25,488
has two extensions in it,       
both through TwitterUser.       

1018
00:43:25,490 --> 00:43:28,758
Any questions about extensions  
there or any of that?           

1019
00:43:28,760 --> 00:43:33,262
Okay, let's look at tweets      
extension real quick.           

1020
00:43:33,264 --> 00:43:36,065
Couple other things to look     
at here that I didn't look      

1021
00:43:36,067 --> 00:43:36,598
in the other one.               

1022
00:43:36,600 --> 00:43:40,468
Notice this static func         
called fetchRequest?            

1023
00:43:40,470 --> 00:43:40,768
Put that in your mind.          

1024
00:43:40,770 --> 00:43:42,670
I'm gonna talk about            
that in a few slides.           

1025
00:43:42,672 --> 00:43:45,606
fetchRequest is a really cool   
little static func that will    

1026
00:43:45,608 --> 00:43:49,543
give you something you          
can use to fetch tweets.        

1027
00:43:49,545 --> 00:43:51,244
And if you call fetchrRquest    
on twitter users,               

1028
00:43:51,246 --> 00:43:53,046
you'll get something to         
fetch twitter users.            

1029
00:43:53,048 --> 00:43:56,215
And we'll talk about all        
about fetch in a moment here.   

1030
00:43:56,217 --> 00:44:01,286
Notice the type of tweeter,     
see the tweeter var.            

1031
00:44:01,288 --> 00:44:03,588
Its type is TwitterUser.        

1032
00:44:03,590 --> 00:44:05,090
Because of course that's        
what the tweeter is,            

1033
00:44:05,092 --> 00:44:08,493
we control drag between the     
tweet and the tweeter user so   

1034
00:44:08,495 --> 00:44:10,728
that tweeter var is of          
course a tweeter user,          

1035
00:44:10,730 --> 00:44:14,365
not an NSSet, because it's      
a two one relationship, okay,   

1036
00:44:14,367 --> 00:44:18,301
there's only one TwitterUser,   
who is my tweeter.              

1037
00:44:19,270 --> 00:44:22,071
And what about                  
this @NSManaged?                

1038
00:44:22,073 --> 00:44:26,442
Okay, @NSManaged I'm just       
gonna say it's magic.           

1039
00:44:26,444 --> 00:44:27,009
It's not really magic.          

1040
00:44:27,011 --> 00:44:32,414
It's essentially something      
that says to the runtime, hey.  

1041
00:44:32,416 --> 00:44:34,149
When someone                    
accesses this var,              

1042
00:44:34,151 --> 00:44:36,451
Core Data's gonna               
figure it out for you.          

1043
00:44:36,453 --> 00:44:38,986
And what Core Data does,        
is when you try to say          

1044
00:44:38,988 --> 00:44:43,824
Tweet.created equals some       
date, it gets trapped           

1045
00:44:43,826 --> 00:44:47,361
at a low level in the runtime   
and Core Data swoops in and     

1046
00:44:47,363 --> 00:44:50,530
does set value for              
key for you, okay.              

1047
00:44:50,532 --> 00:44:54,334
Same thing if you get the       
created var, it swoops in and   

1048
00:44:54,336 --> 00:44:56,402
does value for key and          
gets it that way.               

1049
00:44:56,404 --> 00:45:00,072
But it's all happening at       
a low level behind the scenes.  

1050
00:45:00,074 --> 00:45:04,676
So this extension does satisfy  
the extension limitation where  

1051
00:45:04,678 --> 00:45:05,343
it can't have any storage.      

1052
00:45:05,345 --> 00:45:09,580
All of the storage for these    
vars isn't in the database.     

1053
00:45:09,948 --> 00:45:11,415
And when you ask for it.        

1054
00:45:11,417 --> 00:45:13,784
Or when you set it,             
it's using its value for        

1055
00:45:13,786 --> 00:45:16,319
key instead of value for key,   
to set it in the database.      

1056
00:45:16,321 --> 00:45:17,487
Now again, it sets in memory.   

1057
00:45:17,489 --> 00:45:18,087
You have to save it for         

1058
00:45:18,089 --> 00:45:20,322
it to actually go out           
into the database.              

1059
00:45:20,324 --> 00:45:24,726
But that what's happening.      

1060
00:45:24,728 --> 00:45:28,163
All right, so                   

1061
00:45:28,165 --> 00:45:33,067
now that we have these          
class so here's some            

1062
00:45:33,069 --> 00:45:38,005
code that creates a tweets and  
sets it's attributes, okay so   

1063
00:45:38,007 --> 00:45:40,674
let's look at this piece by     
piece and see what it does.     

1064
00:45:40,676 --> 00:45:43,877
The first thing is to create    
a tweet, we don't have to do    

1065
00:45:43,879 --> 00:45:48,248
NSEntityDescription, Entity,    
insert Entity for name into     

1066
00:45:48,250 --> 00:45:51,317
contacts, or whatever that      
huge, long terrible thing was-  

1067
00:45:51,319 --> 00:45:54,220
we can just say, tweet,         
parenthesis context.            

1068
00:45:54,222 --> 00:45:57,089
You just say what context,      
which means what database you   

1069
00:45:57,091 --> 00:45:59,925
want the tweet to put in and    
it creates a new tweet.         

1070
00:45:59,927 --> 00:46:03,194
Okay, just use a normal         
initializer for                 

1071
00:46:03,196 --> 00:46:04,429
new things so                   
that's super cool.              

1072
00:46:04,431 --> 00:46:06,263
That's one of the coolest       
features right there.           

1073
00:46:06,265 --> 00:46:08,499
Not having to use an            
NSEntityDescription thing, so   

1074
00:46:08,501 --> 00:46:12,569
no more NSEntityDescription,    
we'll not have to do that.      

1075
00:46:12,571 --> 00:46:12,602
And then here,                  

1076
00:46:12,604 --> 00:46:16,906
I'm setting the text to be      
140 characters of pure joy.     

1077
00:46:16,908 --> 00:46:19,975
And I don't have to say set     
value 140 characters of pure    

1078
00:46:19,977 --> 00:46:23,779
joy for key text and have all   
these literal strings like      

1079
00:46:23,781 --> 00:46:27,182
text in there in                
this untyped thing.             

1080
00:46:27,184 --> 00:46:28,717
I just say tweet.text           
equals that.                    

1081
00:46:28,719 --> 00:46:32,453
And the same thing here with    
created, again, so we don't     

1082
00:46:32,455 --> 00:46:35,690
even have to worry about        
the thing, if we tried to say   

1083
00:46:35,692 --> 00:46:40,094
tweet.created equals quote      
hello, this Swift would say,    

1084
00:46:40,096 --> 00:46:43,296
no, created is of type Date,    
so you can't do that, so        

1085
00:46:43,298 --> 00:46:46,099
it finds all of our,            
it type checks everything,      

1086
00:46:46,101 --> 00:46:48,634
finds all of our                
possible errors.                

1087
00:46:48,636 --> 00:46:51,003
What about relationships,       
okay, setting relationships?    

1088
00:46:51,005 --> 00:46:55,674
So here I've created another    
object, a TwitterUser and       

1089
00:46:55,676 --> 00:46:58,043
again I just set                
TwitterUser with a context,     

1090
00:46:58,045 --> 00:46:59,944
I'll talk about that argument   
in just a second but            

1091
00:46:59,946 --> 00:47:04,949
I told what database I wanna    
create in TwitterUser and       

1092
00:47:04,951 --> 00:47:09,487
I set my tweet's tweeter        
equal to that TwitterUser.      

1093
00:47:09,489 --> 00:47:11,889
So, it's exactly what you're,   
would imagine right?            

1094
00:47:11,891 --> 00:47:13,056
Just set it equal to Joe.       

1095
00:47:13,058 --> 00:47:17,660
And what's interesting about    
this is that when you set one   

1096
00:47:17,662 --> 00:47:22,065
side of a relationship,         
the other side gets updated     

1097
00:47:22,067 --> 00:47:25,401
automatically, 100%             
of the time.                    

1098
00:47:25,403 --> 00:47:26,502
This is call maintaining        

1099
00:47:26,504 --> 00:47:28,937
the integrity of the database,  
okay?                           

1100
00:47:28,939 --> 00:47:32,374
And Core Data always            
maintains database integrity.   

1101
00:47:32,376 --> 00:47:34,976
So, when you change             
one side relationship.          

1102
00:47:34,978 --> 00:47:35,643
It changes the other.           

1103
00:47:35,645 --> 00:47:38,445
So, that means for              
example if I say tweet.tweeter  

1104
00:47:38,447 --> 00:47:41,081
equals Joe, then if I went      
over to the Joe side and        

1105
00:47:41,083 --> 00:47:45,051
said hey give me Joe's tweets   
and I'm even gonna turn it      

1106
00:47:45,053 --> 00:47:48,721
into a Swift kind of set        
from an NSSet to a set of       

1107
00:47:48,723 --> 00:47:51,057
tweet because we know that's    
what tweets are, right?         

1108
00:47:51,059 --> 00:47:55,194
Tweets are a set of Tweets, so  
I'm gonna as it to do that.     

1109
00:47:55,196 --> 00:47:59,431
Then I can say, if Joe's tweet  
contains that tweet print yes   

1110
00:47:59,433 --> 00:48:01,599
and of course it is             
going to print yes.             

1111
00:48:01,601 --> 00:48:04,035
Because when I said             
tweet.tweeter = joe,            

1112
00:48:04,037 --> 00:48:07,538
it automatically got            
added to joe's tweets.          

1113
00:48:08,039 --> 00:48:08,538
That make sense?                

1114
00:48:08,540 --> 00:48:09,773
And same thing the other way.   

1115
00:48:09,775 --> 00:48:12,241
If I added a tweet              
into joe's tweets,              

1116
00:48:12,243 --> 00:48:16,112
that tweet tweeter would        
automatically set to be joe.    

1117
00:48:16,813 --> 00:48:18,013
Okay?                           
Both sides will always          

1118
00:48:18,015 --> 00:48:18,513
point to each other.            

1119
00:48:18,515 --> 00:48:21,482
You never have to do anything   
to make that happen.            

1120
00:48:22,351 --> 00:48:26,687
tweet.tweeter=joe is exactly    

1121
00:48:26,689 --> 00:48:29,389
the same as saying joe          
dot addToTweets tweet.          

1122
00:48:29,391 --> 00:48:32,125
Remember addToTweets is one of  
those convenience functions     

1123
00:48:32,127 --> 00:48:34,427
that it created for             
us over there.                  

1124
00:48:34,828 --> 00:48:36,495
Now, notice                     
the argument I used for         

1125
00:48:36,497 --> 00:48:39,531
the context to create           
the Twitter user there.         

1126
00:48:39,533 --> 00:48:42,400
I didn't say                    
AppDelegate.viewContext.        

1127
00:48:42,402 --> 00:48:44,702
I didn't use that same          
context bar that I had.         

1128
00:48:44,704 --> 00:48:46,270
I said                          
tweet.manageObjectContext.      

1129
00:48:46,272 --> 00:48:49,973
In other words, I got, I found  
out what database the tweet is  

1130
00:48:49,975 --> 00:48:52,843
in, and I put the Twitter       
user in the same database.      

1131
00:48:52,845 --> 00:48:56,312
And this is a common way        
of programming in Core Data     

1132
00:48:56,314 --> 00:48:58,114
where when you wanna            
get a context and               

1133
00:48:58,116 --> 00:49:00,583
you already have a object       
in the database you             

1134
00:49:00,585 --> 00:49:03,519
ask the object you already      
have what context to use.       

1135
00:49:03,521 --> 00:49:07,022
And you can see that if I ever  
change my code to not put this  

1136
00:49:07,024 --> 00:49:10,892
into this context, to put it    
into another context, at least  

1137
00:49:10,894 --> 00:49:14,028
the Twitter user and the tweet  
would always be together        

1138
00:49:14,030 --> 00:49:15,363
in whatever that context is.    

1139
00:49:15,365 --> 00:49:17,631
So you can see why I            
used the tweets can't           

1140
00:49:17,633 --> 00:49:22,202
manage object context here to   
create that instead of using    

1141
00:49:22,204 --> 00:49:23,103
the context again.              

1142
00:49:23,105 --> 00:49:25,638
So, it, it would work to        
say context, of course,         

1143
00:49:25,640 --> 00:49:29,408
but I'm just saying there's a   
paradigm of development where   

1144
00:49:29,410 --> 00:49:32,611
we're gonna try and use         
the context of related object.  

1145
00:49:32,613 --> 00:49:35,480
So they end up in the same      
database for sure.              

1146
00:49:36,782 --> 00:49:37,715
Okay?                           

1147
00:49:38,884 --> 00:49:40,117
All right, so                   

1148
00:49:40,119 --> 00:49:43,620
we can also use dot notation,   
because these are just vars.    

1149
00:49:43,622 --> 00:49:46,756
So when I say tweet.tweeter,    
I get a TwitterUser object.     

1150
00:49:46,758 --> 00:49:49,092
So, of course,                  
I can say dot name on it and    

1151
00:49:49,094 --> 00:49:51,227
set it equal to Joe Schmo,      
whatever, right?                

1152
00:49:51,229 --> 00:49:56,432
tweet.tweeter.name =            
"Joe Schmo", all right?         

1153
00:49:56,434 --> 00:49:59,134
No restriction there            
on those vars.                  

1154
00:49:59,568 --> 00:50:02,203
All right, remember I told      
you about the scalars?          

1155
00:50:02,205 --> 00:50:05,306
This is that switch I was       
telling you about before.       

1156
00:50:05,308 --> 00:50:08,776
If you don't do this,           
then when you say,              

1157
00:50:08,778 --> 00:50:12,279
if you had an int,              
let's say you had retweet       

1158
00:50:12,281 --> 00:50:17,150
count which was an int          
here let's say on Int32.        

1159
00:50:17,152 --> 00:50:18,084
If you don't switch             
this button,                    

1160
00:50:18,086 --> 00:50:21,354
then that's going to be         
an NSNumber not an Int32.       

1161
00:50:21,356 --> 00:50:23,622
But when you click              
this switch on,                 

1162
00:50:23,624 --> 00:50:25,991
now that var will               
be of type Int32.               

1163
00:50:25,993 --> 00:50:27,759
So you almost always            
want this for numbers.          

1164
00:50:27,761 --> 00:50:31,596
99.9% of the time, you want     
to have this switch on.         

1165
00:50:31,598 --> 00:50:32,930
Luckily, it's on by default so  

1166
00:50:32,932 --> 00:50:35,165
you don't even have to          
think about it much, but        

1167
00:50:35,167 --> 00:50:37,300
I just wanted to let            
you know about it.              

1168
00:50:37,668 --> 00:50:39,769
All right, so                   
now lets talk about deletion.   

1169
00:50:39,771 --> 00:50:44,106
Okay, now, I want to delete     
something from the database.    

1170
00:50:44,108 --> 00:50:45,407
And that's incredibly easy,     

1171
00:50:45,409 --> 00:50:49,211
almost too easy because your    
data's precious you don't want  

1172
00:50:49,213 --> 00:50:52,380
to be deleting it to easily,    
but you do that by asking       

1173
00:50:52,382 --> 00:50:55,750
the context to delete the       
NSManagedObject, so you can     

1174
00:50:55,752 --> 00:50:59,053
pass any NSManagedObject        
to this method delete and       

1175
00:50:59,055 --> 00:51:01,055
it will delete it               
from the database.              

1176
00:51:01,057 --> 00:51:04,324
And it could cascade and        
delete other things as well     

1177
00:51:04,326 --> 00:51:07,027
depending on what delete        
rule is, all right?             

1178
00:51:07,029 --> 00:51:10,296
Most of the time by default,    
when I delete something,        

1179
00:51:10,298 --> 00:51:14,300
other things that point to it   
get that pointer set to nil.    

1180
00:51:14,302 --> 00:51:16,869
That's the nullify              
delete rule.                    

1181
00:51:16,871 --> 00:51:19,004
Now, when things get deleted    
from the database they got      

1182
00:51:19,006 --> 00:51:22,607
sent this message first,        
prepare for deletion.           

1183
00:51:22,609 --> 00:51:25,176
Okay, and                       
this is a really good method.   

1184
00:51:25,178 --> 00:51:27,778
Again, in here you don't        
have to do anything             

1185
00:51:27,780 --> 00:51:30,881
to worry about the other        
pointers point to you           

1186
00:51:30,883 --> 00:51:32,449
that's all fixed by             
the delete rule.                

1187
00:51:32,451 --> 00:51:35,985
But what if you had another     
field in your database?         

1188
00:51:35,987 --> 00:51:38,354
Back to the retweet             
count example again.            

1189
00:51:38,356 --> 00:51:42,725
Let's say I had an int          
somewhere in TwitterUser,       

1190
00:51:42,727 --> 00:51:45,427
which counted                   
the number of retweets          

1191
00:51:45,429 --> 00:51:47,129
that this twitter               
user had done.                  

1192
00:51:47,131 --> 00:51:49,864
And so if I was deleting        
a tweet and it happened to be   

1193
00:51:49,866 --> 00:51:54,002
a retweet then I need to set    
that to be minus equal one.     

1194
00:51:54,004 --> 00:51:55,836
And here's the perfect          
place to do it.                 

1195
00:51:55,838 --> 00:51:57,338
So tweet, and                   
it's prepared for               

1196
00:51:57,340 --> 00:51:59,406
deletion saying whoop,          
I'm about to be deleted.        

1197
00:51:59,408 --> 00:52:02,375
I'd better tell my Twitter      
user, cuz I'm a retweet,        

1198
00:52:02,377 --> 00:52:05,912
that he needs to decrement      
his retweet count.              

1199
00:52:05,914 --> 00:52:08,180
So you see why you would        
use prepare for deletion?       

1200
00:52:08,182 --> 00:52:10,549
It's a way to kind of update    
other things in the database    

1201
00:52:10,551 --> 00:52:14,252
when as you're                  
leaving the database.           

1202
00:52:14,887 --> 00:52:17,388
All right, so                   
that's it for deletion.         

1203
00:52:17,390 --> 00:52:18,622
Next topic, querying,           

1204
00:52:18,624 --> 00:52:20,924
the most important piece of     
this whole database thing.      

1205
00:52:20,926 --> 00:52:23,727
It's really a waste of time     
doing all this stuff if you're  

1206
00:52:23,729 --> 00:52:23,860
not gonna query, okay?          

1207
00:52:23,862 --> 00:52:27,764
If you're not gonna make        
sophisticated requests for      

1208
00:52:27,766 --> 00:52:31,600
the information based on        
the relationships, etc.         

1209
00:52:31,602 --> 00:52:35,137
So, to do a query the most      
important thing you need to     

1210
00:52:35,139 --> 00:52:39,708
know is NSFetchRequest,         
this class NSFetchRequest.      

1211
00:52:39,710 --> 00:52:42,277
And NSFetchRequest              
encapsulates                    

1212
00:52:42,279 --> 00:52:44,979
what you want from              
the database.                   

1213
00:52:44,981 --> 00:52:47,415
So let's talk about             
an NSFetchRequest and           

1214
00:52:47,417 --> 00:52:50,684
how we build one.               

1215
00:52:50,686 --> 00:52:51,485
So when we're building one,     

1216
00:52:51,487 --> 00:52:53,687
there's three important         
things we need to know.         

1217
00:52:53,689 --> 00:52:56,122
One, what entity                
are we fetching?                

1218
00:52:56,124 --> 00:53:00,359
Because a FetchRequest can      
only Fetch one kind of entity.  

1219
00:53:00,361 --> 00:53:03,095
You can, there's no such thing  
a FetchRequest that will give   

1220
00:53:03,097 --> 00:53:06,198
you some tweet and              
some Twitter user.              

1221
00:53:06,200 --> 00:53:06,564
No, okay?                       

1222
00:53:06,566 --> 00:53:09,000
A fetch always gives            
you all tweets or               

1223
00:53:09,002 --> 00:53:11,369
all Twitter users, make sense?  

1224
00:53:11,371 --> 00:53:12,136
So that's the number            
one thing,                      

1225
00:53:12,138 --> 00:53:13,704
is we're gonna create           
the fetch request.              

1226
00:53:13,706 --> 00:53:16,539
And it will be a fetch request  
or a very specific entity.      

1227
00:53:16,541 --> 00:53:19,442
And it will only be able        
to fetch those entities.        

1228
00:53:19,444 --> 00:53:23,846
The second thing is is          
an array of sort descriptors.   

1229
00:53:23,848 --> 00:53:24,480
And why do we want this?        

1230
00:53:24,482 --> 00:53:28,517
Because when we execute this    
fetch it's gonna come back      

1231
00:53:28,519 --> 00:53:30,518
as an array, okay?              

1232
00:53:30,520 --> 00:53:31,819
All the matching tweets or      

1233
00:53:31,821 --> 00:53:34,288
Twitter user will come          
back in an array.               

1234
00:53:34,290 --> 00:53:34,888
And since it's an array,        

1235
00:53:34,890 --> 00:53:38,492
arrays are not sets,            
arrays are ordered and so       

1236
00:53:38,494 --> 00:53:41,394
we have specify what order      
the things are in the arrays.   

1237
00:53:41,396 --> 00:53:43,629
So we do that with              
these sort descriptors.         

1238
00:53:43,631 --> 00:53:46,599
And finally, we just specify    
or what is it that we want,     

1239
00:53:46,601 --> 00:53:50,202
which tweets do we want, which  
Twitter users do we want and    

1240
00:53:50,204 --> 00:53:53,338
we do that with something       
called a predicate.             

1241
00:53:53,340 --> 00:53:54,205
Okay, so let's dive in and      

1242
00:53:54,207 --> 00:53:56,507
look at all three               
of these things.                

1243
00:53:56,509 --> 00:53:57,608
This is what it looks like,     

1244
00:53:57,610 --> 00:54:00,077
kinda top level to              
create a fetch request.         

1245
00:54:00,079 --> 00:54:01,278
Okay, you get a fetch request.  

1246
00:54:01,280 --> 00:54:03,580
You set the source descriptor   
and you set its predicate.      

1247
00:54:03,582 --> 00:54:06,149
So you get each of              
these three parts.              

1248
00:54:06,151 --> 00:54:07,683
So getting the fetch            
request is easy.                

1249
00:54:07,685 --> 00:54:09,785
We're gonna use that            
little static function          

1250
00:54:09,787 --> 00:54:13,855
that the extension that         
I talked about, made for        

1251
00:54:13,857 --> 00:54:15,156
us called fetchRequest.         

1252
00:54:15,158 --> 00:54:18,126
Now, this is one of the very    
few times when Swift            

1253
00:54:18,128 --> 00:54:22,830
cannot infer the type           
of this return value.           

1254
00:54:23,264 --> 00:54:26,033
Should've put this in red,      
okay?                           

1255
00:54:26,035 --> 00:54:26,166
Because it's so                 

1256
00:54:26,168 --> 00:54:28,768
rare, Swift can almost          
always infer things.            

1257
00:54:28,770 --> 00:54:29,935
But in turns out                
NSManagedObject                 

1258
00:54:29,937 --> 00:54:33,405
has a fetchRequest method and   
it returns the more generic     

1259
00:54:33,407 --> 00:54:36,141
kind of fetchRequest and        
so when you're getting it,      

1260
00:54:36,143 --> 00:54:38,943
it doesn't quite know           
which one you want.             

1261
00:54:38,945 --> 00:54:40,345
So when you ask a Tweet for     

1262
00:54:40,347 --> 00:54:43,381
its fetch request right here,   
you have to tell it did you     

1263
00:54:43,383 --> 00:54:47,785
want the one in Tweet not       
the one from its super class?   

1264
00:54:47,787 --> 00:54:47,984
All right?                      
And so                          

1265
00:54:47,986 --> 00:54:49,919
say let request equal           
NSFetchRequest.                 

1266
00:54:49,921 --> 00:54:52,822
It's a generic type like array  
or something like that, right?  

1267
00:54:52,824 --> 00:54:55,124
This is a fetch request         
only for Tweets.                

1268
00:54:55,126 --> 00:54:58,027
So you say                      
NSFetchRequest<tweet> =         

1269
00:54:58,029 --> 00:54:59,995
Tweet.fetchRequest().           

1270
00:54:59,997 --> 00:55:01,262
And it knows, of course,        

1271
00:55:01,264 --> 00:55:04,699
that the only one that          
returns an NSFetchRequest for   

1272
00:55:04,701 --> 00:55:09,003
tweets is the fetchRequest,     
and that's Tweet extension.     

1273
00:55:10,238 --> 00:55:11,238
So now,                         
you have a fetchRequest,        

1274
00:55:11,240 --> 00:55:13,740
this is how you get a fetch     
request- couldn't be easier.    

1275
00:55:13,742 --> 00:55:16,909
You just have to remember       
to do that static               

1276
00:55:16,911 --> 00:55:18,377
typing right there.             

1277
00:55:18,379 --> 00:55:20,646
Okay, now we need               
the sortDescriptor, right?      

1278
00:55:20,648 --> 00:55:22,147
It's got this                   
array coming back.              

1279
00:55:22,149 --> 00:55:24,749
What order are they             
going to be?                    

1280
00:55:24,751 --> 00:55:27,218
SortDescriptor looks            
like this.                      

1281
00:55:27,220 --> 00:55:28,552
You create it with a key.       

1282
00:55:28,554 --> 00:55:30,921
That is the key,                
the attribute in                

1283
00:55:30,923 --> 00:55:34,191
the database that you want to   
sort on, so the screen name or  

1284
00:55:34,193 --> 00:55:37,961
even the text in the tweet or   
the actual name of              

1285
00:55:37,963 --> 00:55:40,096
the tweeter,                    
whatever it's gonna be.         

1286
00:55:40,098 --> 00:55:40,963
This right here,                
sortDescriptor,                 

1287
00:55:40,965 --> 00:55:44,733
will be a sort descriptor only  
suitable for fetching Twitter   

1288
00:55:44,735 --> 00:55:48,337
users, because screenName       
is a key in Twitter user,       

1289
00:55:48,339 --> 00:55:51,373
not in tweet, so we're gonna    
use this SortDescriptor         

1290
00:55:51,375 --> 00:55:52,640
in a tweet request.             

1291
00:55:52,642 --> 00:55:53,941
And I say that because          
on the previous slide,          

1292
00:55:53,943 --> 00:55:56,377
I just showed you how to make   
a fetch request for a tweet.    

1293
00:55:56,379 --> 00:55:58,412
Anyway, I should just, that     
should have been Twitter user.  

1294
00:55:58,414 --> 00:56:01,181
But anyway, so                  
this is a Twitter user.         

1295
00:56:01,183 --> 00:56:01,547
SortDescriptor.                 

1296
00:56:01,549 --> 00:56:04,884
And notice it has ascending or  
descending like us A to Z or    

1297
00:56:04,886 --> 00:56:09,788
Z to A and then it has          
this argument selector and      

1298
00:56:09,790 --> 00:56:12,591
this one creates                
some confusion.                 

1299
00:56:12,593 --> 00:56:14,592
But really this                 
selector just says,             

1300
00:56:14,594 --> 00:56:19,263
what method am I gonna use to   
compare items to do the sort.   

1301
00:56:19,265 --> 00:56:24,068
All right now, you don't even   
have to specify the selector    

1302
00:56:24,070 --> 00:56:26,070
if you don't want to and for    

1303
00:56:26,072 --> 00:56:28,739
almost all data types,          
numbers,                        

1304
00:56:28,741 --> 00:56:33,276
dates, it's going to use        
a method called compare, okay.  

1305
00:56:33,278 --> 00:56:37,580
Compare returns something       
called a comparison result      

1306
00:56:37,582 --> 00:56:40,983
which is either, it's the       
same, it's greater than, or     

1307
00:56:40,985 --> 00:56:41,150
it's less than.                 

1308
00:56:41,152 --> 00:56:42,918
So, that's what this            
compare method does.            

1309
00:56:42,920 --> 00:56:44,252
And it's implemented by date.   

1310
00:56:44,254 --> 00:56:45,520
It's implemented by Int32.      

1311
00:56:45,522 --> 00:56:47,088
It's implemented by double.     

1312
00:56:47,090 --> 00:56:49,390
It's even implemented           
by string.                      

1313
00:56:49,392 --> 00:56:50,057
Okay?                           
So,                             

1314
00:56:50,059 --> 00:56:51,858
you could just use compare.     

1315
00:56:51,860 --> 00:56:53,593
But, for strings.               

1316
00:56:53,595 --> 00:56:56,062
You wanna think a little        
bit about what kind             

1317
00:56:56,064 --> 00:56:56,995
of comparison do you want?      

1318
00:56:56,997 --> 00:57:00,232
Do you want                     
case-insensitive compare?       

1319
00:57:00,234 --> 00:57:02,934
Or you could even use           
this special compare,           

1320
00:57:02,936 --> 00:57:05,103
called                          
localizedStandardCompare.       

1321
00:57:05,105 --> 00:57:05,603
This will compare them so       

1322
00:57:05,605 --> 00:57:08,372
that it is sourced just         
like the finder on the Mac.     

1323
00:57:08,374 --> 00:57:11,008
And what does the finder on     
the Mac do that's different     

1324
00:57:11,010 --> 00:57:11,741
than case insensitive?          

1325
00:57:11,743 --> 00:57:14,911
Well, there's a lot of issues   
with things like diacritic      

1326
00:57:14,913 --> 00:57:16,645
marks, and you know,            

1327
00:57:16,647 --> 00:57:19,415
things in your local language   
where things sort differently,  

1328
00:57:19,417 --> 00:57:22,250
depending on what language      
you're in, what locale it is.   

1329
00:57:22,252 --> 00:57:24,919
You'd, you sometimes you        
ignore the diacritics,          

1330
00:57:24,921 --> 00:57:25,620
like accent marks.              

1331
00:57:25,622 --> 00:57:26,987
Sometimes they mean something.  

1332
00:57:26,989 --> 00:57:30,958
And, so localized standard      
compare is a special compare    

1333
00:57:30,960 --> 00:57:33,960
for strings, that knows         
how to do that, okay?           

1334
00:57:33,962 --> 00:57:37,230
And this is very commonly the   
one we will use for strings.    

1335
00:57:37,232 --> 00:57:38,898
When we're gonna show           
something in our UI,            

1336
00:57:38,900 --> 00:57:41,634
maybe this array of thing for   
fetching,                       

1337
00:57:41,636 --> 00:57:42,368
we're gonna put it in the UI.   

1338
00:57:42,370 --> 00:57:44,069
We would want it                
to be in order,                 

1339
00:57:44,071 --> 00:57:45,303
this localizedStandardCompare.  

1340
00:57:45,305 --> 00:57:49,474
You notice that it's            
an NSString dot method.         

1341
00:57:49,476 --> 00:57:52,076
It's not                        
String.localizedStandardComp-   

1342
00:57:52,078 --> 00:57:52,343
that's because this has to be   
an Objective-C visible method.  

1343
00:57:52,345 --> 00:57:57,948
are.                            
And                             

1344
00:57:58,049 --> 00:58:00,483
And you need                    
the NSString version.           

1345
00:58:00,485 --> 00:58:02,051
So basically you're going       
to say NSString dot, and        

1346
00:58:02,053 --> 00:58:06,455
you can go look, search for     
compare in NSString or string,  

1347
00:58:06,457 --> 00:58:08,523
because a string implements     
them all as well but            

1348
00:58:08,525 --> 00:58:11,226
you need NSString dot and       
then the name of the method.    

1349
00:58:11,228 --> 00:58:13,761
And you can search, and         
there is case insensitive and   

1350
00:58:13,763 --> 00:58:17,298
the standard compare and then   
the regular compare and etc.    

1351
00:58:17,300 --> 00:58:21,268
Now one other thing             
about this is that,             

1352
00:58:21,270 --> 00:58:26,239
these methods some of           
them are special in that,       

1353
00:58:26,241 --> 00:58:31,277
it does to compare on           
the database side, okay.        

1354
00:58:31,279 --> 00:58:35,081
Using SQL to do it,             
see what I'm saying?            

1355
00:58:35,083 --> 00:58:38,317
It's not actually bringing      
all the data over.              

1356
00:58:38,319 --> 00:58:40,819
Calling this method             
on every string, and            

1357
00:58:40,821 --> 00:58:42,888
doing some kind of              
quicksort or something.         

1358
00:58:42,890 --> 00:58:45,790
It's using super powerful       
sorting mechanisms that         

1359
00:58:45,792 --> 00:58:47,859
are built into an SQL           
database, okay.                 

1360
00:58:47,861 --> 00:58:51,996
So, in fact, all of the         
NSString ones will do that.     

1361
00:58:51,998 --> 00:58:55,733
Okay, so                        
they're super duper efficient.  

1362
00:58:55,735 --> 00:58:59,870
Now, if you wanted to use       
your own compare though,        

1363
00:58:59,872 --> 00:59:01,304
it's not gonna be efficient.    

1364
00:59:01,306 --> 00:59:01,637
Because it is gonna have to     

1365
00:59:01,639 --> 00:59:04,774
bring all the data from the     
database into your memory so    

1366
00:59:04,776 --> 00:59:06,909
it can run your little          
method over it.                 

1367
00:59:06,911 --> 00:59:07,909
So I strongly recommend         

1368
00:59:07,911 --> 00:59:10,612
against using your              
own selector here.              

1369
00:59:10,614 --> 00:59:12,513
I would use                     
the standard selectors.         

1370
00:59:12,515 --> 00:59:13,614
If you're gonna use             
your own selector               

1371
00:59:13,616 --> 00:59:15,582
it's gotta be on                
a pretty small dataset.         

1372
00:59:15,584 --> 00:59:20,487
Cuz it's not gonna              
be very efficient.              

1373
00:59:21,088 --> 00:59:23,489
Notice that when we             
do the fetch request,           

1374
00:59:23,491 --> 00:59:25,825
we don't just give it           
a sort descriptor,              

1375
00:59:25,827 --> 00:59:28,260
we give it an array             
of sort descriptors.            

1376
00:59:28,262 --> 00:59:33,165
That's the old sort by last     
name, and then first name.      

1377
00:59:33,167 --> 00:59:33,365
Right?                          
So if                           

1378
00:59:33,367 --> 00:59:36,300
we have 12 Smiths in there,     
we'll sort them and             

1379
00:59:36,302 --> 00:59:37,902
the Smiths will be              
in the right spot.              

1380
00:59:37,904 --> 00:59:40,237
And then all of the first       
names of the Smiths             

1381
00:59:40,239 --> 00:59:40,837
will be in order by that.       

1382
00:59:40,839 --> 00:59:43,406
So we can have as many of       
these sub sort by the one       

1383
00:59:43,408 --> 00:59:45,008
thing, sub sort by              
the next thing,                 

1384
00:59:45,010 --> 00:59:46,275
sub sort by the next thing.     

1385
00:59:46,277 --> 00:59:49,545
Basically, we can break ties    
with subsequent sorting and     

1386
00:59:49,547 --> 00:59:53,749
that's why we give an array     
of sort descriptors.            

1387
00:59:55,651 --> 00:59:59,721
Okay, so,                       
that's the fetch request and    

1388
00:59:59,723 --> 01:00:01,589
its sort descriptors and        
now the predicate.              

1389
01:00:01,591 --> 01:00:05,859
Okay, the predicate is the      
guts of saying which tweets do  

1390
01:00:05,861 --> 01:00:06,193
we want.                        

1391
01:00:06,195 --> 01:00:07,961
Which Twitter                   
users do we want?               

1392
01:00:07,963 --> 01:00:11,197
We create them with kind        
of interesting API.             

1393
01:00:11,199 --> 01:00:16,068
It looks a lot like             
printf from C.                  

1394
01:00:16,070 --> 01:00:19,838
NSPredicate format colon,       
and then a string.              

1395
01:00:19,840 --> 01:00:22,174
And the string is               
a format string.                

1396
01:00:22,176 --> 01:00:23,441
And again,                      
looks a lot like printf.        

1397
01:00:23,443 --> 01:00:26,878
So the best way to explain      
this is probably by example.    

1398
01:00:26,880 --> 01:00:28,913
But the way you're gonna        
learn this is you're gonna go   

1399
01:00:28,915 --> 01:00:32,750
read the documentation for      
NSPredicate, you've got to go   

1400
01:00:32,752 --> 01:00:35,886
read that documentation,        
in its class documentation,     

1401
01:00:35,888 --> 01:00:38,655
there's gonna be a link that    
says, creating predicates,      

1402
01:00:38,657 --> 01:00:41,691
or something like that, click   
on that, and go there, and      

1403
01:00:41,693 --> 01:00:44,093
learn all the things you can    
put in this format string,      

1404
01:00:44,095 --> 01:00:47,730
cuz it's all very specific to   
doing database queries, but     

1405
01:00:47,732 --> 01:00:48,697
I'll show you some examples,    
so                              

1406
01:00:48,699 --> 01:00:51,066
you get an idea of              
what's going on here.           

1407
01:00:51,068 --> 01:00:52,133
So here's the first one,        

1408
01:00:52,135 --> 01:00:54,935
let's have the search           
string called foo.              

1409
01:00:57,072 --> 01:00:59,506
All these searches then         
I'm gonna do right here         

1410
01:00:59,508 --> 01:01:00,206
are tweet searches.             

1411
01:01:00,208 --> 01:01:03,609
These are for predicates for    
searching for a tweet.          

1412
01:01:03,611 --> 01:01:06,979
So first, I'm gonna find        
all the tweets whose text,      

1413
01:01:06,981 --> 01:01:10,783
the actual tweet, the 140       
characters of pure joy or       

1414
01:01:10,785 --> 01:01:13,618
whatever, contains              
case sensitive.                 

1415
01:01:13,620 --> 01:01:14,753
Case insensitively.             

1416
01:01:14,755 --> 01:01:17,388
That's what [c] means.          

1417
01:01:17,390 --> 01:01:19,690
%@.                             
%@ is a substitution variable,  

1418
01:01:19,692 --> 01:01:21,759
and I have to give              
its value at the end.           

1419
01:01:21,761 --> 01:01:24,294
And so I'm substituting         
search string.                  

1420
01:01:24,296 --> 01:01:27,364
Okay, note that I can't say,    
text contains foo.              

1421
01:01:27,366 --> 01:01:32,135
I have to say,                  
text contains %@ and then.      

1422
01:01:32,137 --> 01:01:34,270
Put something at                
the end there.                  

1423
01:01:34,272 --> 01:01:35,170
Okay, so                        
that's an obvious one,          

1424
01:01:35,172 --> 01:01:38,206
I'm searching for all my        
tweets that contain foo.        

1425
01:01:38,208 --> 01:01:40,275
How about this one?             

1426
01:01:40,277 --> 01:01:44,979
I want all the tweets           
whose tweeter equals %@.        

1427
01:01:44,981 --> 01:01:47,648
I'm going to put Joe in there   
as the substitution variable    

1428
01:01:47,650 --> 01:01:52,986
and created after some          
date that I create.             

1429
01:01:53,354 --> 01:01:56,022
See that?                       
I'm using greater               

1430
01:01:56,024 --> 01:01:56,923
than to do that.                

1431
01:01:56,925 --> 01:01:58,457
And I'm doing && for and,       

1432
01:01:58,459 --> 01:02:01,326
you can also use the word and   
there.                          

1433
01:02:01,494 --> 01:02:02,127
Okay?                           
So that's all gonna be          

1434
01:02:02,129 --> 01:02:05,129
the tweets created by           
Joe since that date.            

1435
01:02:05,964 --> 01:02:08,565
You're starting to see the      
power of building the query     

1436
01:02:08,567 --> 01:02:08,899
into the database, right?       

1437
01:02:08,901 --> 01:02:11,701
If I had thousands of tweets,   
it'd be really easy to find     

1438
01:02:11,703 --> 01:02:13,703
the ones since yesterday,       
for example.                    

1439
01:02:13,705 --> 01:02:15,638
I'll show you that              
in a second here.               

1440
01:02:15,640 --> 01:02:21,010
Aand then I can also though,    
search through dot notation,    

1441
01:02:21,012 --> 01:02:22,577
on other fields,                
in other entities, but          

1442
01:02:22,579 --> 01:02:27,782
this tweeter.screenName equals  
percent @ sign%@ with CS193P,   

1443
01:02:27,784 --> 01:02:30,084
that's still searching for      
tweets.                         

1444
01:02:30,086 --> 01:02:30,184
That's searching for            

1445
01:02:30,186 --> 01:02:33,787
tweets whose tweeter's          
screen name is CS193P.          

1446
01:02:33,789 --> 01:02:36,256
Do you see what                 
it's doing there?               

1447
01:02:36,258 --> 01:02:37,657
This is still                   
a tweet predicate.              

1448
01:02:37,659 --> 01:02:41,060
This is not a twitter           
user predicate.                 

1449
01:02:41,628 --> 01:02:42,294
Okay?                           

1450
01:02:42,296 --> 01:02:44,563
So here's a different           
predicate.                      

1451
01:02:44,565 --> 01:02:46,865
This one is for Twitter user.   

1452
01:02:46,867 --> 01:02:47,065
So here I'm searching for       
all the Twitter users           

1453
01:02:47,067 --> 01:02:50,468
Okay?                           

1454
01:02:51,436 --> 01:02:56,506
who has a Tweet whose           
text contains foo.              

1455
01:02:57,375 --> 01:02:57,774
Okay?                           

1456
01:02:57,776 --> 01:02:59,742
So it even knows how            
to do a pluralistic             

1457
01:02:59,744 --> 01:03:02,277
search right here where you've  
got tweets dot text that means  

1458
01:03:02,279 --> 01:03:07,282
all the tweets, texts and       
doing contains and              

1459
01:03:07,284 --> 01:03:09,918
we can do [c] if                
we wanted foo.                  

1460
01:03:09,920 --> 01:03:11,853
So that's a twitter user        
search right there.             

1461
01:03:11,855 --> 01:03:12,053
the twitter users who have      
tweeted anything that includes  

1462
01:03:12,055 --> 01:03:14,822
We're looking for               

1463
01:03:14,824 --> 01:03:19,493
foo, again a powerful search,   
really easy to express.         

1464
01:03:22,129 --> 01:03:23,363
Question.                       

1465
01:03:23,365 --> 01:03:26,632
>> [INAUDIBLE]                  
>> So the question,             

1466
01:03:26,634 --> 01:03:29,234
does it infer this from         
the name of the variable,       

1467
01:03:29,236 --> 01:03:29,901
it's not inferring it,          

1468
01:03:29,903 --> 01:03:32,971
it's actually using the name    
of the attribute tweets         

1469
01:03:32,973 --> 01:03:35,473
right there and the name of     
the attribute text and it's     

1470
01:03:35,475 --> 01:03:39,043
building a SQL statement that   
will go and do this fetch.      

1471
01:03:39,045 --> 01:03:41,011
Okay now it's doing all         
that underneath the covers,     

1472
01:03:41,013 --> 01:03:44,314
we don't care how,              
but it's doing it.              

1473
01:03:47,251 --> 01:03:47,684
Yeah, compound predicate.       

1474
01:03:47,686 --> 01:03:50,753
You can build a compound        
predicate like an and           

1475
01:03:50,755 --> 01:03:51,920
predicate or an or predicate.   

1476
01:03:51,922 --> 01:03:54,956
You could put or or             
and in the string, or           

1477
01:03:54,958 --> 01:03:56,925
you could create separate       
predicates and and              

1478
01:03:56,927 --> 01:03:59,894
them together by creating       
an NSCompoundPredicate.         

1479
01:03:59,896 --> 01:04:01,295
And predicate with              
sub-predicates, and             

1480
01:04:01,297 --> 01:04:03,297
just given an array             
of predicates and               

1481
01:04:03,299 --> 01:04:03,430
it ands them together.          

1482
01:04:03,432 --> 01:04:06,232
Why would you ever want to do   
this versus just putting and    

1483
01:04:06,234 --> 01:04:06,466
or, or in there?                

1484
01:04:06,468 --> 01:04:09,769
Well, maybe you're computing    
what the predicates are,        

1485
01:04:09,771 --> 01:04:13,272
based on some, depending on     
what the user clicked on or     

1486
01:04:13,274 --> 01:04:13,772
something, you're               
computing it, and               

1487
01:04:13,774 --> 01:04:18,009
so you want to add these        
things you computed together.   

1488
01:04:18,777 --> 01:04:22,046
All right, there's also         
function predicates.            

1489
01:04:22,048 --> 01:04:24,348
Now these are super             
powerful predicates,            

1490
01:04:24,350 --> 01:04:26,183
and you don't need these for    
your homework, so               

1491
01:04:26,185 --> 01:04:29,019
don't worry too much about      
these, but they're cool.        

1492
01:04:29,021 --> 01:04:32,121
You can even say, you have      
a search like this one,         

1493
01:04:32,123 --> 01:04:34,357
tweets.@count > 5,              

1494
01:04:34,359 --> 01:04:36,725
this is a Twitter user search,  
that finds                      

1495
01:04:36,727 --> 01:04:41,229
all the Twitter users who have  
more than 5 Tweets, okay?       

1496
01:04:41,231 --> 01:04:44,132
So, @count is actually          
running, kind of a function in  

1497
01:04:44,134 --> 01:04:48,436
the database, to go count       
the number of Tweets that       

1498
01:04:48,438 --> 01:04:49,603
the Twitter user has.           

1499
01:04:49,605 --> 01:04:51,438
So, again, you'll see all       
of this when you go look at     

1500
01:04:51,440 --> 01:04:54,441
the NSPredicate documentation,  
it's incredibly powerful,       

1501
01:04:54,443 --> 01:04:58,311
you can see you barely have to  
type anything in as the format  

1502
01:04:58,313 --> 01:05:02,081
string, and you get these       
really powerful searches.       

1503
01:05:03,016 --> 01:05:06,118
All right, so let's put it      
all together now to create      

1504
01:05:06,120 --> 01:05:07,519
our fetch request, okay.        

1505
01:05:07,521 --> 01:05:08,153
I'm gonna create,               

1506
01:05:08,155 --> 01:05:10,188
in this case,                   
a Twitter user fetch request.   

1507
01:05:10,190 --> 01:05:12,890
So I'm saying                   
a FetchRequest<TwitterUser> =   

1508
01:05:12,892 --> 01:05:15,693
TwitterUser.fetchRequest(),     
then I'm gonna                  

1509
01:05:15,695 --> 01:05:17,294
create a time which             
was yesterday,                  

1510
01:05:17,296 --> 01:05:19,896
it's actually not,              
it's 24 hours ago.              

1511
01:05:19,898 --> 01:05:23,066
Time interval since now,        
minus 24 times 60 times 60,     

1512
01:05:23,068 --> 01:05:25,801
that's 24 hours ago, and        
I'm creating a predicate        

1513
01:05:25,803 --> 01:05:30,072
that says, find me any Twitter  
users that have a Tweet that's  

1514
01:05:30,074 --> 01:05:35,444
created before yesterday,       
or since yesterday I guess,     

1515
01:05:35,446 --> 01:05:37,545
yes, created is greater         
than yesterday.                 

1516
01:05:37,547 --> 01:05:41,716
So I'm finding all the Twitter  
users who have created Tweets   

1517
01:05:41,718 --> 01:05:44,418
in the last twenty-four hours,  
that's what this one does.      

1518
01:05:44,420 --> 01:05:49,023
So any is a special term        
that means match any            

1519
01:05:49,025 --> 01:05:50,223
of these things, and            

1520
01:05:50,225 --> 01:05:54,828
these things are Tweets that    
are created since yesterday.    

1521
01:05:54,928 --> 01:05:57,997
And I'm gonna sort the result   
by the actual name,             

1522
01:05:57,999 --> 01:06:00,699
the real name of                
the Twitter user.               

1523
01:06:00,701 --> 01:06:03,335
So I'm just doing               
sortDescriptor, key of name,    

1524
01:06:03,337 --> 01:06:06,271
ascending true, I'm not         
specifying a selector, so       

1525
01:06:06,273 --> 01:06:08,639
I'm gonna get kind of           
the default comparison.         

1526
01:06:08,641 --> 01:06:11,542
Okay, that's it, so that's how  
you create a fetch request.     

1527
01:06:11,544 --> 01:06:15,813
Now, since I have a fetch       
request, how do I make it go?   

1528
01:06:15,815 --> 01:06:18,648
Give me those Tweets,           
give me those Twitter users.    

1529
01:06:18,650 --> 01:06:21,384
We do that with the very        
simple method in context, so    

1530
01:06:21,386 --> 01:06:24,854
we ask the context to do the    
fetch, and it will go out and   

1531
01:06:24,856 --> 01:06:27,456
return an array of              
all those things,               

1532
01:06:27,458 --> 01:06:31,060
sorted in the way the fetch     
request says to sort them.      

1533
01:06:31,062 --> 01:06:32,194
Okay, simple as that.           

1534
01:06:32,196 --> 01:06:36,598
The only thing not so           
simple, it throws, okay?        

1535
01:06:36,600 --> 01:06:42,070
Just like context save throws,  
context execute also throws.    

1536
01:06:42,072 --> 01:06:44,305
So, you could put in            
a try question mark,            

1537
01:06:44,307 --> 01:06:47,808
in that case, if the execute    
fails, and usually it's gonna   

1538
01:06:47,810 --> 01:06:51,411
fail because your predicate     
is wrong, or something.         

1539
01:06:51,779 --> 01:06:55,148
Like your predicate just makes  
no sense then you could fail.   

1540
01:06:55,150 --> 01:06:57,249
If it's gonna fail,             
you're gonna get back nil,      

1541
01:06:57,251 --> 01:06:57,983
if you do try question mark,    

1542
01:06:57,985 --> 01:06:59,551
remember that's what try        
question mark means.            

1543
01:06:59,553 --> 01:07:02,454
It means try this, and          
if it fails, give back nil.     

1544
01:07:02,456 --> 01:07:03,254
But it if doesn't fail,         

1545
01:07:03,256 --> 01:07:05,690
then you're gonna get           
an optional array.              

1546
01:07:05,692 --> 01:07:07,658
And that array is               
gonna be empty,                 

1547
01:07:07,660 --> 01:07:11,061
if it couldn't find anything    
that matches your request, or,  

1548
01:07:11,063 --> 01:07:13,063
it's gonna be full of objects,  
okay?                           

1549
01:07:13,065 --> 01:07:16,199
Tweets, or Twitter users,       
an array of tweets, or          

1550
01:07:16,201 --> 01:07:17,099
an array of Twitter users,      

1551
01:07:17,101 --> 01:07:18,467
at least that's what it's       
gonna look like to you,         

1552
01:07:18,469 --> 01:07:21,303
it's not quite that,            
looks like it, all right?       

1553
01:07:21,305 --> 01:07:24,372
That's the result you're        
gonna get back, so, again,      

1554
01:07:24,374 --> 01:07:25,773
super simple querying.          

1555
01:07:25,775 --> 01:07:30,444
Now, you might be a little      
scared of doing this request,   

1556
01:07:30,446 --> 01:07:34,381
what if it's matches            
a million things, okay?         

1557
01:07:34,383 --> 01:07:38,318
Are you gonna get a million     
Tweets back in one              

1558
01:07:38,320 --> 01:07:39,219
request like this?              

1559
01:07:39,221 --> 01:07:40,420
The answer is no.               

1560
01:07:40,422 --> 01:07:44,457
This array that you get back    
is really super smart array.    

1561
01:07:44,459 --> 01:07:47,826
It doesn't actually bring       
the data in from the database,  

1562
01:07:47,828 --> 01:07:50,629
until you start asking for      
it, okay?                       

1563
01:07:50,631 --> 01:07:53,064
So until I ask for              
the Twitter user,               

1564
01:07:53,066 --> 01:07:54,932
a certain Twitter               
user's information,             

1565
01:07:54,934 --> 01:07:57,234
the Twitter user's name, the    
Twitter user's screen name,     

1566
01:07:57,236 --> 01:07:59,703
the Twitter user did not get    
faulted from the database.      

1567
01:07:59,705 --> 01:08:01,004
This is called faulting, okay?  

1568
01:08:01,006 --> 01:08:02,806
And so, these objects,          
you can imagine,                

1569
01:08:02,808 --> 01:08:05,041
they're kind of shells,         
empty shells.                   

1570
01:08:05,043 --> 01:08:06,709
And until you crack             
open the shell and              

1571
01:08:06,711 --> 01:08:07,843
start looking inside,           

1572
01:08:07,845 --> 01:08:09,911
it doesn't actually             
get the data for you.           

1573
01:08:09,913 --> 01:08:11,379
And the reason this             
matters to you is,              

1574
01:08:11,381 --> 01:08:14,315
if you go in the debugger,      
or you do a print statement,    

1575
01:08:14,317 --> 01:08:19,186
like this one where you say,    
for user in recentTweeters      

1576
01:08:19,188 --> 01:08:22,356
fetched user whatever,          
when you print that out,        

1577
01:08:22,358 --> 01:08:25,158
it's not gonna print the,       
a Tweeter user object,          

1578
01:08:25,160 --> 01:08:28,361
it's gonna print some           
kind of faulting shel.          

1579
01:08:28,363 --> 01:08:29,595
Because you haven't             
actually asked for              

1580
01:08:29,597 --> 01:08:32,064
any of the data inside          
that thing yet, so              

1581
01:08:32,066 --> 01:08:33,532
it hasn't faulted yet.          

1582
01:08:33,534 --> 01:08:33,732
But if you say, for             

1583
01:08:33,734 --> 01:08:36,935
user in recentTweeters and      
say fetched user named, and     

1584
01:08:36,937 --> 01:08:40,938
now you say user.name, now you  
are faulting this object in.    

1585
01:08:40,940 --> 01:08:41,138
In fact, this for               

1586
01:08:41,140 --> 01:08:44,808
loop would fault all these      
objects in to memory.           

1587
01:08:44,810 --> 01:08:46,710
Okay, fetch them all,           
cuz you're asking for           

1588
01:08:46,712 --> 01:08:47,344
the name of every single one.   

1589
01:08:47,346 --> 01:08:49,278
Boom, fault, fault, fault,      
they're all coming in.          

1590
01:08:49,280 --> 01:08:52,615
Now, it doesn't do it one by    
one, it faults in batches,      

1591
01:08:52,617 --> 01:08:54,883
it's really high performance,   
so,                             

1592
01:08:54,885 --> 01:08:56,718
you know,                       
don't worry about that.         

1593
01:08:56,720 --> 01:08:59,688
But just, I just don't          
want you to be surprised        

1594
01:08:59,690 --> 01:08:59,987
when you go in                  
the debugger and                

1595
01:08:59,989 --> 01:09:02,023
you're like, I printed out      
this Twitter, user and          

1596
01:09:02,025 --> 01:09:04,158
there's no screen name,         
what's going on?                

1597
01:09:04,160 --> 01:09:05,625
Well, it hasn't faulted it in.  

1598
01:09:05,627 --> 01:09:07,460
In fact,                        
the debugger you could say,     

1599
01:09:07,462 --> 01:09:08,795
print the user.name,            

1600
01:09:08,797 --> 01:09:13,332
and it would fault it in,       
okay, give it to you.           

1601
01:09:14,134 --> 01:09:16,868
All right, I told you I was     
gonna talk about Core Data      

1602
01:09:16,870 --> 01:09:18,503
thread safety, so here it is.   

1603
01:09:18,505 --> 01:09:21,906
NSManagedObjectContext,         
the context thing,              

1604
01:09:21,908 --> 01:09:23,541
that thing that you're          
sending executes to,            

1605
01:09:23,543 --> 01:09:26,610
that thing that you're hitting  
save, the things that you're    

1606
01:09:26,612 --> 01:09:29,046
using to create Tweet,          
Tweet, subcontext,              

1607
01:09:29,048 --> 01:09:33,817
colon whatever, that handle on  
database is not thread safe.    

1608
01:09:34,084 --> 01:09:37,620
A context can only              
be used on the queue            

1609
01:09:37,622 --> 01:09:40,222
that it was created on,         
period.                         

1610
01:09:40,224 --> 01:09:43,592
If you past a context           
to another queue,               

1611
01:09:43,594 --> 01:09:46,027
like you tried to               
dispatch off to some            

1612
01:09:46,029 --> 01:09:48,863
global concurrent queue, and    
you pasted the context, or      

1613
01:09:48,865 --> 01:09:51,799
even just pasted a Tweet,       
okay, that's not gonna work,    

1614
01:09:51,801 --> 01:09:54,501
cuz that Tweet was created      
on this other context.          

1615
01:09:54,503 --> 01:09:55,836
So in fact,                     
not only the context,           

1616
01:09:55,838 --> 01:09:58,505
but everything that you         
create on that context          

1617
01:09:58,507 --> 01:10:01,107
has to all be done              
in the same queue.              

1618
01:10:01,109 --> 01:10:02,141
So now you're                   
probably thinking,              

1619
01:10:02,143 --> 01:10:06,111
well how the heck do I          
do multithreading then?         

1620
01:10:06,113 --> 01:10:09,181
Cuz a database especially,      
you can imagine, for            

1621
01:10:09,183 --> 01:10:12,417
temple one to load your         
database off the main queue,    

1622
01:10:12,419 --> 01:10:15,353
cuz you, you might be loading   
lots and lots of things.        

1623
01:10:15,355 --> 01:10:15,419
Now your queries,               

1624
01:10:15,421 --> 01:10:18,355
your probably gonna do those    
on the main queue because,      

1625
01:10:18,357 --> 01:10:20,023
the user's looking              
at that information.            

1626
01:10:20,025 --> 01:10:20,990
You want it to be               
highly responsive.              

1627
01:10:20,992 --> 01:10:25,194
Okay, it's probably worth,      
and core data is super fast,    

1628
01:10:25,196 --> 01:10:25,928
especially with queries.        

1629
01:10:25,930 --> 01:10:28,297
So, you could probably do       
that on the main queue.         

1630
01:10:28,299 --> 01:10:28,630
But loading it up,              

1631
01:10:28,632 --> 01:10:30,465
you probably don't              
want to do that.                

1632
01:10:30,467 --> 01:10:32,667
All right, so,                  
how do we do multithreading?    

1633
01:10:32,669 --> 01:10:35,469
Although that we do             
multithreading in Core Data,    

1634
01:10:35,471 --> 01:10:42,076
is each database can have       
multiple contexts, okay?        

1635
01:10:42,078 --> 01:10:46,246
So, the database underneath,    
is multithreaded,               

1636
01:10:46,248 --> 01:10:50,016
it can have multiple            
contexts writing to it.         

1637
01:10:50,018 --> 01:10:51,517
Okay, completely                
different context,              

1638
01:10:51,519 --> 01:10:55,187
writing to the same database,   
in different queue's even, so   

1639
01:10:55,189 --> 01:10:56,455
it's fully multithreaded.       

1640
01:10:56,457 --> 01:10:59,891
So that means we had to have    
a context for every queue.      

1641
01:10:59,893 --> 01:11:02,494
Whatever queue we're going      
to access the database,         

1642
01:11:02,496 --> 01:11:03,795
we have to a context            
in every queue.                 

1643
01:11:03,797 --> 01:11:06,697
Now I'm gonna show you how      
to create a context, or         

1644
01:11:06,699 --> 01:11:06,830
on another queue, so            

1645
01:11:06,832 --> 01:11:09,466
you can do something with       
that queue in a second here.    

1646
01:11:09,468 --> 01:11:11,201
But first I want to talk        
about this important            

1647
01:11:11,203 --> 01:11:14,637
method in context               
called performBlock.            

1648
01:11:14,639 --> 01:11:16,539
performBlock just               
takes a closure,                

1649
01:11:16,541 --> 01:11:17,706
a closure that                  
takes no arguments,             

1650
01:11:17,708 --> 01:11:21,443
returns no arguments, and       
it will ensure, this is         

1651
01:11:21,445 --> 01:11:26,147
an insurance method, it will    
ensure that everything inside   

1652
01:11:26,149 --> 01:11:31,252
that closure happens on the     
right queue for that context.   

1653
01:11:31,254 --> 01:11:34,021
Okay, so this,                  
don't get confused,             

1654
01:11:34,023 --> 01:11:36,924
this method does not dispatch,  
you know,                       

1655
01:11:36,926 --> 01:11:41,595
cause background thrading,      
this is just making sure that,  

1656
01:11:41,597 --> 01:11:44,964
that closure executes           
on the right queue.             

1657
01:11:44,966 --> 01:11:47,266
So this is a way that           
you can kind of be safe.        

1658
01:11:47,268 --> 01:11:49,568
And some might argue you        
should put performBlock around  

1659
01:11:49,570 --> 01:11:52,004
every single call to every      
Core Data thing you ever do,    

1660
01:11:52,006 --> 01:11:55,173
because that will ensure that   
you'll never have a problem     

1661
01:11:55,175 --> 01:11:58,810
where you're accessing          
the context not on it's queue.  

1662
01:11:58,812 --> 01:12:00,611
Okay, it accidentally,          
you got some bad code.          

1663
01:12:00,613 --> 01:12:05,449
Now, that might be a little     
bit overkill especially if      

1664
01:12:05,451 --> 01:12:08,218
you're mostly using             
the main queue anyway, and      

1665
01:12:08,220 --> 01:12:11,288
you really, maybe you only      
use background queues for       

1666
01:12:11,290 --> 01:12:14,357
this tiny little bit of         
processing on the side.         

1667
01:12:14,359 --> 01:12:16,926
It's not like you have          
the tons context and            

1668
01:12:16,928 --> 01:12:20,062
lots of different queues        
all going at each other.        

1669
01:12:20,064 --> 01:12:21,563
So, it might be overkill.       

1670
01:12:21,565 --> 01:12:23,365
But if you're doing             
anything where you have,        

1671
01:12:23,367 --> 01:12:26,001
truly have multiple context     
on multiple queues and          

1672
01:12:26,003 --> 01:12:30,405
they're access and things,      
this is a good way to be safe.  

1673
01:12:30,407 --> 01:12:33,974
Okay, so all this does is it    
makes it so you are safe.       

1674
01:12:33,976 --> 01:12:38,746
The code inside that block      
will be executed on the proper  

1675
01:12:38,748 --> 01:12:39,746
queue for that context.         

1676
01:12:39,748 --> 01:12:42,716
Even if it has to dispatch,     
it will do it if it has to.     

1677
01:12:42,718 --> 01:12:43,683
If it doesn't                   
have to dispatch,               

1678
01:12:43,685 --> 01:12:46,752
if you're on the right queue,   
it'll just execute it, fine.    

1679
01:12:46,754 --> 01:12:48,887
But if you're on the wrong      
queue right now and             

1680
01:12:48,889 --> 01:12:49,121
you execute this,               

1681
01:12:49,123 --> 01:12:51,256
it will dispatch it             
to the right queue.             

1682
01:12:51,258 --> 01:12:53,057
There's also                    
performBlockAndWait,            

1683
01:12:53,059 --> 01:12:54,492
which will get it on            
the right queue and             

1684
01:12:54,494 --> 01:12:58,062
wait until it's done, and       
then continue in your queue.    

1685
01:12:58,296 --> 01:13:00,363
Okay, but this doesn't          
really talk about,              

1686
01:13:00,365 --> 01:13:04,200
how do I get another context    
in a different thread, right?   

1687
01:13:04,202 --> 01:13:07,336
I wanna do some code            
on another thread.              

1688
01:13:07,338 --> 01:13:08,103
Where do I get a context?       

1689
01:13:08,105 --> 01:13:12,040
The only context I know how to  
get right now is viewContext.   

1690
01:13:12,042 --> 01:13:14,042
That's the main                 
queue's context,                

1691
01:13:14,044 --> 01:13:15,009
that's the only                 
only one I can get.             

1692
01:13:15,011 --> 01:13:18,212
Okay, well, you're gonna        
use this really cool method     

1693
01:13:18,214 --> 01:13:18,946
in persistentContainer.         

1694
01:13:18,948 --> 01:13:23,650
This is new in iOS 10 and       
a really cool method,           

1695
01:13:23,652 --> 01:13:24,084
super cool.                     

1696
01:13:24,086 --> 01:13:27,587
It makes it really easy to      
do background process on        

1697
01:13:27,589 --> 01:13:28,354
Core Data.                      

1698
01:13:28,356 --> 01:13:30,055
It's called                     
performBackgroundTask.          

1699
01:13:30,057 --> 01:13:33,592
Remember, this is a function    
on persistentContainer that     

1700
01:13:33,594 --> 01:13:35,694
you get from the AppDelegate.   

1701
01:13:35,696 --> 01:13:36,928
And this takes a closure.       

1702
01:13:36,930 --> 01:13:41,932
This closure has one argument,  
the argument is a context.      

1703
01:13:41,934 --> 01:13:44,335
And that context is             
appropriate for use             

1704
01:13:44,337 --> 01:13:48,071
on this other thread that this  
is going to create for you.     

1705
01:13:48,073 --> 01:13:51,207
So this performBackgroundTask   
finds another queue,            

1706
01:13:51,209 --> 01:13:53,910
not the main queue,             
some other queue.               

1707
01:13:53,912 --> 01:13:57,079
And it creates a context        
in that other queue, and it     

1708
01:13:57,081 --> 01:14:02,584
executes your closure on that   
other queue in the background.  

1709
01:14:02,985 --> 01:14:04,052
Now, it's                       
a convenience method.           

1710
01:14:04,054 --> 01:14:06,654
So if you really needed         
to control the quality of       

1711
01:14:06,656 --> 01:14:10,191
service, for example, the       
queue and all the, okay, well,  

1712
01:14:10,193 --> 01:14:10,557
you can't use this.             

1713
01:14:10,559 --> 01:14:13,593
But 99.99% of the time,         
whatever quality of             

1714
01:14:13,595 --> 01:14:16,329
service that queue is           
getting is the right one for    

1715
01:14:16,331 --> 01:14:19,499
Core Data cuz Core Data         
knows its business.             

1716
01:14:20,167 --> 01:14:20,566
So you're gonna do it.          

1717
01:14:20,568 --> 01:14:24,736
Now, inside this closure        
couple of things really         

1718
01:14:24,738 --> 01:14:25,203
be careful of.                  

1719
01:14:25,205 --> 01:14:27,772
One, never use                  
viewContext in here.            

1720
01:14:27,774 --> 01:14:31,375
Do you see why that would       
be horrendously bad to          

1721
01:14:31,377 --> 01:14:33,744
use viewContext                 
inside this closure?            

1722
01:14:33,746 --> 01:14:37,314
Because this closure by         
definition is not executing on  

1723
01:14:37,316 --> 01:14:38,448
the main queue.                 

1724
01:14:38,450 --> 01:14:40,683
By definition this              
closure is on a separate        

1725
01:14:40,685 --> 01:14:41,851
queue on a background queue.    

1726
01:14:41,853 --> 01:14:43,552
That's the whole                
point of this thing,            

1727
01:14:43,554 --> 01:14:45,287
is to put this thing            
on another queue.               

1728
01:14:45,289 --> 01:14:47,555
So never use                    
viewContext in there,           

1729
01:14:47,557 --> 01:14:49,090
that's why it's in red, okay?   

1730
01:14:49,092 --> 01:14:54,061
The second thing is don't       
forget to save this context.    

1731
01:14:54,063 --> 01:14:55,829
If you do a whole bunch         
of stuff in here and            

1732
01:14:55,831 --> 01:14:57,564
you don't save,                 
you just did for                

1733
01:14:57,566 --> 01:14:58,465
nothing cuz you did in memory.  

1734
01:14:58,467 --> 01:15:01,701
And then this block went away,  
you're never gonna get that     

1735
01:15:01,703 --> 01:15:04,537
context back again,             
that data is lost.              

1736
01:15:04,539 --> 01:15:07,506
Which all gonna leave the heap  
and then nothing ever happens.  

1737
01:15:07,508 --> 01:15:09,908
It never gonna get              
committed to the database.      

1738
01:15:09,910 --> 01:15:12,944
So, don't forget to             
save before you leave.          

1739
01:15:13,512 --> 01:15:14,745
Now, when you save,             

1740
01:15:14,747 --> 01:15:17,281
it will push it down            
to the database and             

1741
01:15:17,283 --> 01:15:21,952
your other context like your    
viewContext will see it, okay?  

1742
01:15:21,954 --> 01:15:25,255
And so these two contexts, the  
one that's happening on this    

1743
01:15:25,257 --> 01:15:26,489
background and                  
the viewContext.                

1744
01:15:26,491 --> 01:15:28,758
They're working on              
the same database, so           

1745
01:15:28,760 --> 01:15:29,058
when this one saves,            

1746
01:15:29,060 --> 01:15:31,860
boom this guys is gonna         
start seeing those changes.     

1747
01:15:31,862 --> 01:15:35,797
I'm gonna talk a little bit     
how react to seeing those       

1748
01:15:35,799 --> 01:15:38,266
changes in a minute here.       

1749
01:15:38,533 --> 01:15:40,200
Okay, so,                       
everyone understand this?       

1750
01:15:40,202 --> 01:15:42,469
Cuz you're gonna have to        
do this in assignment five.     

1751
01:15:42,471 --> 01:15:46,106
And I want you to do all your   
loading off the main queue,     

1752
01:15:46,108 --> 01:15:49,709
and all your fetching           
on the main queue.              

1753
01:15:50,077 --> 01:15:56,015
All right, Core Data is huge.   

1754
01:15:56,017 --> 01:15:56,948
Huge.                           

1755
01:15:57,717 --> 01:15:59,484
I can't cover it all.           

1756
01:15:59,818 --> 01:16:01,185
It's got optimistic locking,    
for                             

1757
01:16:01,187 --> 01:16:01,852
those of you that               
know about database.            

1758
01:16:01,854 --> 01:16:05,422
It's got optimistic locking     
and all that database stuff.    

1759
01:16:05,424 --> 01:16:08,891
It has full undo, redo,         
which is incredible.            

1760
01:16:08,893 --> 01:16:12,528
It obviously knows how to       
roll back unsaved changes.      

1761
01:16:12,530 --> 01:16:14,496
Okay, if you have               
changes in memory and           

1762
01:16:14,498 --> 01:16:15,497
you want to roll                
some of them back,              

1763
01:16:15,499 --> 01:16:16,865
you can do that                 
before you save.                

1764
01:16:16,867 --> 01:16:19,267
It knows about staleness,       
like, if I make a fetch,        

1765
01:16:19,269 --> 01:16:22,903
how long before I really wanna  
fetch it again because I don't  

1766
01:16:22,905 --> 01:16:25,205
trust that the data             
hasn't changed, right?          

1767
01:16:25,207 --> 01:16:27,607
How long it takes for           
the data to get stale.          

1768
01:16:27,609 --> 01:16:31,077
And a lot of other              
things in the Core Data.        

1769
01:16:31,079 --> 01:16:32,378
So, I can't cover it all,       

1770
01:16:32,380 --> 01:16:34,013
there's not enough              
time to do that.                

1771
01:16:34,015 --> 01:16:36,515
Cuz we're trying to talk about  
a whole another topic about     

1772
01:16:36,517 --> 01:16:36,548
But you'll want to check the    
documentation, you won't need   

1773
01:16:36,550 --> 01:16:39,351
Core Data here.                 

1774
01:16:39,353 --> 01:16:42,520
anything else of this stuff to  
do your homeworks, of course,   

1775
01:16:42,522 --> 01:16:44,488
I'm just trying to get          
you started with this.          

1776
01:16:44,490 --> 01:16:46,957
But you need to know that this  
stuff is in there, so that      

1777
01:16:46,959 --> 01:16:51,395
one day when you go out and do  
some significant iOS database   

1778
01:16:51,397 --> 01:16:54,764
stuff, you'll know that these   
features are out there.         

1779
01:16:54,965 --> 01:17:00,236
All right, the next topic here  
is Core Data and UITableView.   

1780
01:17:00,238 --> 01:17:04,606
As you can imagine, this is a   
marriage made in heaven, okay?  

1781
01:17:04,608 --> 01:17:05,974
Because you got this database,  

1782
01:17:05,976 --> 01:17:08,143
got all this big data           
sets in there and               

1783
01:17:08,145 --> 01:17:13,281
what is the UI we use to        
show big data sets in iOS?      

1784
01:17:13,283 --> 01:17:13,848
UITableView.                    

1785
01:17:13,850 --> 01:17:18,152
Okay, UITableView is great      
at showing arbitrary large      

1786
01:17:18,519 --> 01:17:21,488
data sets in our                
arbitrary UIs, right?           

1787
01:17:21,490 --> 01:17:22,955
We can do custom                
table view cell,                

1788
01:17:22,957 --> 01:17:25,024
we can do anything UI we want.  

1789
01:17:25,026 --> 01:17:29,328
So, this is so common that      
Apple has invented this very    

1790
01:17:29,330 --> 01:17:33,098
important class called          
NSFetchedResultsController.     

1791
01:17:33,100 --> 01:17:35,266
This is not a viewController,   
okay?                           

1792
01:17:35,268 --> 01:17:38,703
This is a controller that       
controls Core Data and          

1793
01:17:38,705 --> 01:17:39,370
UITableView talking together,   

1794
01:17:39,372 --> 01:17:43,707
but it's not in its fetch       
results view controller, okay?  

1795
01:17:43,709 --> 01:17:46,143
And all this                    
NSFetchedResultsController      

1796
01:17:46,145 --> 01:17:50,013
does is it hooks up an          
NSFetchRequest that you create  

1797
01:17:50,015 --> 01:17:51,247
to a UITableView.               

1798
01:17:51,249 --> 01:17:54,417
And it hooks them up in such    
a strong way that if anything   

1799
01:17:54,419 --> 01:17:58,020
changes in the database that    
would cause that fetch request  

1800
01:17:58,022 --> 01:18:01,089
to return different results,    
it updates the table            

1801
01:18:01,091 --> 01:18:04,059
automatically, you don't        
have to do anything.            

1802
01:18:04,061 --> 01:18:08,129
So this is an active            
live hookup between             

1803
01:18:08,131 --> 01:18:13,200
the NSFetchRequest and          
the TableView, okay?            

1804
01:18:13,202 --> 01:18:16,203
Even if some other context are  
changing the data, it doesn't   

1805
01:18:16,205 --> 01:18:20,807
matter, it's always keeping     
that TableView up to date.      

1806
01:18:20,975 --> 01:18:24,077
So I'm gonna talk               
about how we do this,           

1807
01:18:24,079 --> 01:18:27,913
how we use                      
an NSFetchedResultsController.  

1808
01:18:27,915 --> 01:18:31,050
I'm even gonna provide you      
some kind of free code          

1809
01:18:31,052 --> 01:18:31,817
to do some of it.               

1810
01:18:31,819 --> 01:18:33,752
You'll have to type in a        
little bit of the rest of it.   

1811
01:18:33,754 --> 01:18:37,455
But it's,                       
it's pretty easy to do.         

1812
01:18:38,490 --> 01:18:39,857
So how fundamentally does       

1813
01:18:39,859 --> 01:18:41,858
NSFetchedResultsController      
work?                           

1814
01:18:41,860 --> 01:18:45,395
Two ways, one,                  
it has a delegate and           

1815
01:18:45,397 --> 01:18:49,599
that delegate you set to be     
your UITableViewController.     

1816
01:18:49,601 --> 01:18:52,468
And whenever the                
FetchResultsController sees     

1817
01:18:52,470 --> 01:18:52,668
something happening             

1818
01:18:52,670 --> 01:18:55,537
in the database that would      
affect that fetchRequest,       

1819
01:18:55,539 --> 01:18:58,540
it tells the table view         
controller, hey, do this,       

1820
01:18:58,542 --> 01:19:01,642
add this row, add a section,    
reload this row, whatever,      

1821
01:19:01,644 --> 01:19:08,816
it uses UITableView primitives  
to update the table, okay?      

1822
01:19:08,818 --> 01:19:09,183
I'm gonna show you,             

1823
01:19:09,185 --> 01:19:11,251
I'm gonna give you the code     
that does that part of it,      

1824
01:19:11,253 --> 01:19:13,453
that implements the             
NSFetchedResultsController's    

1825
01:19:13,455 --> 01:19:15,355
delegate, okay, so              
that's one way it does it.      

1826
01:19:15,357 --> 01:19:17,757
The other way that              
the NSFetchedResultsController  

1827
01:19:17,759 --> 01:19:20,359
works is that it provides       
implementation for              

1828
01:19:20,361 --> 01:19:23,929
all of your UITableView data    
sources methods, right?         

1829
01:19:23,931 --> 01:19:25,864
Because the contents            
of your table                   

1830
01:19:25,866 --> 01:19:26,864
are coming out                  
of the database,                

1831
01:19:26,866 --> 01:19:29,467
so NSFetchedResultsController   
lets you know all of them, how  

1832
01:19:29,469 --> 01:19:32,569
many sections, how many rows    
and sections all that stuff.    

1833
01:19:32,571 --> 01:19:34,037
In fact,                        
this is what it looks like,     

1834
01:19:34,039 --> 01:19:36,673
this is the implementation      
that you're gonna put in to     

1835
01:19:36,675 --> 01:19:40,410
your controller when you have   
fetchedResultsController.       

1836
01:19:40,412 --> 01:19:40,843
The first thing you're gonna    

1837
01:19:40,845 --> 01:19:43,178
do is you're gonna create a     
fetchedResultsController, and   

1838
01:19:43,180 --> 01:19:45,447
I'm gonna show you how          
to do that in a moment.         

1839
01:19:45,449 --> 01:19:47,682
And so you're always            
gonna have a var called         

1840
01:19:47,684 --> 01:19:49,417
fetchedResultsController, and   

1841
01:19:49,419 --> 01:19:52,219
it's gonna be of type           
NSFetchedResultsController.     

1842
01:19:52,221 --> 01:19:54,822
And when you have that var,     
now you can implement your      

1843
01:19:54,824 --> 01:19:58,625
sections, number of sections    
in TableView by saying return   

1844
01:19:58,627 --> 01:20:03,797
fetchedResultsController        
.sections.count, okay?          

1845
01:20:03,799 --> 01:20:05,531
Those are a lot of              
optionals in there, so          

1846
01:20:05,533 --> 01:20:07,867
we'll default to one section.   

1847
01:20:07,869 --> 01:20:10,336
And then to get the number      
of rows in a section,           

1848
01:20:10,338 --> 01:20:11,770
you're just gonna say the,      

1849
01:20:11,772 --> 01:20:13,672
you're gonna get                
the sections first by saying    

1850
01:20:13,674 --> 01:20:15,506
fetchedResultsController?.sec-  
tions.                          

1851
01:20:15,508 --> 01:20:20,211
And as long as you have some    
sections, sections.count        

1852
01:20:20,213 --> 01:20:23,614
greater than zero, then you're  
gonna return the sections in    

1853
01:20:23,616 --> 01:20:26,383
that section that's passed      
to you number of objects.       

1854
01:20:26,385 --> 01:20:29,886
Okay, so that code, that's it,  
that's all of your, those two   

1855
01:20:29,888 --> 01:20:33,556
methods, that's the entire      
implementation if you're using  

1856
01:20:33,558 --> 01:20:35,424
a fetchedResultsController,     
okay?                           

1857
01:20:35,426 --> 01:20:38,460
And then of course,             
there's cellForRowAt, okay,     

1858
01:20:38,462 --> 01:20:40,662
you gotta implement that,       
that one too,                   

1859
01:20:40,664 --> 01:20:43,064
you're gonna use                
fetchedResultsController.       

1860
01:20:43,066 --> 01:20:47,635
And the most important thing    
about cellForRowAt is you need  

1861
01:20:47,637 --> 01:20:52,340
to know what's at that row,     
which thing in my database is   

1862
01:20:52,342 --> 01:20:55,642
at that row in that             
section in my table.            

1863
01:20:55,644 --> 01:20:59,780
And you get that by asking the  
fetchedResultsController with   

1864
01:20:59,782 --> 01:21:01,514
this method objectAtIndexPath.  

1865
01:21:01,516 --> 01:21:03,883
So you just say                 
fetchedResultsController,       

1866
01:21:03,885 --> 01:21:07,586
give me the object, and that    
object is gonna be a tweet, or  

1867
01:21:07,588 --> 01:21:10,322
a Twitter user, or              
whatever, some entity.          

1868
01:21:10,324 --> 01:21:12,657
Give me an object               
at the index path               

1869
01:21:12,659 --> 01:21:16,261
that cellForRowAt               
indexPath is asking me for.     

1870
01:21:16,263 --> 01:21:18,696
So now I have the Twitter       
user or the tweet,              

1871
01:21:18,698 --> 01:21:20,031
I can easily load up my UI.     

1872
01:21:20,033 --> 01:21:23,967
You know, pass it off to my     
UI, custom UITableView cell,    

1873
01:21:23,969 --> 01:21:24,868
or if I have a subtitle cell,   

1874
01:21:24,870 --> 01:21:26,836
just take a couple of           
things out of there and         

1875
01:21:26,838 --> 01:21:29,505
put it in the text label        
in the detailed text label,     

1876
01:21:29,507 --> 01:21:30,239
you see what I'm saying?        

1877
01:21:30,241 --> 01:21:33,575
But you can see that            
the fetchedResultsController,   

1878
01:21:33,577 --> 01:21:36,912
that code in yellow right       
there in the middle of          

1879
01:21:36,914 --> 01:21:38,013
cellForRowAt indexPath,         

1880
01:21:38,015 --> 01:21:41,282
that's doing all the work       
to figure out what tweet or     

1881
01:21:41,284 --> 01:21:44,819
what Twitter user is at this    
row in the table, okay?         

1882
01:21:44,821 --> 01:21:45,853
So those code on                
the last slide and              

1883
01:21:45,855 --> 01:21:48,722
the code on this slide, you'll  
have to type that code in any   

1884
01:21:48,724 --> 01:21:52,225
time you're using               
an NSFetchedResultsController.  

1885
01:21:52,227 --> 01:21:55,061
Now, on the previous slide,     
one of the things was var       

1886
01:21:55,063 --> 01:21:57,430
fetchedResultsController        
equals something.               

1887
01:21:57,432 --> 01:21:59,732
So now let's talk               
about how we create             

1888
01:21:59,734 --> 01:22:02,134
a fetchedResultsController,     
okay?                           

1889
01:22:02,136 --> 01:22:03,802
So this is what                 
the initializer for             

1890
01:22:03,804 --> 01:22:06,604
NSFetchedResultsController      
looks like here.                

1891
01:22:06,606 --> 01:22:08,339
It takes a request, a context.  

1892
01:22:08,341 --> 01:22:10,574
Obviously, it doesn't           
know what database              

1893
01:22:10,576 --> 01:22:11,441
we're fetching in.              

1894
01:22:11,443 --> 01:22:14,544
And then it's got               
a sectionNameKeyPath.           

1895
01:22:14,546 --> 01:22:18,715
That sectionNameKeyPath         
is the var in                   

1896
01:22:18,717 --> 01:22:23,452
that entity that,               
whose value is a string,        

1897
01:22:23,454 --> 01:22:27,690
which is the title of           
the section it's in, okay?      

1898
01:22:27,692 --> 01:22:30,258
That's how you do sections      
with fetchedResultsController.  

1899
01:22:30,260 --> 01:22:33,395
You just have to, and you       
might have to invent this or    

1900
01:22:33,397 --> 01:22:33,928
even calculate this.            

1901
01:22:33,930 --> 01:22:37,164
But all of your tweets or all   
your Twitter users, if they're  

1902
01:22:37,166 --> 01:22:39,566
gonna be in sections,           
they all have to have a var,    

1903
01:22:39,568 --> 01:22:43,003
which is a string, which is     
the section they're in, okay,   

1904
01:22:43,005 --> 01:22:44,471
the name of the section         
they're in.                     

1905
01:22:44,473 --> 01:22:48,708
And as long as they have that,  
then the fetchedResults will,   

1906
01:22:48,710 --> 01:22:49,842
will make the sections and      

1907
01:22:49,844 --> 01:22:52,277
put them all in there           
in the right section.           

1908
01:22:52,279 --> 01:22:55,580
And we'll talk about            
cacheName in a second here.     

1909
01:22:55,582 --> 01:22:57,816
So we have to create            
a fetchRequest to put in here.  

1910
01:22:57,818 --> 01:23:00,385
So here's an example of         
creating a fetchRequest for     

1911
01:23:00,387 --> 01:23:00,785
tweets, right?                  

1912
01:23:00,787 --> 01:23:02,619
So you recognize that           
first line there,               

1913
01:23:02,621 --> 01:23:04,454
creating a fetchRequest for     
tweets.                         

1914
01:23:04,456 --> 01:23:08,858
And I'm gonna sort by when      
the tweets were created, okay,  

1915
01:23:08,860 --> 01:23:10,193
when the tweet                  
was tweeted out.                

1916
01:23:10,195 --> 01:23:14,830
And I'm gonna look for all the  
tweets whose tweeter's name     

1917
01:23:14,832 --> 01:23:17,800
equals some name,               
the name, okay?                 

1918
01:23:17,802 --> 01:23:19,301
So it's gonna get all           
those tweets, and               

1919
01:23:19,303 --> 01:23:22,203
I'm gonna set that request      
as the first argument there,    

1920
01:23:22,205 --> 01:23:23,404
to NSFetchedResultsController.  

1921
01:23:23,406 --> 01:23:26,640
By the way, notice              
NSFetchedResultsController is   

1922
01:23:26,642 --> 01:23:30,678
also a generic type, and        
NSFetchedResultsController can  

1923
01:23:30,680 --> 01:23:33,046
only control fetches for        
a certain type.                 

1924
01:23:33,048 --> 01:23:35,648
So you have to say what type,   
okay, what type of entity that  

1925
01:23:35,650 --> 01:23:38,651
your FetchController is doing,  
and these are the same type of  

1926
01:23:38,653 --> 01:23:41,587
things that are in              
the rows of your table.         

1927
01:23:41,821 --> 01:23:43,855
Now that cacheName at           
the bottom is interesting.      

1928
01:23:43,857 --> 01:23:47,625
That is actually going to       
permanently cache the results.  

1929
01:23:47,627 --> 01:23:47,692
it's gonna get the results      
out of the database and         

1930
01:23:47,694 --> 01:23:49,727
In other words,                 

1931
01:23:49,729 --> 01:23:54,498
store on disk the result        
in some internal format.        

1932
01:23:54,500 --> 01:23:56,833
And that's cool, and            
that storage, by the way,       

1933
01:23:56,835 --> 01:23:57,801
if you quit your app and        
come back,                      

1934
01:23:57,803 --> 01:24:00,970
it will still use that cache,   
so it's quite efficient.        

1935
01:24:00,972 --> 01:24:02,571
But you have to be              
a little bit careful.           

1936
01:24:02,573 --> 01:24:05,541
You cannot change anything      
about your request.             

1937
01:24:05,543 --> 01:24:08,377
As soon as you change anything  
about your request, like        

1938
01:24:08,379 --> 01:24:11,846
the name, the tweeter.name      
that you're searching for, or   

1939
01:24:11,848 --> 01:24:13,815
what you're sorting by,         
or anything.                    

1940
01:24:13,817 --> 01:24:16,517
Now that cache is invalid, and  
you'll have to invalidate that  

1941
01:24:16,519 --> 01:24:20,120
cache, okay, and there's an     
API in there for doing that.    

1942
01:24:20,122 --> 01:24:22,856
You can pass nil there if you   
don't wanna do the caching,     

1943
01:24:22,858 --> 01:24:27,193
which for most reasonable       
sized datasets perfectly fine,  

1944
01:24:27,195 --> 01:24:28,561
you don't really                
need the caching.               

1945
01:24:28,563 --> 01:24:30,496
But I just wanna emphasize      
that if you change your         

1946
01:24:30,498 --> 01:24:33,499
request, your cache             
is now invalid.                 

1947
01:24:33,501 --> 01:24:36,968
And about that section key      
thing, something to be careful  

1948
01:24:36,970 --> 01:24:40,939
about there, too, is that       
whatever your sortDescriptors   

1949
01:24:40,941 --> 01:24:45,209
say that your rows would        
sort in, that has to be         

1950
01:24:45,211 --> 01:24:50,514
exactly the same order that     
your sections was sorted in.    

1951
01:24:50,516 --> 01:24:52,483
In other words,                 
the FetchedResultsController    

1952
01:24:52,485 --> 01:24:54,851
doesn't know how to             
like move things around         

1953
01:24:54,853 --> 01:24:57,387
because they sort out of        
order of their sections.        

1954
01:24:57,389 --> 01:24:59,355
That's why a lot of times       
that we're doing sections,      

1955
01:24:59,357 --> 01:25:03,893
the first sortDescriptor will   
be sort by the section key      

1956
01:25:03,895 --> 01:25:04,860
name var, right?                

1957
01:25:04,862 --> 01:25:07,062
And then the second one         
will be sort by what we         

1958
01:25:07,064 --> 01:25:09,798
really wanna sort by,           
because we have to make sure    

1959
01:25:09,800 --> 01:25:13,935
that our entire table is        
sorted in section order.        

1960
01:25:14,870 --> 01:25:15,569
You see why?                    

1961
01:25:15,571 --> 01:25:16,803
Cuz otherwise it's just weird,  

1962
01:25:16,805 --> 01:25:19,072
things would all be             
in the wrong places.            

1963
01:25:19,406 --> 01:25:21,107
So                              
keyThatSaysWhichAttributeIsTh-  

1964
01:25:21,109 --> 01:25:24,343
eSectionName has to sort        
in the same order as your       

1965
01:25:24,345 --> 01:25:26,044
sortDescriptors.                

1966
01:25:26,645 --> 01:25:31,716
Okay, now, I told you that      
NSFetchedResultsController      

1967
01:25:31,718 --> 01:25:32,650
watches Core Data.              

1968
01:25:32,652 --> 01:25:35,986
It sees changes happening in    
there, and it updates it.       

1969
01:25:35,988 --> 01:25:37,988
And it does that with           
its delegate, okay?             

1970
01:25:37,990 --> 01:25:39,622
Its delegate wants              
to be the tableView,            

1971
01:25:39,624 --> 01:25:41,057
be the tableViewController,     
rather.                         

1972
01:25:41,059 --> 01:25:43,693
Cuz it's gonna tell             
the tableViewController, and    

1973
01:25:43,695 --> 01:25:44,593
it sends messages like this.    

1974
01:25:44,595 --> 01:25:48,196
So this is a typical            
NSFetchedResultsController      

1975
01:25:48,198 --> 01:25:48,830
delegate method.                

1976
01:25:48,832 --> 01:25:52,567
Controller did change add       
indexPath for change type, and  

1977
01:25:52,569 --> 01:25:54,135
here's the new indexPath.       

1978
01:25:54,137 --> 01:25:57,271
Okay, and these change          
types might be deleted or       

1979
01:25:57,273 --> 01:25:59,806
inserted or                     
modified or whatever.           

1980
01:25:59,808 --> 01:26:03,009
Now, you have to put the code   
in there that would call        

1981
01:26:03,011 --> 01:26:06,446
the right methods on the        
tableView to get the sections   

1982
01:26:06,448 --> 01:26:09,315
inserted or deleted or          
rows added or whatever.         

1983
01:26:09,317 --> 01:26:12,885
But I'm gonna give you that     
code for free, okay, and        

1984
01:26:12,887 --> 01:26:14,853
the demo that I'm               
gonna do on Wednesday,          

1985
01:26:14,855 --> 01:26:18,957
I'm gonna have a class called   
fetchedResultsTableViewContro-  

1986
01:26:18,959 --> 01:26:20,658
ller, which is                  
gonna be a class.               

1987
01:26:20,660 --> 01:26:25,229
And you can make that to        
be the super class of your      

1988
01:26:25,231 --> 01:26:27,564
UITableViewController.          

1989
01:26:27,566 --> 01:26:31,468
And you'll just inherit         
this implementation of          

1990
01:26:31,470 --> 01:26:35,205
the delegate, okay?             

1991
01:26:35,207 --> 01:26:36,973
Yes, cuz that's                 
what I just said.               

1992
01:26:36,975 --> 01:26:40,142
Okay, so when you're using      
core data in UITableView,       

1993
01:26:40,144 --> 01:26:43,212
the things to remember are,     
you're going to subclass        

1994
01:26:43,214 --> 01:26:45,213
fetchedResultsTableViewContro-  
ller,                           

1995
01:26:45,215 --> 01:26:48,083
the thing I'm gonna give you,   
so that you implement           

1996
01:26:48,085 --> 01:26:50,418
NSFetchedResultsController      
delegate.                       

1997
01:26:50,420 --> 01:26:53,754
You're going to add a var to    
your UITableViewController      

1998
01:26:53,756 --> 01:26:56,056
called                          
fetchedResultsController, and   

1999
01:26:56,058 --> 01:26:57,290
you're gonna set                
its value to be                 

2000
01:26:57,292 --> 01:27:00,894
an NSFetchedResultsController   
with the fetchRequest that you  

2001
01:27:00,896 --> 01:27:04,263
want, okay, that you want       
to populate your table.         

2002
01:27:04,265 --> 01:27:07,733
Then you're gonna implement     
your UITableView data source    

2003
01:27:07,735 --> 01:27:10,736
methods using                   
fetchedResultsController var    

2004
01:27:10,738 --> 01:27:13,805
methods, just like I            
showed you in the slides,       

2005
01:27:13,807 --> 01:27:14,706
character for character,        

2006
01:27:14,708 --> 01:27:17,709
you can use the exact same      
things that are on the slide.   

2007
01:27:17,711 --> 01:27:20,578
Okay, and then it's all gonna   
magically work, all you'll      

2008
01:27:20,580 --> 01:27:23,180
have to do is inside your       
cellForRowAt indexPath,         

2009
01:27:23,182 --> 01:27:24,614
you'll have the object,         
the tweet,                      

2010
01:27:24,616 --> 01:27:28,284
or the Twitter user, you        
just gotta load up your UI.     

2011
01:27:28,619 --> 01:27:29,685
After you have                  
all this set up,                

2012
01:27:29,687 --> 01:27:33,355
then you can proceed to using   
the fetchedResultsController    

2013
01:27:33,357 --> 01:27:34,856
in your tableViewController.    

2014
01:27:34,858 --> 01:27:38,126
First thing you have to         
do is perform fetch on          

2015
01:27:38,128 --> 01:27:38,960
the fetchedResultsController.   

2016
01:27:38,962 --> 01:27:43,064
That will cause it to go out    
and do your NSFetchRequest,     

2017
01:27:43,066 --> 01:27:43,597
basically.                      

2018
01:27:43,599 --> 01:27:45,499
It's not gonna pull             
all the data over, but          

2019
01:27:45,501 --> 01:27:48,802
it's going to basically bring   
over, do the same thing as if   

2020
01:27:48,804 --> 01:27:51,270
you had executed                
the fetchRequest yourself, and  

2021
01:27:51,272 --> 01:27:54,407
then you're gonna wanna do      
tableView View.reloadData.      

2022
01:27:54,409 --> 01:27:57,910
And that's because you want     
all of your datasource          

2023
01:27:57,912 --> 01:28:02,280
methods to be called, and you   
know that we've implemented     

2024
01:28:02,282 --> 01:28:06,251
all of them in terms of our     
fetch results controller as     

2025
01:28:06,253 --> 01:28:08,619
showed on the previous          
slides there.                   

2026
01:28:08,621 --> 01:28:11,389
And the only other thing        
you want to remember to do      

2027
01:28:11,391 --> 01:28:14,458
is set your fetch results       
controller's delegate to be     

2028
01:28:14,460 --> 01:28:18,562
yourself and, again, we use     
that fetch results table view   

2029
01:28:18,564 --> 01:28:21,498
controller code that added      
the delegate methods for        

2030
01:28:21,500 --> 01:28:25,201
the fetch results controller    
to the UITableView controller   

2031
01:28:25,203 --> 01:28:28,704
until we can do all the things  
that is necessary to            

2032
01:28:28,706 --> 01:28:31,907
be a fetchedResultsController   
delegate.                       

2033
01:28:31,909 --> 01:28:35,043
And what that buys you is       
that anytime in the database    

2034
01:28:35,045 --> 01:28:37,912
changes that would affect       
the NSFetchedRequest            

2035
01:28:37,914 --> 01:28:41,249
that you wired up to your       
fetchedResultsController.       

2036
01:28:41,251 --> 01:28:44,418
Then, it will use that          
delegate to ask the table view  

2037
01:28:44,420 --> 01:28:46,487
to update the rows or           
sections,                       

2038
01:28:46,489 --> 01:28:48,422
whatever happened to change.    

2039
01:28:48,424 --> 01:28:51,024
So let me talk a little bit     
about what's coming up here,    

2040
01:28:51,026 --> 01:28:54,460
on Wednesday, I'm gonna do a    
big demo that shows you all of  

2041
01:28:54,462 --> 01:28:55,861
this stuff, as usual.           

2042
01:28:55,863 --> 01:28:57,730
Assignment five is              
going out on Wednesday,         

2043
01:28:57,732 --> 01:28:58,630
it'll be due                    
the next Wednesday.             

2044
01:28:58,632 --> 01:29:02,500
It's going to be to add Core    
Data stuff to your Smashtag.    

2045
01:29:02,502 --> 01:29:07,939
On Friday,                      
very relevant section.          

2046
01:29:07,941 --> 01:29:11,442
It's using CloudKit             
to do a database.               

2047
01:29:11,444 --> 01:29:14,178
Okay?                           
Now, Core Data and CloudKit,    

2048
01:29:14,180 --> 01:29:16,813
what, what are they,            
how are they related?           

2049
01:29:16,815 --> 01:29:18,281
Well, Core Data is for          

2050
01:29:18,283 --> 01:29:21,084
doing things that you would do  
with a relational database,     

2051
01:29:21,086 --> 01:29:24,220
these powerful queries and      
searches and things like that.  

2052
01:29:24,222 --> 01:29:27,189
Cloud Kit is, what if you       
wanted to have a database       

2053
01:29:27,191 --> 01:29:29,491
on the network,                 
in the cloud, okay?             

2054
01:29:29,493 --> 01:29:33,161
A network that's being shared   
between multiple people or      

2055
01:29:33,163 --> 01:29:35,029
even by a single                
person on multiple,             

2056
01:29:35,031 --> 01:29:36,964
on multiple of their devices,   
or whatever.                    

2057
01:29:36,966 --> 01:29:39,733
So there quite different in     
the way they approach things.   

2058
01:29:39,735 --> 01:29:43,904
In Core Data, we do the schema  
using this visual mapper.       

2059
01:29:43,906 --> 01:29:47,974
In CloudKit, it's essentially   
schema on the fly.              

2060
01:29:47,976 --> 01:29:50,309
As you start saving vars,       

2061
01:29:50,311 --> 01:29:53,846
it starts making this           
schema up for you, so           

2062
01:29:53,848 --> 01:29:56,682
it's a very different kind      
of way of thinking about.       

2063
01:29:56,684 --> 01:29:59,451
You don't think of it from      
a scheme of design point.       

2064
01:29:59,453 --> 01:30:03,188
In advance, there's kind of     
more organic as you go and      

2065
01:30:03,190 --> 01:30:03,454
also you don't have to,         

2066
01:30:03,456 --> 01:30:06,323
you know, kind of create this   
whole scheme of front and       

2067
01:30:06,325 --> 01:30:09,393
describe it, you can describe   
it as you use it essentially.   

2068
01:30:09,395 --> 01:30:13,697
So it's a very interesting      
comparison between the two.     

2069
01:30:13,699 --> 01:30:15,331
I wish I had time               
to do CloudKit.                 

2070
01:30:15,333 --> 01:30:16,966
Last quarter,                   
I had the extra lectures.       

2071
01:30:16,968 --> 01:30:18,901
I was able to do CloudKit       
as a whole lecture but,         

2072
01:30:18,903 --> 01:30:22,738
we'll have to do it as          
a Friday section this week so,  

2073
01:30:22,740 --> 01:30:23,905
don't miss that.                

2074
01:30:23,907 --> 01:30:25,740
Next Monday is a holiday.       

2075
01:30:25,742 --> 01:30:27,608
So no lecture and               
then next Wednesday,            

2076
01:30:27,610 --> 01:30:29,110
I'm gonna go over               
your requirements for           

2077
01:30:29,112 --> 01:30:30,778
the final project,              
which are required to do.       

2078
01:30:30,780 --> 01:30:35,048
And I'm also gonna have a       
lecture as well on AutoLayout.  

2079
01:30:35,050 --> 01:30:37,717
We'll finally get               
to Autolayout and               

2080
01:30:37,719 --> 01:30:40,687
how do that Autolayout stuff.   

2081
01:30:40,689 --> 01:30:42,722
I'd say, I just wanted          
to show you that and            

2082
01:30:42,724 --> 01:30:45,024
I will see you                  
all on Wednesday.               

2083
01:30:45,026 --> 01:30:45,057
>> For more please visit        
us on Stanford.edu.             

