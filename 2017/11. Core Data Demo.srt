1
00:00:00,001 --> 00:00:04,036
[MUSIC]                         

2
00:00:04,038 --> 00:00:07,639
Stanford University.            

3
00:00:07,641 --> 00:00:10,275
>> Welcome to Stanford CS193P,  

4
00:00:10,277 --> 00:00:13,445
developing applications for     
iOS.                            

5
00:00:13,447 --> 00:00:15,714
It's winter of 2017.            

6
00:00:15,716 --> 00:00:18,183
This is lecture number 11 and   

7
00:00:18,185 --> 00:00:21,520
today we're gonna do            
one gigantic demo.              

8
00:00:21,522 --> 00:00:24,990
Last time I made you suffer     
through basically doing         

9
00:00:24,992 --> 00:00:25,524
all slides.                     

10
00:00:25,526 --> 00:00:29,728
Now, you get to enjoy all       
demo for the whole time.        

11
00:00:29,730 --> 00:00:32,197
And it's all gonna be about     
Core Data and applying all      

12
00:00:32,199 --> 00:00:35,234
the things that we learned in   
the last lecture into a demo.   

13
00:00:35,236 --> 00:00:37,669
And then we'll be coming        
back to the slides, so          

14
00:00:37,671 --> 00:00:41,240
let me just give you a heads    
up of what's happening here.    

15
00:00:41,242 --> 00:00:44,443
On Friday, we have this         
other database mechanism for    

16
00:00:44,445 --> 00:00:45,611
storing data in iCloud.         

17
00:00:45,613 --> 00:00:49,681
I highly recommen this one,     
at our Friday section,          

18
00:00:49,683 --> 00:00:51,316
normal place and time.          

19
00:00:51,318 --> 00:00:51,817
Monday's a holiday, so          

20
00:00:51,819 --> 00:00:54,219
don't show up here on           
Monday cuz I won't be here.     

21
00:00:54,221 --> 00:00:57,289
And then next Wednesday,        
I'll be going over the final    

22
00:00:57,291 --> 00:01:00,259
project requirements,           
including the rubric, and       

23
00:01:00,261 --> 00:01:02,961
also we'll be doing the topic,  
autolayout.                     

24
00:01:02,963 --> 00:01:08,400
Now, your assignment            
five has been                   

25
00:01:08,402 --> 00:01:13,639
posted already,                 
and it's due one                

26
00:01:13,641 --> 00:01:18,710
week from today                 
before lecture.                 

27
00:01:18,712 --> 00:01:22,681
So here's Smashtag              
from last week.                 

28
00:01:22,683 --> 00:01:26,118
Remember we have this one MVC   
where we type in a search       

29
00:01:26,120 --> 00:01:28,487
string, #Stanford or            
whatever else,                  

30
00:01:28,489 --> 00:01:30,923
and it pulls down               
a bunch of tweets.              

31
00:01:30,925 --> 00:01:33,992
Now we're just gonna            
add another MVC,                

32
00:01:33,994 --> 00:01:34,760
a core data driven MVC.         

33
00:01:34,762 --> 00:01:39,064
And when this MVC is gonna      
show all the Twitter users who  

34
00:01:39,066 --> 00:01:43,635
tweeted all the tweets that     
are showing in this MVC         

35
00:01:43,637 --> 00:01:43,902
right here.                     

36
00:01:43,904 --> 00:01:47,272
So, if you type a certain       
search term like #Stanford,     

37
00:01:47,274 --> 00:01:48,640
Stanford gets                   
a bunch of tweets.              

38
00:01:48,642 --> 00:01:50,442
And then there's gonna          
be a button on this MVC,        

39
00:01:50,444 --> 00:01:51,877
we're gonna put it              
up in the title bar,            

40
00:01:51,879 --> 00:01:53,946
we're gonna show you            
how to do that as well.         

41
00:01:53,948 --> 00:01:54,780
And you're gonna                
click that button.              

42
00:01:54,782 --> 00:01:57,549
It's gonna bring a new MVC      
with all the users, and         

43
00:01:57,551 --> 00:01:59,852
we'll also put in               
there how many times,           

44
00:01:59,854 --> 00:02:00,953
how many tweets they tweeted.   

45
00:02:00,955 --> 00:02:04,823
When we do that, we're only     
gonna be looking at the tweets  

46
00:02:04,825 --> 00:02:07,459
that are in this result,        
this search result right here,  

47
00:02:07,461 --> 00:02:10,295
or that have ever come from     
typing this search term.        

48
00:02:10,297 --> 00:02:14,433
All right, so this is           
all gonna be core data.         

49
00:02:14,435 --> 00:02:16,268
So we need core                 
data in our app.                

50
00:02:16,270 --> 00:02:19,571
When we built Smashtag we       
didn't click use core data, so  

51
00:02:19,573 --> 00:02:22,641
we're gonna have to go through  
the procedures that I talked    

52
00:02:22,643 --> 00:02:27,513
about last time for             
adding core data to our app.    

53
00:02:27,515 --> 00:02:30,449
And we're gonna do that         
by creating a dummy             

54
00:02:30,451 --> 00:02:31,116
app right here.                 

55
00:02:31,118 --> 00:02:32,985
Let's go to New > Project.      

56
00:02:32,987 --> 00:02:34,453
So we're gonna create           
a dummy project,                

57
00:02:34,455 --> 00:02:36,622
you can call this project       
anything you want.              

58
00:02:36,624 --> 00:02:37,856
I'm gonna call it Foo.          

59
00:02:37,858 --> 00:02:42,528
Just make sure that Use Core    
Data is clicked right there.    

60
00:02:42,862 --> 00:02:45,597
We can put it anywhere we want  
cuz we're just gonna turn       

61
00:02:45,599 --> 00:02:46,665
around and                      
delete it in a moment.          

62
00:02:46,667 --> 00:02:49,735
And you can see that it has     
created this dummy project.     

63
00:02:49,737 --> 00:02:51,637
And all we're really            
interested in here is           

64
00:02:51,639 --> 00:02:54,373
the code from the AppDelegate   
that does core data.            

65
00:02:54,375 --> 00:02:57,376
You can see that this           
AppDelegate imports CoreData.   

66
00:02:57,378 --> 00:03:00,445
Now we haven't talked about     
the AppDelegate, and we will.   

67
00:03:00,447 --> 00:03:03,682
It's part of                    
the application lifecycle.      

68
00:03:03,684 --> 00:03:03,815
But, for now,                   

69
00:03:03,817 --> 00:03:06,785
all we need to know is that     
we're gonna go down here and    

70
00:03:06,787 --> 00:03:07,920
get this stuff or core data,    

71
00:03:07,922 --> 00:03:11,056
you recognize this              
from the slides.                

72
00:03:11,058 --> 00:03:15,694
And notice also this            
applicationWillTerminate calls  

73
00:03:15,696 --> 00:03:16,028
saveContext.                    

74
00:03:16,030 --> 00:03:20,165
SaveContext is one of the Core  
Data methods that you get for   

75
00:03:20,167 --> 00:03:20,299
So I'm actually gonna select    
that as well as all the rest    

76
00:03:20,301 --> 00:03:23,635
free here.                      

77
00:03:23,637 --> 00:03:27,239
of this stuff is marked         
Core Data right there.          

78
00:03:27,241 --> 00:03:28,240
And I'm just gonna copy it.     

79
00:03:28,242 --> 00:03:30,609
I'm gonna close this project    
cuz I don't need it.            

80
00:03:30,611 --> 00:03:35,147
And I'm gonna go over to        
the AppDelegate in my Smashtag  

81
00:03:35,149 --> 00:03:35,280
right here.                     

82
00:03:35,282 --> 00:03:38,617
And you can see it doesn't      
import core data right there    

83
00:03:38,619 --> 00:03:38,684
at the top.                     

84
00:03:38,686 --> 00:03:40,652
Nor does                        
applicationWillTerminate call   

85
00:03:40,654 --> 00:03:44,256
SaveContext, nor does it have   
any of other stuff down there.  

86
00:03:44,258 --> 00:03:47,192
So I'm just gonna take that     
code and paste in here.         

87
00:03:47,194 --> 00:03:51,930
And this code is generic,       
it works in all applications.   

88
00:03:51,932 --> 00:03:55,634
The only thing that's specific  
about it is this string right   

89
00:03:55,636 --> 00:03:58,804
here, which tells you the data  
model, the thing that           

90
00:03:58,806 --> 00:04:02,474
describes the schema of your    
object or in a database.        

91
00:04:02,476 --> 00:04:04,943
Now you notice we have          
an error right here, that's     

92
00:04:04,945 --> 00:04:07,579
because it doesn't recognize    
NSPeristentContainer.           

93
00:04:07,581 --> 00:04:12,084
Because NSPeristentContainer    
is in a different framework     

94
00:04:12,086 --> 00:04:13,885
than UIKit, it's in CoreData.   

95
00:04:13,887 --> 00:04:17,456
So every time you're using      
CoreData in a swift file,       

96
00:04:17,458 --> 00:04:21,260
you need to import CoreData or  
it won't recognize in this      

97
00:04:21,262 --> 00:04:26,265
managed object or any of the    
other symbols from core data.   

98
00:04:26,267 --> 00:04:30,102
So that's one thing we have     
to do that we use Core Data     

99
00:04:30,104 --> 00:04:30,135
The other one is actually       
create the data model itself.   

100
00:04:30,137 --> 00:04:33,672
button did.                     

101
00:04:33,674 --> 00:04:35,841
And that we do with             
File > New > File, so           

102
00:04:35,843 --> 00:04:37,009
I'm gonna go File               
> New > File.                   

103
00:04:37,011 --> 00:04:40,846
And we, normally we're picking  
things up here but we're gonna  

104
00:04:40,848 --> 00:04:45,584
scroll down to where it says    
Core Data and pick Data Model.  

105
00:04:45,586 --> 00:04:48,787
We don't want Mapping Model,    
we want Data Model.             

106
00:04:49,022 --> 00:04:51,657
This is just gonna be that      
thing where we describe all     

107
00:04:51,659 --> 00:04:54,159
our entities and attributes.    

108
00:04:54,161 --> 00:04:55,394
And we can call it              
anything we want.               

109
00:04:55,396 --> 00:04:58,363
Just to be kind of different    
I'm gonna call it Smash.        

110
00:04:58,365 --> 00:05:01,600
That's gonna be the name        
of my Data Model.               

111
00:05:01,602 --> 00:05:02,968
And I'm not gonna put           
in Supporting Files.            

112
00:05:02,970 --> 00:05:06,438
I'm gonna put it in             
Smashtag in a higher,           

113
00:05:06,440 --> 00:05:09,841
this level up here and          
click Create.                   

114
00:05:09,843 --> 00:05:10,008
And here it is.                 

115
00:05:10,010 --> 00:05:11,410
You can probably                
recognize this, right?          

116
00:05:11,412 --> 00:05:12,444
This is our entities and        
attributes.                     

117
00:05:12,446 --> 00:05:14,112
We haven't put any              
of them in there.               

118
00:05:14,114 --> 00:05:17,716
Now, since I call this          
Smash and not Foo,              

119
00:05:17,718 --> 00:05:20,752
I've to go back to              
my AppDelegate and              

120
00:05:20,754 --> 00:05:25,524
change this Foo string          
in here to be Smash.            

121
00:05:25,526 --> 00:05:28,660
So I've pretty much now         
reproduced everything that      

122
00:05:28,662 --> 00:05:30,062
the use core data               
button would do.                

123
00:05:30,064 --> 00:05:32,964
The only difference would be    
the use core data would have    

124
00:05:32,966 --> 00:05:34,132
called my xcdatamodeld file.    

125
00:05:34,134 --> 00:05:35,634
It would have                   
called it Smashtag,             

126
00:05:35,636 --> 00:05:40,205
cuz that's the name of my app,  
but I like to call it Smash.    

127
00:05:40,406 --> 00:05:44,343
All right, so now that we have  
this nice data model file,      

128
00:05:44,345 --> 00:05:46,411
let's go ahead and              
create our schema.              

129
00:05:46,413 --> 00:05:50,282
Now, I'm gonna do this really   
quick because I already showed  

130
00:05:50,284 --> 00:05:53,618
you how to do all this          
which you can just watch it     

131
00:05:53,620 --> 00:05:54,386
happening real fast.            

132
00:05:54,388 --> 00:05:58,156
I'm not gonna show you          
anything that I didn't show     

133
00:05:58,158 --> 00:05:59,324
you in the last lecture.        

134
00:05:59,326 --> 00:06:01,993
I'm gonna start by adding       
an entity down here at          

135
00:06:01,995 --> 00:06:02,060
All right, this entity          
I'm going to rename it.         

136
00:06:02,062 --> 00:06:05,664
the bottom.                     

137
00:06:05,666 --> 00:06:09,401
And I'm gonna do tweets and     
Twitter users cuz I'm gonna     

138
00:06:09,403 --> 00:06:12,070
have that table that            
follows Twitter users.          

139
00:06:12,072 --> 00:06:13,939
But obviously those Twitter     
users are determined by         

140
00:06:13,941 --> 00:06:16,274
a bunch of tweets, so           
those are two entities I need.  

141
00:06:16,276 --> 00:06:19,111
So let's put Tweet here first,  
and                             

142
00:06:19,113 --> 00:06:20,212
we'll add attributes for        
the tweet.                      

143
00:06:20,214 --> 00:06:23,315
I'm gonna add them by clicking  
this little plus right here.    

144
00:06:23,317 --> 00:06:27,986
So we have the Text Attribute   
which is a String.              

145
00:06:27,988 --> 00:06:32,524
We have our tweets,             
what if we search for           

146
00:06:32,526 --> 00:06:33,992
#Stanford twice in a row?       

147
00:06:33,994 --> 00:06:35,660
We might get                    
the same tweet back.            

148
00:06:35,662 --> 00:06:37,529
And we want our database        
to have unique tweets,          

149
00:06:37,531 --> 00:06:40,065
we don't wanna every time we    
search we're getting more and   

150
00:06:40,067 --> 00:06:41,700
more of the same                
tweet in there.                 

151
00:06:41,702 --> 00:06:43,635
So I need some sort of unique   

152
00:06:43,637 --> 00:06:46,338
attribute in my database        
which is gonna a string.        

153
00:06:46,340 --> 00:06:50,642
Luckily, the Twitter info       
that comes in the Twitter       

154
00:06:50,644 --> 00:06:52,944
framework, it has a unique      
identifier in there for         

155
00:06:52,946 --> 00:06:55,647
tweets so it'll be              
really easy to set that.        

156
00:06:55,649 --> 00:06:56,715
And I'm not gonna use this but  
for                             

157
00:06:56,717 --> 00:07:01,686
example, if I wanted a created  
attribute it would be a date.   

158
00:07:01,688 --> 00:07:02,120
I would just click Date.        

159
00:07:02,122 --> 00:07:05,690
I'm putting this in here cuz    
I just wanna show you what      

160
00:07:05,692 --> 00:07:07,759
it's like to set                
a date in code.                 

161
00:07:07,761 --> 00:07:08,794
This looks slightly tricky.     

162
00:07:08,796 --> 00:07:09,461
So I'm gonna add another, or    

163
00:07:09,463 --> 00:07:11,696
actually we could look          
here in the Editor Style.       

164
00:07:11,698 --> 00:07:13,832
So this is the exact            
same thing here in              

165
00:07:13,834 --> 00:07:14,833
the Editor Style.               

166
00:07:14,835 --> 00:07:15,300
When you're in Editor Style,    

167
00:07:15,302 --> 00:07:18,036
you're almost always            
gonna have your inspector       

168
00:07:18,038 --> 00:07:21,206
open right here so that you     
can click on things and         

169
00:07:21,208 --> 00:07:23,575
change their types and          
things like that.               

170
00:07:23,577 --> 00:07:26,211
I'm gonna create another        
entity here and it's going to   

171
00:07:26,213 --> 00:07:30,215
be our Twitter user, I'm        
gonna call that Twitter user.   

172
00:07:32,318 --> 00:07:33,585
And notice when I               
move these around,              

173
00:07:33,587 --> 00:07:36,488
it moves it around whatever     
other entities there are.       

174
00:07:36,490 --> 00:07:38,156
And I'm gonna be                
connecting these two and        

175
00:07:38,158 --> 00:07:41,326
creating a relationship, and    
you're gonna see it's gonna     

176
00:07:41,328 --> 00:07:43,829
keep drawing it                 
as we draw there.               

177
00:07:43,963 --> 00:07:45,897
So let's add some               
attributes here.                

178
00:07:45,899 --> 00:07:48,200
So I'm gonna click              
Add Attribute.                  

179
00:07:50,436 --> 00:07:56,308
Sorry.                          

180
00:07:56,310 --> 00:07:59,244
It's not deleting, let's go     
back to Editor Style here.      

181
00:08:03,516 --> 00:08:07,185
By the way, I do notice         
sometimes that when selecting   

182
00:08:07,187 --> 00:08:11,556
things, it's not                
always that great,              

183
00:08:11,558 --> 00:08:12,390
it doesn't do                   
that great a job.               

184
00:08:12,392 --> 00:08:14,993
I'm not sure what it is about   
the data modeler that makes it  

185
00:08:14,995 --> 00:08:16,795
that way, but                   
you'll click on something,      

186
00:08:16,797 --> 00:08:18,630
and it doesn't click            
on that thing,                  

187
00:08:18,632 --> 00:08:20,131
it clicked the entity or        
something else.                 

188
00:08:20,133 --> 00:08:22,267
So there is an example where    
I was clicking on that          

189
00:08:22,269 --> 00:08:24,703
attribute, but                  
it wouldn't let me delete it.   

190
00:08:24,705 --> 00:08:26,571
Here I have Twitter             
user chosen,                    

191
00:08:26,573 --> 00:08:27,672
hopefully add attribute.        

192
00:08:27,674 --> 00:08:29,574
Yes, it adds it to              
the Twitter user.               

193
00:08:29,576 --> 00:08:32,844
The only attributes I'm gonna   
have on my Twitter user         

194
00:08:32,846 --> 00:08:38,683
are the handle, that's your     
@whatever, and then your name.  

195
00:08:39,118 --> 00:08:41,920
And those are both              
going to be strings, so         

196
00:08:41,922 --> 00:08:45,490
we'll go over here and          
make this be of type string.    

197
00:08:45,492 --> 00:08:50,795
And we'll also make             
the handle be type string.      

198
00:08:50,797 --> 00:08:53,298
So that's it for                
the attributes.                 

199
00:08:53,300 --> 00:08:56,334
And the only thing we have      
left to do is the relationship  

200
00:08:56,336 --> 00:08:56,935
between these two.              

201
00:08:56,937 --> 00:08:58,637
And I'm gonna hold              
down Ctrl and                   

202
00:08:58,639 --> 00:09:01,339
drag between                    
the two right here.             

203
00:09:01,341 --> 00:09:05,944
And you see it creates a new    
relationship on both sides.     

204
00:09:05,946 --> 00:09:06,177
But we don't want that,         

205
00:09:06,179 --> 00:09:09,748
the Twitter user here, this     
relationship is the tweets      

206
00:09:09,750 --> 00:09:11,716
that this Twitter               
user has tweeted.               

207
00:09:11,718 --> 00:09:15,887
And for the tweet, this         
relationship is the tweeter,    

208
00:09:16,289 --> 00:09:17,923
the person who tweeted it.      

209
00:09:17,925 --> 00:09:20,659
This tweets relationship right  
here we know is a "too many"    

210
00:09:20,661 --> 00:09:24,396
relationship because a Twitter  
user gonna have multiple        

211
00:09:24,398 --> 00:09:24,896
tweets.                         

212
00:09:24,898 --> 00:09:27,599
That's why get the little       
double arrow there.             

213
00:09:28,601 --> 00:09:31,703
That's our entire data          
model that we need now.         

214
00:09:31,705 --> 00:09:32,737
For your homework assignment,   

215
00:09:32,739 --> 00:09:34,506
you're gonna need               
more things in here.            

216
00:09:34,508 --> 00:09:36,808
This is not gonna be            
sufficient to the task, so      

217
00:09:36,810 --> 00:09:39,311
you're gonna have to            
add some more stuff.            

218
00:09:39,313 --> 00:09:42,847
But for our simple example,     
this is all we need.            

219
00:09:42,849 --> 00:09:46,785
Now, we know that we wanna      
access all this stuff,          

220
00:09:46,787 --> 00:09:50,355
not using value in for          
key and set value for key.      

221
00:09:50,357 --> 00:09:51,289
We wanna have subclasses,       

222
00:09:51,291 --> 00:09:53,391
a subclass called               
TwitterUser and a club,         

223
00:09:53,393 --> 00:09:54,492
subclass called Tweet.          

224
00:09:54,494 --> 00:09:56,094
And we want them to             
have the vars for               

225
00:09:56,096 --> 00:09:58,096
all of these attributes and     
relationships.                  

226
00:09:58,098 --> 00:10:00,932
And so, we need that            
code to be generated.           

227
00:10:00,934 --> 00:10:03,602
And the way we do that is we    
just select the answer to,      

228
00:10:03,604 --> 00:10:06,605
you see I've selected Tweet     
right here, entity Tweet.       

229
00:10:06,607 --> 00:10:08,106
And you go down here            
to Codegen, and                 

230
00:10:08,108 --> 00:10:10,742
this says, by default,          
Class Definition.               

231
00:10:10,744 --> 00:10:12,277
That means that it's done it,   

232
00:10:12,279 --> 00:10:14,713
it has generated a class        
called tweet, and               

233
00:10:14,715 --> 00:10:16,915
it's gonna work with all        
the vars in relationship.       

234
00:10:16,917 --> 00:10:19,250
But that's not                  
actually what we want.          

235
00:10:19,252 --> 00:10:21,753
We want to pick this one,       
where it only                   

236
00:10:21,755 --> 00:10:26,725
creates an extension to tweet   
that add to the vars stuff.     

237
00:10:26,727 --> 00:10:29,260
That's because we wanna         
write the class tweet and       

238
00:10:29,262 --> 00:10:30,662
be able to put our              
own code in there.              

239
00:10:30,664 --> 00:10:34,599
It's very common to one will    
write the class herself         

240
00:10:34,601 --> 00:10:35,233
the main class.                 

241
00:10:35,235 --> 00:10:37,235
But you still want              
the var magic, so               

242
00:10:37,237 --> 00:10:38,870
you want those                  
extensions in there.            

243
00:10:38,872 --> 00:10:41,706
Another thing that I didn't     
really mention in lecture, and  

244
00:10:41,708 --> 00:10:44,209
really, I don't think really    
matters unless you're in        

245
00:10:44,211 --> 00:10:46,711
a workspace like we are,        
you know, we have Twitter and   

246
00:10:46,713 --> 00:10:49,381
smash dot org space, is this    
module name right here.         

247
00:10:49,383 --> 00:10:50,749
If you don't have               
anything in here,               

248
00:10:50,751 --> 00:10:53,652
then it's gonna use a global    
namespace for these classes,    

249
00:10:53,654 --> 00:10:55,954
like tweet, so it's gonna       
call the class tweet.           

250
00:10:55,956 --> 00:10:59,524
But actually, we already        
have a Twitter.tweet, and       

251
00:10:59,526 --> 00:11:01,793
now we're gonna have            
Smashtag.tweet.                 

252
00:11:01,795 --> 00:11:05,997
So we want to change this to    
be current product module.      

253
00:11:05,999 --> 00:11:07,532
So don't forget this.           

254
00:11:07,700 --> 00:11:09,567
Wake up, if you're              
not paying attention.           

255
00:11:09,569 --> 00:11:11,202
If you don't put                
this right here,                

256
00:11:11,204 --> 00:11:13,905
you're likely to                
get tons of errors.             

257
00:11:13,907 --> 00:11:16,107
All kinds of conflicting        
class names,                    

258
00:11:16,109 --> 00:11:19,310
and even if your app builds,    
it won't run.                   

259
00:11:19,312 --> 00:11:20,445
Terrible things will happen,    
so                              

260
00:11:20,447 --> 00:11:21,312
you definitely wanna do this.   

261
00:11:21,314 --> 00:11:24,382
I don't believe you need        
to do this if you're not in     

262
00:11:24,384 --> 00:11:24,449
a workspace.                    

263
00:11:24,451 --> 00:11:26,518
I think if you just             
have an app by itself,          

264
00:11:26,520 --> 00:11:30,288
you can leave that unset,       
and it'll work fine.            

265
00:11:30,456 --> 00:11:33,458
So that, we did that for        
tweet right here, so            

266
00:11:33,460 --> 00:11:35,260
let's do it now for             
Twitter user.                   

267
00:11:35,262 --> 00:11:37,862
Twitter user is default         
in class definition,            

268
00:11:37,864 --> 00:11:40,832
I want that to be extension     
also, and of course,            

269
00:11:40,834 --> 00:11:44,235
I want current                  
product module there.           

270
00:11:44,237 --> 00:11:47,138
So that's all we need to do,    
and behind the scenes,          

271
00:11:47,140 --> 00:11:50,975
Xcode has furiously written     
out this extension to make      

272
00:11:50,977 --> 00:11:51,209
the vars work.                  

273
00:11:51,211 --> 00:11:53,945
But we have said that we're     
gonna write the class.          

274
00:11:53,947 --> 00:11:56,681
So let's do that,               
let's create the class for      

275
00:11:56,683 --> 00:11:57,716
twitter user and for tweets.    

276
00:11:57,718 --> 00:11:59,684
So we're gonna go to            
File > New > File,              

277
00:11:59,686 --> 00:12:03,188
it's just how we create any     
class, it's no different than   

278
00:12:03,190 --> 00:12:07,325
any other class we've created,  
Cocoa Touch Class.              

279
00:12:07,327 --> 00:12:09,160
It's not                        
a TableViewController,          

280
00:12:09,162 --> 00:12:13,531
it's an NSManagedObject, so we  
go down here, it's in somewhat  

281
00:12:13,533 --> 00:12:17,969
alphabetical order, so, or      
is it here, NSManagedObject.    

282
00:12:17,971 --> 00:12:20,872
We know that Twitter user and   
tweet are representing          

283
00:12:20,874 --> 00:12:22,640
the database as                 
NSManagedObjects or             

284
00:12:22,642 --> 00:12:24,876
subclasses thereof,             
which we're creating.           

285
00:12:24,878 --> 00:12:28,947
So we'll create the tweet       
one first and we hit Next.      

286
00:12:28,949 --> 00:12:30,181
It says,                        
where do you wanna put it, and  

287
00:12:30,183 --> 00:12:32,484
we'll put it in the same        
place as everything else.       

288
00:12:32,486 --> 00:12:35,587
And here it is, we know that    
we're gonna have an error here  

289
00:12:35,589 --> 00:12:39,357
immediately once this thing     
gets around to building that,   

290
00:12:39,359 --> 00:12:40,558
and that's                      
the NSManagedObject.            

291
00:12:40,560 --> 00:12:44,395
It's not gonna identify, it's   
not gonna know what that is     

292
00:12:44,397 --> 00:12:47,132
until we say import CoreData.   

293
00:12:47,666 --> 00:12:50,869
Don't forget this little        
piece in your subclass.         

294
00:12:50,871 --> 00:12:54,172
But now we can put anything     
we want inside these curly      

295
00:12:54,174 --> 00:12:57,976
braces, and we're going         
to put a method in there.       

296
00:12:58,244 --> 00:13:02,347
So let's do the same thing      
here for Twitter user.          

297
00:13:03,349 --> 00:13:06,017
Twitter user, in the same way,  

298
00:13:06,019 --> 00:13:09,854
put everything in               
the same place.                 

299
00:13:09,856 --> 00:13:14,092
Here it is,                     
let's import CoreData.          

300
00:13:14,094 --> 00:13:18,229
Now when you're first           
creating your model file and    

301
00:13:18,231 --> 00:13:20,031
you choose that                 
extension thing, and            

302
00:13:20,033 --> 00:13:23,401
hopefully you remember to do    
current project model, and      

303
00:13:23,403 --> 00:13:25,436
all that stuff,                 
the first time you build, and   

304
00:13:25,438 --> 00:13:28,773
I'm gonna build here,           
you might get some errors.      

305
00:13:28,775 --> 00:13:32,177
We didn't get any of the kind   
of errors that you get from     

306
00:13:32,179 --> 00:13:34,612
things being out of whack, but  
if things are out of whack,     

307
00:13:34,614 --> 00:13:37,248
one thing you can do is go      
up to the product menu,         

308
00:13:37,250 --> 00:13:39,417
and clean,                      
just clean everything out.      

309
00:13:39,419 --> 00:13:42,687
That'll cause XCode to          
regenerate those extensions,    

310
00:13:42,689 --> 00:13:42,987
for example.                    

311
00:13:42,989 --> 00:13:47,425
You can even hold down Option   
when you go to the Product      

312
00:13:47,427 --> 00:13:49,527
menu and                        
then Clean Build Folder.        

313
00:13:49,529 --> 00:13:52,297
And that will clean out         
all your drive data and         

314
00:13:52,299 --> 00:13:54,899
rebuild absolutely everything.  

315
00:13:54,901 --> 00:13:55,567
So, those are options.          

316
00:13:55,569 --> 00:13:57,535
And sometimes those             
are options just to do anytime  

317
00:13:57,537 --> 00:14:00,238
something's kinda not           
really working right.           

318
00:14:00,240 --> 00:14:02,373
Now we do have some errors,     
though, let's click and         

319
00:14:02,375 --> 00:14:04,642
see what this error             
is right here.                  

320
00:14:04,644 --> 00:14:04,909
What is this saying?            

321
00:14:04,911 --> 00:14:08,546
It's saying cannot convert      
value tweet to specified        

322
00:14:08,548 --> 00:14:09,814
value tweet.                    

323
00:14:09,816 --> 00:14:12,617
Can anyone see what might be    
the problem with this line      

324
00:14:12,619 --> 00:14:13,818
of code right here?             

325
00:14:16,822 --> 00:14:18,656
>> Exactly.                     

326
00:14:18,658 --> 00:14:22,660
Yes, this is saying tweet,      
it doesn't know which one we    

327
00:14:22,662 --> 00:14:26,331
want, twitter.tweet or          
the smashtag.tweet.             

328
00:14:26,333 --> 00:14:30,568
So we have to, in Swift, fully  
specify which one we want.      

329
00:14:30,570 --> 00:14:34,205
So this one is                  
the twitter.tweet from our      

330
00:14:34,207 --> 00:14:34,772
old code.                       

331
00:14:34,774 --> 00:14:35,573
And once we fix that,           

332
00:14:35,575 --> 00:14:41,045
then now it knows what we're    
talking about and all is well.  

333
00:14:42,481 --> 00:14:42,714
All right, so                   

334
00:14:42,716 --> 00:14:45,650
now we've really got our core   
data stuff all ready to go.     

335
00:14:45,652 --> 00:14:50,455
We've got the classes, we've    
got our data model explained,   

336
00:14:50,457 --> 00:14:51,055
all that stuff.                 

337
00:14:51,057 --> 00:14:59,898
What we're gonna do next is     
have our main MVC right here,   

338
00:14:59,900 --> 00:15:04,002
Every time it fetches tweets,   

339
00:15:04,004 --> 00:15:11,542
we're gonna have it put         
that tweet in the database.     

340
00:15:11,544 --> 00:15:14,178
Once it loads up the database,  
then we can build this other    

341
00:15:14,180 --> 00:15:15,980
MVC that will query             
the database.                   

342
00:15:15,982 --> 00:15:18,082
So this is gonna be kind        
of the loading one.             

343
00:15:18,084 --> 00:15:19,217
That's gonna be                 
the querying one.               

344
00:15:19,219 --> 00:15:23,054
Now, I might be quite           
tempted to add this code to     

345
00:15:23,056 --> 00:15:26,190
TweetTableViewController.sw-    
ift.                            

346
00:15:26,192 --> 00:15:29,060
Remember the thing we spent     
the last lecture doing all      

347
00:15:29,062 --> 00:15:29,594
this wonderful stuff?           

348
00:15:29,596 --> 00:15:32,297
This would be an obvious        
place, for example in search    

349
00:15:32,299 --> 00:15:34,432
for tweets where I'm            
getting the tweets back,        

350
00:15:34,434 --> 00:15:37,802
this would be an obvious place  
to load up the database.        

351
00:15:37,804 --> 00:15:40,605
However, I don't                
wanna do that here.             

352
00:15:40,607 --> 00:15:42,807
And why don't I                 
wanna do that here?             

353
00:15:42,809 --> 00:15:45,343
Because I have                  
a perfectly good tweet          

354
00:15:45,345 --> 00:15:49,681
table view controller here,     
an awesome MVC, very reusable.  

355
00:15:49,683 --> 00:15:52,684
You give it a search term,      
it'll load up with tweets.      

356
00:15:52,686 --> 00:15:54,018
I don't really wanna            
pollute it and                  

357
00:15:54,020 --> 00:15:58,056
make it non-reusable by tying   
it to my data model here,       

358
00:15:58,058 --> 00:16:00,892
by making it                    
a core data thing.              

359
00:16:01,193 --> 00:16:05,096
So how do I resolve that        
conundrum where I wanna keep    

360
00:16:05,098 --> 00:16:05,363
this thing reusable,            

361
00:16:05,365 --> 00:16:08,499
but I still need to put         
this stuff in the database?     

362
00:16:08,501 --> 00:16:12,837
The answer is, I'm gonna        
subclass this controller.       

363
00:16:12,839 --> 00:16:16,207
I'm gonna make another MVC      
that is going to inherit        

364
00:16:16,209 --> 00:16:19,344
all the capabilities of         
this nice generic one, and      

365
00:16:19,346 --> 00:16:21,145
add the core data stuff.        

366
00:16:21,714 --> 00:16:25,616
So I'm just gonna               
go File > New File.             

367
00:16:25,618 --> 00:16:29,687
Cocoa Touch class, I'm gonna    
make it not a subclass of any   

368
00:16:29,689 --> 00:16:33,424
iOS class, but a subclass of    
TweetTableViewController.       

369
00:16:33,426 --> 00:16:35,693
This is my nice                 
generic reusable one,           

370
00:16:35,695 --> 00:16:36,794
I'm gonna make this             
a subclass of that.             

371
00:16:36,796 --> 00:16:41,733
I'm gonna call it               
SmashTweetTableViewController.  

372
00:16:41,735 --> 00:16:44,569
Cuz it uses my                  
smash data model.               

373
00:16:44,571 --> 00:16:47,071
So I'm just gonna create that,  
here we go,                     

374
00:16:47,073 --> 00:16:50,375
put it in the same place        
as always other things.         

375
00:16:50,377 --> 00:16:50,608
I mean we're gonna just delete  
all these code out here.        

376
00:16:50,610 --> 00:16:52,810
Here it is,                     

377
00:16:52,812 --> 00:16:56,180
I always do that just to make   
it clearer to you what I'm      

378
00:16:56,182 --> 00:16:57,815
actually adding                 
in this things.                 

379
00:16:57,817 --> 00:17:01,052
So I have this                  
SmashTweetTableViewController   

380
00:17:01,054 --> 00:17:04,455
and I can go to my story        
board for example and           

381
00:17:04,457 --> 00:17:06,357
select this controller.         

382
00:17:06,359 --> 00:17:06,758
And go to Identity,             

383
00:17:06,760 --> 00:17:09,560
and instead of making it        
a TweetTableViewController,     

384
00:17:09,562 --> 00:17:13,664
I'm gonna make it a             
SmashTweetTableViewController.  

385
00:17:13,666 --> 00:17:16,534
So now, this is going to        
do all the things that          

386
00:17:16,536 --> 00:17:17,902
TweetTableViewController does,  

387
00:17:17,904 --> 00:17:21,539
plus anything I put             
in this sub class.              

388
00:17:21,541 --> 00:17:24,475
Now, unfortunately, we didn't   

389
00:17:24,477 --> 00:17:28,613
get all the way to designing    
our generic reusable one,       

390
00:17:28,615 --> 00:17:31,082
so that it was really nice and  
subclassable.                   

391
00:17:31,084 --> 00:17:34,052
Specifically, it will be        
really hard to subclass search  

392
00:17:34,054 --> 00:17:39,023
for tweets and then get inside  
here, in this closure and       

393
00:17:39,025 --> 00:17:40,892
do something when               
these tweets happen.            

394
00:17:40,894 --> 00:17:44,062
So I'm gonna make my generic    
TweetTableViewController        

395
00:17:44,064 --> 00:17:45,029
a little more subclassable.     

396
00:17:45,031 --> 00:17:48,299
What I'm gonna do is take       
this code right here and        

397
00:17:48,301 --> 00:17:50,168
make a little                   
method out of it,               

398
00:17:50,170 --> 00:17:53,171
insert tweets I'm               
gonna call it.                  

399
00:17:54,206 --> 00:17:58,276
Okay, I'm just gonna create a   
new method called insertTweets  

400
00:17:58,278 --> 00:18:02,413
that's gonna do what that       
code I just cut out there is,   

401
00:18:02,415 --> 00:18:03,347
we'll put it up here.           

402
00:18:03,349 --> 00:18:08,252
Func insertsTweets,             
it can take some new tweets     

403
00:18:08,254 --> 00:18:12,590
which is gonna be in            
array of Twitter.tweet.         

404
00:18:12,592 --> 00:18:15,660
It's gonna have that same code  
in there, obviously I don't     

405
00:18:15,662 --> 00:18:18,863
need this weak self business    
here, because I'm not inside    

406
00:18:18,865 --> 00:18:22,200
the closure here, and           
it's going to do it.            

407
00:18:23,035 --> 00:18:25,903
I'm gonna leave this            
essentially internal,           

408
00:18:25,905 --> 00:18:27,905
remember that in                
default internal,               

409
00:18:27,907 --> 00:18:30,942
which means it can be           
overwritten or called.          

410
00:18:30,944 --> 00:18:31,676
If I made that private,         

411
00:18:31,678 --> 00:18:35,079
subclasses would not be         
able to overwrite it.           

412
00:18:35,081 --> 00:18:38,449
Unfortunately there's nothing   
like protected in Swift where   

413
00:18:38,451 --> 00:18:41,452
it's like subclassers can       
override it but people can't    

414
00:18:41,454 --> 00:18:45,223
call it, unfortunately there's  
no such thing as that.          

415
00:18:45,225 --> 00:18:49,026
All right, so we have to leave  
this internal and but now       

416
00:18:49,028 --> 00:18:53,397
I can take this method in my    
subclass here and override it.  

417
00:18:53,399 --> 00:18:55,766
So I just put it here and       
say override, so                

418
00:18:55,768 --> 00:18:58,603
Swift knows that I'm            
overriding this thing.          

419
00:18:58,605 --> 00:19:01,839
Then I'm gonna let              
Super do its work.              

420
00:19:03,142 --> 00:19:07,745
And then I'm going to           
call a method on myself.        

421
00:19:08,747 --> 00:19:17,155
updateDatabase(with             
newTweets), all right?          

422
00:19:17,157 --> 00:19:21,692
And that's going to update my   
database, so I'm gonna have     

423
00:19:21,694 --> 00:19:26,831
a private func here called      
updateDatabase (with tweets),   

424
00:19:26,833 --> 00:19:29,066
it's gonna be a Twitter.tweet.  

425
00:19:29,068 --> 00:19:35,239
Sorry, I keep hitting this      
tiny button right there.        

426
00:19:35,241 --> 00:19:39,477
That's just going to put        
these tweets into Core Data.    

427
00:19:39,479 --> 00:19:43,114
And of course it's complaining  
because import Twitter and      

428
00:19:43,116 --> 00:19:45,249
I'm starting using              
Twitter now.                    

429
00:19:45,251 --> 00:19:45,349
I might as well put it now      
import CoreData because this    

430
00:19:45,351 --> 00:19:48,352
By the way,                     

431
00:19:48,354 --> 00:19:51,088
SmashTweetTableViewController   
is obviously is                 

432
00:19:51,090 --> 00:19:54,592
going to be doing a lot of      
core data stuff as well.        

433
00:19:54,594 --> 00:19:55,793
Everyone see what I did there?  

434
00:19:55,795 --> 00:19:59,297
I just subclass this and        
I'm putting all my smash tag,   

435
00:19:59,299 --> 00:20:01,966
smash core data stuff           
into this subclass, so          

436
00:20:01,968 --> 00:20:05,570
that the super class            
remains completely generic.     

437
00:20:05,572 --> 00:20:08,806
I just had to make my           
super class a little            

438
00:20:08,808 --> 00:20:10,942
more subclassible.              

439
00:20:11,276 --> 00:20:11,909
Now, as with any MVC,           

440
00:20:11,911 --> 00:20:14,712
we want to think about          
the model of this SmashTable,   

441
00:20:14,714 --> 00:20:18,282
SmashTweetTableViewController,  
of course it's going to         

442
00:20:18,284 --> 00:20:20,384
inherit the model               
of its super class.             

443
00:20:20,386 --> 00:20:23,321
But I'm also gonna              
add a model here,               

444
00:20:23,323 --> 00:20:25,590
which is the database to use.   

445
00:20:25,592 --> 00:20:30,628
And I'm gonna do it by passing  
in a PersistentContainer.       

446
00:20:30,630 --> 00:20:34,765
Now normally we probably want   
this to be the app delegate     

447
00:20:34,767 --> 00:20:38,236
view, the app delegate          
persistence container.          

448
00:20:38,238 --> 00:20:41,205
But I wanna allow people        
who are using my MVC,           

449
00:20:41,207 --> 00:20:42,373
to use any database they want.  

450
00:20:42,375 --> 00:20:44,709
I don't wanna force them to     
use that app delegate one.      

451
00:20:44,711 --> 00:20:48,946
Having said that, I am gonna    
have the default value of       

452
00:20:48,948 --> 00:20:50,615
this, go ahead and be that.     

453
00:20:50,617 --> 00:20:56,420
So I'm gonna say                
(UIApplication.shared.delegate  

454
00:20:56,422 --> 00:21:01,559
as?,                            
AppDelegate)?.persistentConta-  

455
00:21:01,561 --> 00:21:02,260
iner.                           

456
00:21:02,262 --> 00:21:04,395
That's just                     
the default value but           

457
00:21:04,397 --> 00:21:05,663
this is a non-private var, so   

458
00:21:05,665 --> 00:21:09,300
I'm using this ViewController   
could set the container and     

459
00:21:09,302 --> 00:21:12,403
cause it to show things         
in a certain database.          

460
00:21:12,405 --> 00:21:15,539
That is essentially my model,   
my model is this database.      

461
00:21:15,541 --> 00:21:18,175
All this class does though      
is write to the database,       

462
00:21:18,177 --> 00:21:20,711
it's just updating              
the database.                   

463
00:21:20,713 --> 00:21:25,216
All its UI it inherits from     
the super class which is non    

464
00:21:25,218 --> 00:21:26,851
database oriented.              

465
00:21:26,853 --> 00:21:29,420
So how do we update             
this database?                  

466
00:21:29,422 --> 00:21:29,754
What do we need to do?          

467
00:21:29,756 --> 00:21:33,658
Well, one thing is, I don't     
really wanna update this thing  

468
00:21:33,660 --> 00:21:34,692
on the main queue, because,     

469
00:21:34,694 --> 00:21:38,229
I don't know if my super class  
might fetch a thousand tweets.  

470
00:21:38,231 --> 00:21:40,831
And do I really wanna be        
blocking the main queue while   

471
00:21:40,833 --> 00:21:42,867
I go write a thousand           
tweets into my database?        

472
00:21:42,869 --> 00:21:47,305
No way, so I'm gonna take my    
container right here, and       

473
00:21:47,307 --> 00:21:52,610
I'm going to ask it to perform  
something on a background       

474
00:21:52,612 --> 00:21:53,044
thread.                         

475
00:21:53,046 --> 00:21:56,347
A background queue, and you     
can see, here's the argument,   

476
00:21:56,349 --> 00:21:58,683
it's a closure and              
it takes one argument.          

477
00:21:58,685 --> 00:22:00,318
I double-clicked on it there,   

478
00:22:00,320 --> 00:22:03,187
I'm gonna use trailing          
closure syntax even.            

479
00:22:03,189 --> 00:22:04,155
So this one argument            
right here.                     

480
00:22:04,157 --> 00:22:08,993
This is the manage object       
context for that other queue,   

481
00:22:08,995 --> 00:22:13,564
the one that I'm allowed        
to use inside here.             

482
00:22:13,566 --> 00:22:14,865
In order to update              
my database.                    

483
00:22:14,867 --> 00:22:17,868
So I'm just gonna use that      
context and put these tweets,   

484
00:22:17,870 --> 00:22:19,670
these new tweets that           
I got right here,               

485
00:22:19,672 --> 00:22:22,373
I'm gonna put them in           
the database one by one.        

486
00:22:22,375 --> 00:22:24,475
I'm just gonna say for          

487
00:22:24,477 --> 00:22:31,048
twitterInfo in this tweets and  
then add tweet.                 

488
00:22:31,450 --> 00:22:34,051
So, how do I do                 
this piece of it.               

489
00:22:34,053 --> 00:22:35,152
How do I add a tweet?           

490
00:22:35,154 --> 00:22:38,656
And by tweet there, I mean      
the tweet in our data model.    

491
00:22:38,658 --> 00:22:39,256
That's what I wanna do.         

492
00:22:39,258 --> 00:22:44,428
Add a tweet in our data model   
that matches this Twitter info  

493
00:22:44,430 --> 00:22:44,595
that I got.                     

494
00:22:44,597 --> 00:22:47,665
All right, so we're gonna       
put the method in tweet in      

495
00:22:47,667 --> 00:22:51,001
our subclass of tweet that      
we created right here,          

496
00:22:51,003 --> 00:22:52,036
that's currently empty.         

497
00:22:52,038 --> 00:22:55,139
We're gonna put a static        
method in there to either go    

498
00:22:55,141 --> 00:22:58,509
out and find a tweet that       
matches that twitter info or    

499
00:22:58,511 --> 00:23:01,078
to create one if                
there's not one there.          

500
00:23:01,080 --> 00:23:03,347
So that way they'll keep being  
unique, because if we get       

501
00:23:03,349 --> 00:23:06,050
the same tweet we'll find it    
and just return the one that's  

502
00:23:06,052 --> 00:23:07,952
already there versus            
creating a new one.             

503
00:23:07,954 --> 00:23:10,821
So I'm gonna call this thing,   

504
00:23:10,823 --> 00:23:14,592
it's gonna be static or         
if its a class,                 

505
00:23:14,594 --> 00:23:19,964
we can say class func           
findOrCreatTweet, matching,     

506
00:23:19,966 --> 00:23:25,903
twitterInfo and that's going    
to be a Twitter.tweet.          

507
00:23:25,905 --> 00:23:27,805
That's the info that's          
gonna be passed into it.        

508
00:23:27,807 --> 00:23:32,376
And I need to know what         
context to go look in, so       

509
00:23:32,378 --> 00:23:38,916
I'm gonna say, in context,      
NSMan, I need some more space,  

510
00:23:38,918 --> 00:23:43,220
MSManagedObjectContext, right   
there.                          

511
00:23:43,222 --> 00:23:46,724
And it's just going             
to return a tweet.              

512
00:23:48,126 --> 00:23:51,495
So this static method, class    
method is just going to go and  

513
00:23:51,497 --> 00:23:53,664
look in the database and        
find this thing and             

514
00:23:53,666 --> 00:23:56,400
if it can find it, then         
it'll just create a new one.    

515
00:23:56,402 --> 00:24:00,304
So, we have to import Twitter,  
(let's get rid of this), and    

516
00:24:00,306 --> 00:24:03,007
so how are we                   
going to do this?               

517
00:24:03,009 --> 00:24:03,307
Well this method,               

518
00:24:03,309 --> 00:24:08,179
pretty straight forward based   
on all you know in Core Data.   

519
00:24:08,181 --> 00:24:12,049
First, I'm going to create      
a fetch request to go find      

520
00:24:12,051 --> 00:24:13,083
this tweet.                     

521
00:24:13,385 --> 00:24:18,589
Le's do that thats easy how     
about let request equal and     

522
00:24:18,591 --> 00:24:21,258
remember I have to statically   
type this actually so           

523
00:24:21,260 --> 00:24:22,893
this is going to be an NS.      

524
00:24:24,996 --> 00:24:26,831
Fetch request.                  

525
00:24:26,833 --> 00:24:28,599
The fetch is what?              

526
00:24:28,601 --> 00:24:29,733
Tweets.                         

527
00:24:29,735 --> 00:24:33,370
So I'm gonna use this           
nice Tweet.fetchRequest         

528
00:24:33,372 --> 00:24:34,171
method to get one.              

529
00:24:34,173 --> 00:24:35,706
So that got me                  
a fetch request.                

530
00:24:35,708 --> 00:24:37,475
A fetch request                 
that's on tweets.               

531
00:24:37,477 --> 00:24:38,976
That's what I have there and    

532
00:24:38,978 --> 00:24:40,845
then I have to have             
a predicate for this.           

533
00:24:40,847 --> 00:24:44,281
So I'm gonna say the request    
predicate this is the thing     

534
00:24:44,283 --> 00:24:48,486
that gonna say which tweets     
do you want in the database?    

535
00:24:48,488 --> 00:24:52,623
So predicate here, and          
which tweets do we want?        

536
00:24:52,625 --> 00:24:55,960
Well, we want a tweet           
where the unique key,           

537
00:24:55,962 --> 00:24:59,463
remember the unique key         
is in our data model,           

538
00:24:59,465 --> 00:25:01,131
I'll be going back to           
this data model often.          

539
00:25:01,133 --> 00:25:03,534
But see here's that             
unique key right there.         

540
00:25:03,536 --> 00:25:07,705
We wanna know when that         
unique key matches what         

541
00:25:07,707 --> 00:25:08,439
the person passed in here.      

542
00:25:08,441 --> 00:25:09,707
The twitter info of             
what they passed in.            

543
00:25:09,709 --> 00:25:16,480
So that's %@", and              
that's twitterInfo.identifier.  

544
00:25:16,482 --> 00:25:19,783
So it turns out identifier      

545
00:25:19,785 --> 00:25:21,519
that in our twitter             
info dot tweet.                 

546
00:25:21,521 --> 00:25:25,356
That's the thing that you need  
for all time for a tweet.       

547
00:25:26,057 --> 00:25:26,557
It's always the same for        

548
00:25:26,559 --> 00:25:28,893
the tweet even if you           
download it multiple times,     

549
00:25:28,895 --> 00:25:29,994
it's always the same.           

550
00:25:29,996 --> 00:25:32,730
Now what about our              
sort predicate here, or         

551
00:25:32,732 --> 00:25:34,532
our sort descriptors rather?    

552
00:25:34,534 --> 00:25:36,400
We actually don't need          
any sort descriptors            

553
00:25:36,402 --> 00:25:40,437
because this better match       
exactly one or zero.            

554
00:25:40,439 --> 00:25:44,608
So you don't need to put zero   
things or one thing in order.   

555
00:25:44,610 --> 00:25:45,643
So you don't need               
a sort descriptor and           

556
00:25:45,645 --> 00:25:48,245
if you don't specify a sort     
descriptor you'll get them      

557
00:25:48,247 --> 00:25:48,746
back in random order.           

558
00:25:48,748 --> 00:25:51,549
But again, we don't care        
what that is because it         

559
00:25:51,551 --> 00:25:54,552
better be zero or one or        
we've got problems.             

560
00:25:54,753 --> 00:25:56,687
So how do I fetch this thing?   

561
00:25:56,689 --> 00:25:59,690
Very easy, I'm just gonna       
say let the matches in          

562
00:25:59,692 --> 00:26:06,196
the database equal              
context.fetch(request).         

563
00:26:06,198 --> 00:26:09,967
Now the only thing about        
this is it throws.              

564
00:26:09,969 --> 00:26:12,469
Cuz it might not be able        
to access the database.         

565
00:26:12,471 --> 00:26:13,737
It could be all kinds           
of problems, whatever.          

566
00:26:13,739 --> 00:26:17,675
So I'm gonna put this in        
a do try, a do catch here.      

567
00:26:17,677 --> 00:26:23,147
So we'll do do and              
put try here.                   

568
00:26:23,149 --> 00:26:26,650
And we'll put catch, (I'll      
talk about what we're gonna do  

569
00:26:26,652 --> 00:26:28,452
when we catch an error there).  

570
00:26:28,454 --> 00:26:29,787
All right, so                   
we got the matches.             

571
00:26:29,789 --> 00:26:33,624
So these matches what's         
the type of this match.         

572
00:26:33,626 --> 00:26:36,060
We got an error here,           
some error.                     

573
00:26:39,164 --> 00:26:39,730
Context.                        

574
00:26:39,732 --> 00:26:40,497
Sorry.                          

575
00:26:40,499 --> 00:26:45,235
NSManageObjectContext.          

576
00:26:45,237 --> 00:26:48,339
So what is the type of          
this matches right here?        

577
00:26:48,341 --> 00:26:49,840
Anyone wanna guess?             

578
00:26:52,143 --> 00:26:55,879
Let's look,                     
it's array of tweets.           

579
00:26:55,881 --> 00:26:57,815
Of course I dispatched.         

580
00:26:57,817 --> 00:27:00,217
I get it back                   
an array of Tweet.              

581
00:27:00,219 --> 00:27:00,618
Excellent.                      

582
00:27:00,620 --> 00:27:04,922
And it should be that           
the matches count               

583
00:27:04,924 --> 00:27:08,626
if it's greater that zero,      
then I found my tweet.          

584
00:27:08,628 --> 00:27:09,994
In fact I can just return it.   

585
00:27:09,996 --> 00:27:12,429
Return matches(0).              

586
00:27:12,431 --> 00:27:14,598
So I found that unique tweet.   

587
00:27:14,600 --> 00:27:17,301
I'm actually gonna put          
an assert here though           

588
00:27:17,303 --> 00:27:21,005
that if the matches.count       
is greater than one,            

589
00:27:21,007 --> 00:27:26,043
then some kind of               
database inconsistency,         

590
00:27:26,045 --> 00:27:30,314
because somehow in              
that unique field               

591
00:27:30,316 --> 00:27:32,783
there's more than one of them   
in there so that will be bad.   

592
00:27:32,785 --> 00:27:38,222
Maybe I'll put the name of      
the method in here tweet dot    

593
00:27:38,857 --> 00:27:43,427
that database inconsistency or  
something like that so,         

594
00:27:43,429 --> 00:27:43,794
I'm putting a little assert.    

595
00:27:43,796 --> 00:27:46,230
Now that should never happen    
if I've written my code         

596
00:27:46,232 --> 00:27:48,699
properly, it should             
never be possible for           

597
00:27:48,701 --> 00:27:49,166
two tweets to get in there.     

598
00:27:49,168 --> 00:27:51,502
There would have to be a bug    
somewhere else in my code,      

599
00:27:51,504 --> 00:27:52,102
that's why I'm asserting here,  

600
00:27:52,104 --> 00:27:56,240
cuz I want it to crash if that  
happens so that I notice it.    

601
00:27:56,242 --> 00:27:59,977
Things aren't being duplicated  
without my knowledge.           

602
00:28:00,245 --> 00:28:02,012
Now what about this             
catch right here?               

603
00:28:02,014 --> 00:28:07,117
What if we tried to do this     
fetch to get those tweets and   

604
00:28:07,119 --> 00:28:07,384
it fails?                       

605
00:28:07,386 --> 00:28:09,720
Some problem with               
the database or something.      

606
00:28:09,722 --> 00:28:11,221
What should we do in here?      

607
00:28:11,223 --> 00:28:16,393
Well, we could fatal error and  
crash.                          

608
00:28:16,395 --> 00:28:17,461
That's what save context does,  

609
00:28:17,463 --> 00:28:20,130
by the way, in the App          
Delegate, it just crash.        

610
00:28:20,132 --> 00:28:23,434
We could look at the error and  
try to figure out what it is,   

611
00:28:23,436 --> 00:28:23,767
things like that.               

612
00:28:23,769 --> 00:28:26,770
But you know, I don't actually  
know what the person who's      

613
00:28:26,772 --> 00:28:30,441
calling this find your          
create tweet wants me to do     

614
00:28:30,443 --> 00:28:31,909
if there's a database error.    

615
00:28:31,911 --> 00:28:33,944
I'm not sure,                   
do they want me to ignore it?   

616
00:28:33,946 --> 00:28:36,046
Do they want me to crash?       

617
00:28:36,048 --> 00:28:37,981
Do they want me to try          
again or something?             

618
00:28:37,983 --> 00:28:38,248
What do they want?              

619
00:28:38,250 --> 00:28:42,853
So when you don't really know   
what your caller wants to do,   

620
00:28:42,855 --> 00:28:47,958
why not just                    
rethrow the error.              

621
00:28:47,960 --> 00:28:51,361
When you rethrow,               
that means this method throws.  

622
00:28:51,363 --> 00:28:56,366
Everyone understand             
what I did there?               

623
00:28:56,368 --> 00:28:58,635
I mean this method              
findOrCreateTweet throw.        

624
00:28:58,637 --> 00:29:02,873
And the only where it throws    
is a rethrows if this           

625
00:29:02,875 --> 00:29:05,375
generates an error.             

626
00:29:05,377 --> 00:29:08,212
So when we call this            
findOrCreateTweet back in our   

627
00:29:08,214 --> 00:29:11,482
other class where we have to    
be careful cuz it throws now.   

628
00:29:11,484 --> 00:29:12,816
So I like to use try.           

629
00:29:14,853 --> 00:29:15,452
But if we get down here,        

630
00:29:15,454 --> 00:29:19,389
then we made it passed here     
without finding a match, so     

631
00:29:19,391 --> 00:29:21,358
here's what we need             
to create the tweet.            

632
00:29:21,360 --> 00:29:23,961
So I'm gonna say let            
tweet equal, and                

633
00:29:23,963 --> 00:29:25,028
how do we create a tweet?       

634
00:29:25,030 --> 00:29:27,431
We just say                     
TweetContext context.           

635
00:29:27,433 --> 00:29:30,734
So that creates a tweet         
in the database.                

636
00:29:30,736 --> 00:29:33,570
Now I can just set the tweet    
fields by setting the vars,     

637
00:29:33,572 --> 00:29:37,174
like the tweets, that's         
actually do that unique first,  

638
00:29:37,176 --> 00:29:38,475
that's important one.           

639
00:29:38,477 --> 00:29:41,879
So that's                       
TwitterInfo.identifier.         

640
00:29:41,881 --> 00:29:43,947
We're gonna make sure we said   
that, if we don't said that,    

641
00:29:43,949 --> 00:29:46,583
then we might start getting     
problems here because every     

642
00:29:46,585 --> 00:29:50,120
body is unique is gonna be      
the same zero or blank,         

643
00:29:50,122 --> 00:29:51,355
either or something.            

644
00:29:51,357 --> 00:29:52,756
How about the tweets text?      

645
00:29:52,758 --> 00:29:59,596
Let's set that to               
the twitterInfo.text.           

646
00:29:59,598 --> 00:30:02,833
Here's created tweet.created.   

647
00:30:02,835 --> 00:30:08,639
That's twitterInfo.created and  

648
00:30:08,641 --> 00:30:13,310
then we'll return the tweet.    

649
00:30:13,312 --> 00:30:16,280
Now, this line over here        
is gonna give us an error,      

650
00:30:16,282 --> 00:30:17,614
as soon as it catches up.       

651
00:30:17,616 --> 00:30:18,949
And this error's                
kinda weird one.                

652
00:30:18,951 --> 00:30:22,886
It says cannot assign           
a value of type 'Date' to       

653
00:30:22,888 --> 00:30:24,254
type 'NSDate?'.                 

654
00:30:24,256 --> 00:30:26,557
And I mentioned on one of       
the slides from last time,      

655
00:30:26,559 --> 00:30:29,927
that in the database,           
dates are NS dates.             

656
00:30:29,929 --> 00:30:33,864
But I also mentioned that       
you can automatically bridge    

657
00:30:33,866 --> 00:30:35,365
a date to an NS date.           

658
00:30:35,367 --> 00:30:37,134
And you can do that with as.    

659
00:30:37,136 --> 00:30:39,369
So I can say as NSDate.         

660
00:30:39,371 --> 00:30:39,770
And that will always work.      

661
00:30:39,772 --> 00:30:43,240
This as will always work as     
long as this Is an NSDate,      

662
00:30:43,242 --> 00:30:46,310
then this as will always work,  
it always can bridge across.    

663
00:30:46,312 --> 00:30:49,546
So this is kind of unfortunate  
that you have to do this for    

664
00:30:49,548 --> 00:30:52,049
your dates, but you do, sorry.  

665
00:30:52,217 --> 00:30:54,618
Okay, there's one more          
thing in tweet, though.         

666
00:30:54,620 --> 00:30:57,187
What's the missing              
thing in tweet?                 

667
00:30:57,189 --> 00:30:59,823
Tweet.tweeter.                  

668
00:30:59,825 --> 00:31:00,691
I've got to set                 
my tweeter here.                

669
00:31:00,693 --> 00:31:03,627
I just created this tweet, I    
gotta set who the tweeter is.   

670
00:31:03,629 --> 00:31:06,697
So to do the tweeter,           
I'm gonna go do this exact      

671
00:31:06,699 --> 00:31:11,034
same method over                
in TwitterUser.                 

672
00:31:11,036 --> 00:31:14,571
So that I can create a Twitter  
user the exact same way.        

673
00:31:14,573 --> 00:31:17,307
So we'll call it find or        
create Twitter user.            

674
00:31:17,309 --> 00:31:20,077
I, kind of pre canned right     
here cuz you're not gonna       

675
00:31:20,079 --> 00:31:21,545
learn anything from             
me typing this,                 

676
00:31:21,547 --> 00:31:26,016
basically this exact            
same thing in again.            

677
00:31:26,018 --> 00:31:27,551
Gotta import twitter.           

678
00:31:27,553 --> 00:31:31,188
But it's exactly the same,      
it has the same exact logic.    

679
00:31:31,190 --> 00:31:32,522
I'm doing exactly               
the same thing.                 

680
00:31:32,524 --> 00:31:33,657
I'm even rethrowing,            

681
00:31:33,659 --> 00:31:36,627
just creating the twitter       
user if I can't find it.        

682
00:31:36,629 --> 00:31:40,097
And for a twitter user, it's    
handle, the person's handle,    

683
00:31:40,099 --> 00:31:43,600
@ whatever,                     
is the unique identifier.       

684
00:31:45,236 --> 00:31:47,004
So now that we know how         
to create a Twitter user        

685
00:31:47,006 --> 00:31:51,174
using that I can say Tweeter    
equals Twitter user.            

686
00:31:51,176 --> 00:31:53,577
Find or there it is,            
finally recognize it.           

687
00:31:53,579 --> 00:31:56,146
Okay, find or                   
create Twitter user, and        

688
00:31:56,148 --> 00:32:00,317
we wanna use the Tweets         
user field, Twitter.            

689
00:32:01,052 --> 00:32:04,888
Lowercase Twitter info dot      
user, that's the user.          

690
00:32:04,890 --> 00:32:08,258
Then we'll do it in             
the same context of course.     

691
00:32:09,460 --> 00:32:13,230
Now this throws, so             
we have to try this.            

692
00:32:13,232 --> 00:32:17,067
And if it can't do it,          
I'm just going to fail again.   

693
00:32:17,069 --> 00:32:21,371
Here maybe I want to maybe      
re-throw again, possibly.       

694
00:32:21,373 --> 00:32:24,741
I might even wanna crash or     
something, I don't know.        

695
00:32:24,743 --> 00:32:26,310
It's not clear to me,           

696
00:32:26,577 --> 00:32:28,879
what to do if I can't           
create the twitter.             

697
00:32:28,881 --> 00:32:32,482
If Tweeter is something         
that has to be set for          

698
00:32:32,484 --> 00:32:35,452
a tweet to make any sense in    
the database, then I probably   

699
00:32:35,454 --> 00:32:38,021
do wanna re-throw or            
do something terrible here.     

700
00:32:38,023 --> 00:32:42,526
But by just saying try,         
instead I'm just giving up,     

701
00:32:42,528 --> 00:32:44,094
okay I'm just not               
setting the tweeter.            

702
00:32:44,096 --> 00:32:48,565
So, there could be tweets that  

703
00:32:48,567 --> 00:32:54,171
are created with                
no tweeter there.               

704
00:32:54,173 --> 00:32:55,639
Twitter user, yeah,             

705
00:32:55,641 --> 00:33:00,177
twitter user doesn't need       
to be an optional there.        

706
00:33:00,179 --> 00:33:02,312
Sorry, I made that              
accidentally.                   

707
00:33:03,247 --> 00:33:05,115
So It's just going to           
return a twitter user.          

708
00:33:05,117 --> 00:33:08,652
And the try makes it into an    
optional twitter user which is  

709
00:33:08,654 --> 00:33:09,553
okay because tweeter,           

710
00:33:09,555 --> 00:33:12,622
this relationship,              
is an optional twitter user.    

711
00:33:12,624 --> 00:33:16,860
It comes out of                 
our data model.                 

712
00:33:18,596 --> 00:33:21,098
So, that's it,                  
that's how we create a tweet.   

713
00:33:21,100 --> 00:33:24,034
We need to use this             
method right here to put        

714
00:33:24,036 --> 00:33:25,235
those tweets in the database.   

715
00:33:25,237 --> 00:33:28,538
So, let's go back to here.      

716
00:33:28,540 --> 00:33:33,043
Let's go to our                 
SmashTweetTableViewController.  

717
00:33:33,045 --> 00:33:37,147
And here, where we wanna add    
the tweets, we'll just say      

718
00:33:37,648 --> 00:33:42,953
Let a Tweet equal               
Tweet.findOrCreateTweet.        

719
00:33:42,955 --> 00:33:45,455
We'll pass it,                  
the Twitter info.               

720
00:33:45,457 --> 00:33:48,925
That's this Twitter info right  
here that was passed to us and  

721
00:33:48,927 --> 00:33:49,359
these Tweets.                   

722
00:33:49,361 --> 00:33:54,798
And in context, we're gonna     
use our containers context.     

723
00:33:57,602 --> 00:33:59,202
Sorry, we're not using          
our container context.          

724
00:33:59,204 --> 00:34:01,705
We're using this                
context right here.             

725
00:34:01,707 --> 00:34:03,306
So we use this little           
context right here.             

726
00:34:03,308 --> 00:34:06,510
Now of course we know this      
thing throws right here.        

727
00:34:06,512 --> 00:34:09,079
So we'll just do try            
question mark here.             

728
00:34:09,081 --> 00:34:12,115
Because here I do know          
that when I'm updating          

729
00:34:12,117 --> 00:34:12,215
if I can't create that tweet,   
I'm just gonna drop it.         

730
00:34:12,217 --> 00:34:15,318
the database,                   

731
00:34:15,320 --> 00:34:18,021
It's not gonna hurt anything    
if just not collecting          

732
00:34:18,023 --> 00:34:18,388
the data it needs too.          

733
00:34:18,390 --> 00:34:20,690
There's really nothing I        
can do about it whatever        

734
00:34:20,692 --> 00:34:23,593
the database error is it's in   
there maybe I could report      

735
00:34:23,595 --> 00:34:26,363
an error to the user and say    
couldn't update data base but   

736
00:34:26,365 --> 00:34:28,432
a lot of times user are like    
what the heck is that.          

737
00:34:28,434 --> 00:34:33,837
So here dropping it             
is probably fine.               

738
00:34:33,839 --> 00:34:36,540
Now notice we have a warning    
here, see this warning?         

739
00:34:36,542 --> 00:34:40,944
It says let tweet equals and    
you never use tweet, and        

740
00:34:40,946 --> 00:34:43,046
in fact I don't                 
wanna use tweet.                

741
00:34:43,048 --> 00:34:46,850
So what do you do in this       
case where I found and          

742
00:34:46,852 --> 00:34:48,919
create this tweet but           
I actually don't want it.       

743
00:34:48,921 --> 00:34:49,453
I don't wanna do anything,      

744
00:34:49,455 --> 00:34:52,155
I just wanted it to get         
created if it wasn't there.     

745
00:34:52,157 --> 00:34:53,990
Well here you can say,          
"Under bar".                    

746
00:34:53,992 --> 00:34:59,262
If you say _ =" something it    
means I'm ignoring the return   

747
00:34:59,264 --> 00:35:00,564
value, which is fine.           

748
00:35:00,566 --> 00:35:03,300
I don't need the return value   
I just want this thing created  

749
00:35:03,302 --> 00:35:06,403
in the database,                
doesn't have to do anything.    

750
00:35:07,405 --> 00:35:09,639
Everybody following me so       
far here?                       

751
00:35:09,641 --> 00:35:11,842
So now we have loaded           
up the database.                

752
00:35:11,844 --> 00:35:13,510
That's it.                      
That's all of the code we need  

753
00:35:13,512 --> 00:35:15,412
to load our database up         
with all these tweets.          

754
00:35:15,414 --> 00:35:19,282
Now let's go ahead and print    
some database statistics here   

755
00:35:19,284 --> 00:35:22,252
just to see if this is          
working before we go off and    

756
00:35:22,254 --> 00:35:24,721
do our UI for a new MBC.        

757
00:35:24,723 --> 00:35:29,259
So I'm gonna say,               
printDatabaseStatistics and     

758
00:35:29,261 --> 00:35:34,030
I'm gonna create a new          
private func here called        

759
00:35:34,032 --> 00:35:37,334
printDatabaseStatistics.        

760
00:35:37,336 --> 00:35:40,103
Copy, paste.                    

761
00:35:40,105 --> 00:35:43,840
And what I want this thing to   
do is tell me how many tweets   

762
00:35:43,842 --> 00:35:46,309
and how many twitter users      
are in the database.            

763
00:35:46,311 --> 00:35:49,412
That's all I                    
wanted to do here.              

764
00:35:49,414 --> 00:35:52,182
So if I wanna do anything       
in the database, if             

765
00:35:52,184 --> 00:35:55,785
I wanna look in the database    
I obviously need a context.     

766
00:35:55,787 --> 00:35:58,121
I have to have a context to     

767
00:35:59,090 --> 00:36:00,557
look inside the database or     
whatever.                       

768
00:36:00,559 --> 00:36:02,058
So what context                 
am I gonna use?                 

769
00:36:02,060 --> 00:36:07,464
I'm gonna say, if I can let     
my let context equal my         

770
00:36:07,466 --> 00:36:10,167
containers?.viewContext.        

771
00:36:10,169 --> 00:36:14,671
Now the viewContext Is          
the mainqueue context for       

772
00:36:14,673 --> 00:36:16,039
this database.                  

773
00:36:16,041 --> 00:36:18,542
So, I'm gonna have              
printDatabaseStatistics.        

774
00:36:18,544 --> 00:36:21,011
It's not inside this closure,   
so                              

775
00:36:21,013 --> 00:36:22,679
it's not gonna                  
use this context.               

776
00:36:22,681 --> 00:36:24,214
We'll have it use               
the main viewContext.           

777
00:36:24,216 --> 00:36:27,551
This is pretty much, unless     
you had it perform background   

778
00:36:27,553 --> 00:36:30,854
tasks, this is pretty much      
the only context you have, so   

779
00:36:30,856 --> 00:36:32,489
we'll have it do on             
the main context.               

780
00:36:32,491 --> 00:36:35,625
So how am I gonna find out      
how many tweets there are?      

781
00:36:35,627 --> 00:36:39,129
Okay, I'm gonna create          
a request and do a fetch.       

782
00:36:39,131 --> 00:36:41,464
So NSFetchRequest.              

783
00:36:41,766 --> 00:36:44,301
And this one is a request for   
tweets.                         

784
00:36:44,303 --> 00:36:46,570
Equals Tweet.fetchRequest.      

785
00:36:46,572 --> 00:36:49,039
So now I got this request,      
the fetch request               

786
00:36:49,041 --> 00:36:53,710
I need no predicate here        
because I want all the tweets.  

787
00:36:53,712 --> 00:36:57,113
If you have no predicate        
that means give me them all.    

788
00:36:57,115 --> 00:37:01,184
So that's what I want, and      
so now I'm just going to        

789
00:37:01,186 --> 00:37:06,289
say here if I can let           
the tweetCount equal            

790
00:37:06,291 --> 00:37:11,795
trying to access the context    
to fetch this request.          

791
00:37:11,797 --> 00:37:13,730
Which it may or                 
not be able to do.              

792
00:37:13,732 --> 00:37:19,302
But if it can then you          
understand what I did there?    

793
00:37:19,503 --> 00:37:22,138
Then I'm going to               
get the count.                  

794
00:37:23,874 --> 00:37:26,943
What's the type of              
that expression?                

795
00:37:28,012 --> 00:37:30,380
Optional array of tweets.       

796
00:37:30,382 --> 00:37:33,350
Because this returns            
an array of tweets if it        

797
00:37:33,352 --> 00:37:36,486
doesn't throw and               
this turns into an optional.    

798
00:37:36,488 --> 00:37:38,922
So this is an optional          
array of tweets.                

799
00:37:38,924 --> 00:37:40,790
Here I'm optional chaining.     

800
00:37:40,792 --> 00:37:44,761
So if that's not new then       
I get to continue and           

801
00:37:44,763 --> 00:37:45,161
get the count.                  

802
00:37:45,163 --> 00:37:48,698
This is just array's count,     
this is a method count in       

803
00:37:48,700 --> 00:37:51,301
array a var for                 
the count in array.             

804
00:37:51,303 --> 00:37:57,574
Now I've got the tweetCount,    
now I'm just gonna say print,   

805
00:37:57,576 --> 00:38:02,479
tweetCount, tweets,             
and that's it.                  

806
00:38:02,481 --> 00:38:05,282
I fetch them all.               

807
00:38:05,284 --> 00:38:09,486
I just fetched every tweet      
in the entire database,         

808
00:38:09,488 --> 00:38:11,221
just to find out how            
many there were.                

809
00:38:11,223 --> 00:38:13,156
What if there's a 100,000       
Tweets in there?                

810
00:38:13,158 --> 00:38:15,558
I'm really gonna fetch and      
that, of course we know that    

811
00:38:15,560 --> 00:38:18,728
it's only gonna fault sum of    
min until I ask for the data.   

812
00:38:18,730 --> 00:38:20,363
So it's not that bad but        

813
00:38:20,365 --> 00:38:22,565
there's a better                
way to do this.                 

814
00:38:22,567 --> 00:38:24,567
By the way here's another,      
before I show that.             

815
00:38:24,569 --> 00:38:27,570
See this request I made this    
separate variable, right here.  

816
00:38:27,572 --> 00:38:29,039
That's not actually necessary.  

817
00:38:29,041 --> 00:38:32,008
I can just take this            
request right here and          

818
00:38:32,010 --> 00:38:33,643
put it right in.                

819
00:38:33,645 --> 00:38:34,644
To here.                        

820
00:38:34,646 --> 00:38:35,178
Watch this.                     

821
00:38:35,180 --> 00:38:39,416
Cut, paste, and                 
get rid of that.                

822
00:38:39,418 --> 00:38:42,652
That's because                  
the fetch method takes          

823
00:38:42,654 --> 00:38:44,220
any kind of fetch request.      

824
00:38:44,222 --> 00:38:48,725
It takes anything whose type    
is a fetchRequest result        

825
00:38:48,727 --> 00:38:50,160
basically, which                
is a protocol.                  

826
00:38:50,162 --> 00:38:52,962
And so I didn't have to         
create that other variable.     

827
00:38:52,964 --> 00:38:55,098
And notice I don't have to      
statically type this because    

828
00:38:55,100 --> 00:38:57,934
this would take anything        
that returns a fetchRequest.    

829
00:38:57,936 --> 00:38:59,169
It'd return something.          

830
00:38:59,171 --> 00:39:01,004
So anyway, so                   

831
00:39:01,006 --> 00:39:03,340
what's the better way to        
do counting right here?         

832
00:39:03,342 --> 00:39:06,109
Is I'm gonna say if             
let tweeterCount, so            

833
00:39:06,111 --> 00:39:10,880
I'll count the tweeters in      
this better way, equals try     

834
00:39:11,315 --> 00:39:15,618
to get the context.count for:   

835
00:39:15,620 --> 00:39:22,992
TwitterUsers.fetchRequest,      
okay, all twitter users.        

836
00:39:23,561 --> 00:39:27,263
Then I can print                
the twitterCount.               

837
00:39:30,434 --> 00:39:35,538
Twitter users.                  

838
00:39:35,540 --> 00:39:38,942
So this method count is         
very much like fetch but        

839
00:39:38,944 --> 00:39:43,213
it doesn't is still kinda       
evaluating this fetch request,  

840
00:39:43,215 --> 00:39:44,013
it's getting the same things.   

841
00:39:44,015 --> 00:39:45,982
In this case we're              
counting users, but             

842
00:39:45,984 --> 00:39:47,717
it's really just                
asking the data base.           

843
00:39:47,719 --> 00:39:53,356
If I were to fetch this,        
how many would you give me?     

844
00:39:53,358 --> 00:39:55,291
So it's all done on             
the database side,              

845
00:39:55,293 --> 00:39:57,827
nothing actually                
has to get fetched.             

846
00:39:58,129 --> 00:39:59,329
So it's just another            
method count.                   

847
00:39:59,331 --> 00:40:02,232
But it does throw, as well,     
in the same was as Fetch does.  

848
00:40:02,234 --> 00:40:03,199
So we still have to do try.     

849
00:40:03,201 --> 00:40:08,138
So this whole expression        
right here, isn't option int.   

850
00:40:08,406 --> 00:40:12,609
So I'm unwrapping it with if    
let, and printing it out.       

851
00:40:14,044 --> 00:40:15,111
Got all that?                   

852
00:40:15,813 --> 00:40:18,148
Let's cross our                 
fingers here that this          

853
00:40:18,150 --> 00:40:20,984
all works that we've got        
all this database learning.     

854
00:40:20,986 --> 00:40:26,322
And we gonna print              
our database                    

855
00:40:26,324 --> 00:40:32,996
statistics and                  
it all gonna work.              

856
00:40:32,998 --> 00:40:39,502
Here we go and this is just     
some junk from IOS there so     

857
00:40:39,504 --> 00:40:41,037
we'll ignore that.              

858
00:40:41,039 --> 00:40:42,772
Right here let's search for     
some.                           

859
00:40:42,774 --> 00:40:45,508
Let's search for,               
how about hash tag stan,        

860
00:40:45,510 --> 00:40:48,144
well let's do hash tag stan,    
yeah, that's a good one.        

861
00:40:48,146 --> 00:40:52,315
All right, it wants to          
use my Twitter account.         

862
00:40:52,317 --> 00:40:55,051
Sure, here it is, and.          

863
00:40:55,053 --> 00:40:58,955
Uh-oh, look on                  
the console there.              

864
00:40:58,957 --> 00:41:02,992
Zero tweets,                    
zero Twitter users.             

865
00:41:04,094 --> 00:41:06,262
Maybe let's pull some more.     

866
00:41:06,264 --> 00:41:10,266
No, it's still zero tweets,     
zero Twitter user.              

867
00:41:10,268 --> 00:41:12,402
Well it's not working.          

868
00:41:12,636 --> 00:41:16,105
Anyone see anything             
in this code for                

869
00:41:16,107 --> 00:41:18,208
why this is not working.?       

870
00:41:19,510 --> 00:41:23,913
Yeah, we're doing a good job    
of loading up that database,    

871
00:41:23,915 --> 00:41:25,982
but we never save it.           

872
00:41:26,317 --> 00:41:29,052
So all that is just             
waste of time,                  

873
00:41:29,054 --> 00:41:33,456
we need to say try,             
context, save.                  

874
00:41:33,458 --> 00:41:34,657
Now again I'm ignoring          
the error here.                 

875
00:41:34,659 --> 00:41:37,460
In a demo a lot of the time I   
use try, question mark because  

876
00:41:37,462 --> 00:41:39,662
I just don't have time          
to do the due catch and         

877
00:41:39,664 --> 00:41:40,864
handle all the errors.          

878
00:41:40,866 --> 00:41:41,798
That's something you should     

879
00:41:41,800 --> 00:41:43,266
be looking at                   
the option of doing.            

880
00:41:43,268 --> 00:41:44,501
So here I'm just                
gonna save and                  

881
00:41:44,503 --> 00:41:46,469
ignore any errors, alright?     

882
00:41:46,471 --> 00:41:48,238
So that should fix it right?    

883
00:41:48,240 --> 00:41:56,779
Let's go see.                   

884
00:41:56,781 --> 00:41:57,947
All right, here we go.          

885
00:41:57,949 --> 00:42:02,952
Hash tag Stanford.              

886
00:42:02,954 --> 00:42:03,620
No.                             

887
00:42:03,622 --> 00:42:04,888
Zero tweet.                     

888
00:42:04,890 --> 00:42:05,922
Zero Twitter users.             

889
00:42:05,924 --> 00:42:08,024
I put that save in there.       

890
00:42:08,026 --> 00:42:08,791
What is going on?               

891
00:42:08,793 --> 00:42:10,827
I had to pull again.            

892
00:42:11,262 --> 00:42:15,064
Look, I pulled and it worked.   

893
00:42:15,066 --> 00:42:16,199
What the heck is going on?      

894
00:42:16,201 --> 00:42:19,269
When I first loaded up          
it said zero tweets and         

895
00:42:19,271 --> 00:42:21,137
then now it's saying 57th.      

896
00:42:21,139 --> 00:42:23,273
Something weird going on here.  

897
00:42:23,275 --> 00:42:24,107
What's happening?               

898
00:42:24,109 --> 00:42:27,810
Well, this is actually          
a multi threading problem.      

899
00:42:27,812 --> 00:42:32,081
Can anyone see the              
multi-threading problem here?   

900
00:42:32,083 --> 00:42:34,083
No?                             
I'm gonna put some print in,    

901
00:42:34,085 --> 00:42:34,350
so you can see it.              

902
00:42:34,352 --> 00:42:41,124
So watch this, print,           
starting database load.         

903
00:42:41,126 --> 00:42:44,327
And then down here, when I'm    
done with the save here,        

904
00:42:44,329 --> 00:42:49,566
I'm gonna just print,           
done loading database.          

905
00:42:50,434 --> 00:42:56,039
And there, so                   

906
00:42:56,041 --> 00:43:02,312
now let's run.                  

907
00:43:02,314 --> 00:43:07,250
All right, hash tag Stanford.   

908
00:43:07,252 --> 00:43:11,754
Got a crash there, database     
inconsistency, interesting.     

909
00:43:11,756 --> 00:43:14,157
So this is why we put           
this inserts in here.           

910
00:43:14,159 --> 00:43:17,393
Asserts in here, so let's       
see why do we think we have     

911
00:43:17,395 --> 00:43:20,163
a data basing                   
consistency here?               

912
00:43:21,966 --> 00:43:22,899
Yeah?                           

913
00:43:28,372 --> 00:43:28,938
>> That's what it is.           

914
00:43:28,940 --> 00:43:31,207
Yes, my search is backwards,    
there.                          

915
00:43:31,209 --> 00:43:33,776
I'm inserting here that         
matches.count == 1.             

916
00:43:33,778 --> 00:43:37,113
So that's why that's crashing,  
okay.                           

917
00:43:37,115 --> 00:43:42,385
Good.                           
Let's                           

918
00:43:42,387 --> 00:43:46,823
go back.                        

919
00:43:46,825 --> 00:43:49,993
Now let's try again,            
hashtag Stanford.               

920
00:43:51,328 --> 00:43:53,863
Let's see what's                
going on down here.             

921
00:43:53,865 --> 00:43:58,968
Starting database load,         
it prints the statistics, and   

922
00:43:58,970 --> 00:44:00,770
then it's done loading.         

923
00:44:00,772 --> 00:44:01,971
That's bad.                     

924
00:44:01,973 --> 00:44:03,106
You see, it's not waiting for   

925
00:44:03,108 --> 00:44:07,143
it to be done loading before    
it prints the statistics.       

926
00:44:07,878 --> 00:44:08,111
You see?                        

927
00:44:08,113 --> 00:44:09,579
Now why is that happening?      

928
00:44:09,581 --> 00:44:14,183
Because we're putting print     
databaseStatistics here after   

929
00:44:14,185 --> 00:44:14,217
downloading.                    

930
00:44:14,219 --> 00:44:16,919
So why isn't it saying          
starting, done,                 

931
00:44:16,921 --> 00:44:18,087
and then printing?              

932
00:44:18,089 --> 00:44:21,691
Because this right here,        

933
00:44:21,693 --> 00:44:26,429
happens on a different queue.   

934
00:44:26,431 --> 00:44:28,131
So the way that                 
this code goes is,              

935
00:44:28,133 --> 00:44:32,335
starting, this execute          
returns immediately.            

936
00:44:32,337 --> 00:44:33,703
Because all it                  
does is put this                

937
00:44:33,705 --> 00:44:37,140
closure onto                    
the background task queue.      

938
00:44:37,142 --> 00:44:38,775
Then this happens.              

939
00:44:38,942 --> 00:44:42,912
Then, this closure starts       
running on that background      

940
00:44:42,914 --> 00:44:45,281
queue, loads up these things.   

941
00:44:45,283 --> 00:44:46,649
And it prints.                  

942
00:44:47,518 --> 00:44:48,685
Do you see what's               
going on there?                 

943
00:44:48,687 --> 00:44:51,054
Everyone understand             
the multi-threading?            

944
00:44:51,056 --> 00:44:54,357
So the way to make this work    
is to take print database       

945
00:44:54,359 --> 00:44:57,627
statistics, and                 
put it inside here.             

946
00:45:00,397 --> 00:45:03,132
All right, cuz now it's not     
going to print the database     

947
00:45:03,134 --> 00:45:05,001
statistics until it's done.     

948
00:45:05,003 --> 00:45:07,236
Now this has a problem though.  

949
00:45:07,238 --> 00:45:08,604
Okay, this is very bad.         

950
00:45:08,606 --> 00:45:11,541
First of all, we're gonna have  
to do, I'm not sure why it's    

951
00:45:11,543 --> 00:45:13,576
not complaining here,           
there we go, now it is.         

952
00:45:13,578 --> 00:45:17,180
It wants to know,               
it wants self dot here, so      

953
00:45:17,182 --> 00:45:21,451
I'm gonna do weak self to       
break that memory cycle.        

954
00:45:21,453 --> 00:45:25,688
Hopefully everyone understands  
that now, what's going on.      

955
00:45:25,690 --> 00:45:25,788
Okay.                           

956
00:45:25,790 --> 00:45:26,956
But that's not                  
the problem here.               

957
00:45:26,958 --> 00:45:28,524
There's an even worse problem.  

958
00:45:28,526 --> 00:45:29,192
And in the interest of time,    

959
00:45:29,194 --> 00:45:34,664
I'm going to put a print down   
in here to show you something.  

960
00:45:35,265 --> 00:45:38,334
If I'm gonna check              
to see if this code             

961
00:45:38,336 --> 00:45:39,769
is running on the main thread.  

962
00:45:39,771 --> 00:45:40,470
So I'm gonna say IF,            

963
00:45:40,472 --> 00:45:45,308
and the way you do that is      
you say thread.ismainthread.    

964
00:45:45,310 --> 00:45:46,943
Okay, if I'm in the main        
thread it'll be true.           

965
00:45:46,945 --> 00:45:50,146
So I'm gonna say                
on main thread.                 

966
00:45:50,148 --> 00:45:56,919
And if it's not true,           
I'm gonna say off main thread.  

967
00:45:56,921 --> 00:46:00,656
So let's see if this            
statistics is happening         

968
00:46:00,658 --> 00:46:01,858
on the main thread or not.      

969
00:46:01,860 --> 00:46:06,195
I think many of you know        
which one it's going to be.     

970
00:46:06,830 --> 00:46:08,297
By looking at the code here.    

971
00:46:08,299 --> 00:46:12,735
All right, here we go again,    
hash tag Stanford.              

972
00:46:12,737 --> 00:46:14,837
Here we go.                     

973
00:46:14,839 --> 00:46:16,672
Off main thread.                

974
00:46:17,407 --> 00:46:18,775
Okay, why is it off             
the main thread?                

975
00:46:18,777 --> 00:46:21,277
Because I called print          
database statistics inside      

976
00:46:21,279 --> 00:46:24,514
this closure, it happens on     
a background thread thus this   

977
00:46:24,516 --> 00:46:27,517
entire method is happening      
off the main thread.            

978
00:46:27,519 --> 00:46:28,885
Now, is that a problem?         

979
00:46:28,887 --> 00:46:34,257
That's a huge problem, because  
what context am I using here?   

980
00:46:34,259 --> 00:46:36,192
The mainQueue context.          

981
00:46:36,360 --> 00:46:38,995
ViewContext is                  
the mainQueue context.          

982
00:46:38,997 --> 00:46:44,000
I cannot be using the           
mainQueue context off the main  

983
00:46:44,002 --> 00:46:44,567
thread.                         

984
00:46:44,569 --> 00:46:46,269
You see the problem here?       

985
00:46:46,271 --> 00:46:49,972
So it worked, but               
could have easily crashed or    

986
00:46:49,974 --> 00:46:51,107
done something terrible.        

987
00:46:51,109 --> 00:46:52,842
So how do we fix that?          

988
00:46:52,844 --> 00:46:55,077
This is where we use            
that method I was telling       

989
00:46:55,079 --> 00:46:56,979
you about in context            
called perform.                 

990
00:46:56,981 --> 00:47:04,287
I'm gonna say context perform   
this code on your safe queue.   

991
00:47:05,189 --> 00:47:10,092
When I say context perform and  
I put this code in there,       

992
00:47:10,094 --> 00:47:12,461
it says to that context,        
do this block but               

993
00:47:12,463 --> 00:47:16,732
whatever you do, do it on       
the right queue for you.        

994
00:47:16,734 --> 00:47:19,101
And since this is               
the view context,               

995
00:47:19,103 --> 00:47:25,875
it's going to be back           
on the main thread,             

996
00:47:25,877 --> 00:47:28,878
watch.                          

997
00:47:28,880 --> 00:47:32,014
Hashtag Stanford.               

998
00:47:32,016 --> 00:47:34,851
Here we go back                 
on main thread.                 

999
00:47:35,285 --> 00:47:38,988
So this perform right           
here is something that          

1000
00:47:38,990 --> 00:47:40,122
a lot of people would advise,   

1001
00:47:40,124 --> 00:47:44,460
always use it unless you're     
Inside one of these where it's  

1002
00:47:44,462 --> 00:47:48,831
clearly using this context      
in this background thing.       

1003
00:47:48,833 --> 00:47:49,131
Any other time,                 

1004
00:47:49,133 --> 00:47:51,200
a lot of people say always      
wrap your calls in this.        

1005
00:47:51,202 --> 00:47:53,769
That way, you'll never have     
a problem where some things     

1006
00:47:53,771 --> 00:47:58,307
being executed on the wrong     
thread, okay, wrong que.        

1007
00:47:59,042 --> 00:47:59,976
Understood all that?            

1008
00:47:59,978 --> 00:48:03,679
A little crash course in core   
data thread safety there.       

1009
00:48:03,681 --> 00:48:06,515
All right, so this is great.    

1010
00:48:06,517 --> 00:48:08,417
We've got our database          
loading up, so                  

1011
00:48:08,419 --> 00:48:09,919
we've got a database            
full of tweets.                 

1012
00:48:09,921 --> 00:48:15,057
Now, we want to add some UI to  
show all this data somehow.     

1013
00:48:15,059 --> 00:48:17,827
So let's go back to our         
storyboard and take a look,     

1014
00:48:17,829 --> 00:48:18,194
what we got here.               

1015
00:48:18,196 --> 00:48:20,763
And what kinda UI               
we're gonna have?               

1016
00:48:20,765 --> 00:48:23,599
Like I said, I'm just gonna     
have another MVC over here      

1017
00:48:23,601 --> 00:48:26,669
that I'm gonna segue to,        
with a little bar button item.  

1018
00:48:26,671 --> 00:48:29,238
So how many of you figured out  
how to use a bar button item    

1019
00:48:29,240 --> 00:48:31,140
as part of your homework        
assignment I think?             

1020
00:48:31,142 --> 00:48:34,443
But if you didn't you're gonna  
see today how to do it, and     

1021
00:48:34,445 --> 00:48:35,077
it's quite simple.              

1022
00:48:35,079 --> 00:48:39,282
So this new MVC that I'm gonna  
segue to, let's go ahead and    

1023
00:48:39,284 --> 00:48:42,551
create an MVC for it,           
Cocoa Touch Class.              

1024
00:48:42,553 --> 00:48:44,420
It is just going                
to be a sub class               

1025
00:48:44,422 --> 00:48:45,521
of UITableViewController.       

1026
00:48:45,523 --> 00:48:49,558
I'm gonna call it               
SmashTweetersTableViewControl-  

1027
00:48:49,560 --> 00:48:51,193
ler, so                         
this is showing tweeters.       

1028
00:48:51,195 --> 00:48:53,195
Remember this table's gonna     
show all the tweeters who       

1029
00:48:53,197 --> 00:48:59,268
tweeted the tweets that         
are in the other MVC.           

1030
00:48:59,270 --> 00:49:02,605
We'll put it up at the,         
not in the Twitter project,     

1031
00:49:02,607 --> 00:49:03,105
that's for sure.                

1032
00:49:03,107 --> 00:49:04,373
Let's put it down here, okay?   

1033
00:49:04,375 --> 00:49:06,442
I always check this list,       
this one here or                

1034
00:49:06,444 --> 00:49:09,078
you end up with files           
all in random places.           

1035
00:49:09,080 --> 00:49:11,614
You don't want that.            

1036
00:49:11,616 --> 00:49:12,381
Here it is.                     
Again,                          

1037
00:49:12,383 --> 00:49:14,817
I'm gonna delete                
all this stuff.                 

1038
00:49:14,819 --> 00:49:15,318
See it's a tableView, so        

1039
00:49:15,320 --> 00:49:18,387
it's got all this UITableView,  
so we don't need any of this    

1040
00:49:18,389 --> 00:49:20,790
stuff as you're                 
gonna see here.                 

1041
00:49:23,460 --> 00:49:27,396
This is our new                 
TableViewController.            

1042
00:49:27,398 --> 00:49:27,863
Let's go ahead and              

1043
00:49:27,865 --> 00:49:30,700
update our storyboard           
to segue to this thing.         

1044
00:49:30,702 --> 00:49:32,068
So we'll go over here.          

1045
00:49:32,070 --> 00:49:35,304
Let's create our bar button     
item to do the segue, so        

1046
00:49:35,306 --> 00:49:37,239
I'm gonna search here for       
button.                         

1047
00:49:37,241 --> 00:49:39,575
You never wanna put             
a button in here,               

1048
00:49:39,577 --> 00:49:44,613
it'll look like it's gonna      
working, but it's not right.    

1049
00:49:44,615 --> 00:49:47,316
Put a bar button in a bar.      

1050
00:49:48,218 --> 00:49:51,620
So we'll call this Tweeter cuz  
that's what it shows, it shows  

1051
00:49:51,622 --> 00:49:55,725
the tweeters that tweeted all   
the tweets in this table.       

1052
00:49:56,026 --> 00:49:59,595
Let's get                       
a TableViewController out,      

1053
00:49:59,597 --> 00:50:03,933
here it is.                     

1054
00:50:03,935 --> 00:50:06,369
TableViewController right       
there.                          

1055
00:50:06,371 --> 00:50:09,405
Lets go ahead and               
segue from this.                

1056
00:50:09,407 --> 00:50:10,439
Ctrl + drag.                    

1057
00:50:10,441 --> 00:50:13,476
Show segue, we're inside        
a navigation controller here.   

1058
00:50:13,478 --> 00:50:18,347
Let's set this segue            
identifier, we'll call this,    

1059
00:50:18,349 --> 00:50:19,015
what did I?                     

1060
00:50:19,017 --> 00:50:19,815
I had a good name for this.     

1061
00:50:19,817 --> 00:50:24,820
Yes, Tweeters                   
Mentioning Search Term.         

1062
00:50:24,822 --> 00:50:25,654
Cuz that's what                 
this segue does.                

1063
00:50:25,656 --> 00:50:29,325
It show the tweeters that       
have mentioned this search      

1064
00:50:29,327 --> 00:50:29,959
term right here.                

1065
00:50:29,961 --> 00:50:34,130
Let's also have our little      
cell here be a subtitle cell.   

1066
00:50:34,132 --> 00:50:35,965
So we'll change                 
that to subtitle.               

1067
00:50:35,967 --> 00:50:38,167
And we need a reuse identifier  
for this cell right here.       

1068
00:50:38,169 --> 00:50:42,738
We'll call this a TwitterUser   
Cell, cuz that's what it is.    

1069
00:50:42,740 --> 00:50:46,776
The Twitter user gonna be       
shown in this cell right here.  

1070
00:50:46,778 --> 00:50:47,510
All right, so that's it.        

1071
00:50:47,512 --> 00:50:50,212
That's our entire UI.           

1072
00:50:50,214 --> 00:50:50,579
Super simple.                   

1073
00:50:50,581 --> 00:50:54,150
All we need to do now is        
implement the guts of           

1074
00:50:54,152 --> 00:50:55,584
this controller right here.     

1075
00:50:55,586 --> 00:50:57,586
So let's go back to that.       

1076
00:50:57,588 --> 00:51:00,122
Here it is right here.          

1077
00:51:00,124 --> 00:51:02,258
Let's talk about                
the public API.                 

1078
00:51:02,260 --> 00:51:03,659
I just really want to get       
in the habit of this.           

1079
00:51:03,661 --> 00:51:07,296
Every time we introduce a new   
MVC, let's talk about it,       

1080
00:51:07,298 --> 00:51:08,397
its public API.                 

1081
00:51:08,399 --> 00:51:10,833
So this                         
SmashTweetersTableViewControl-  

1082
00:51:10,835 --> 00:51:13,135
ler, really has two             
parts in its model.             

1083
00:51:13,137 --> 00:51:17,273
One is, it needs to know the    
mention, the search term that   

1084
00:51:17,275 --> 00:51:21,777
its supposed to be showing      
the Tweeters for, so I'm gonna  

1085
00:51:21,779 --> 00:51:25,714
have, I'll call it mention,     
which is just a string.         

1086
00:51:25,716 --> 00:51:27,983
So that's part of its           
public model, and then,         

1087
00:51:27,985 --> 00:51:30,553
what's the other                
part of its model?              

1088
00:51:31,021 --> 00:51:33,355
The database.                   

1089
00:51:34,024 --> 00:51:36,025
What it does is look            
up in the database and          

1090
00:51:36,027 --> 00:51:38,594
find tweeters who mention       
this in their tweets.           

1091
00:51:38,596 --> 00:51:43,232
So it's gotta have              
an NSPersistentContainer here.  

1092
00:51:43,234 --> 00:51:48,938
By the way, some people,        
import CoreData.                

1093
00:51:48,940 --> 00:51:51,941
Instead of having the database  
represented in the public       

1094
00:51:51,943 --> 00:51:53,476
model here as a container,      

1095
00:51:53,478 --> 00:51:56,245
they might just pass            
the context only.               

1096
00:51:56,247 --> 00:51:58,814
If they pass the context        
only here though,               

1097
00:51:58,816 --> 00:52:00,716
you can't do any                
background stuff.               

1098
00:52:00,718 --> 00:52:03,219
So I like to pass,              
pass the container here.        

1099
00:52:03,221 --> 00:52:06,856
Plus, this whole thing          
is a UI element,                

1100
00:52:06,858 --> 00:52:09,458
so it wants to use              
a view context.                 

1101
00:52:09,460 --> 00:52:12,795
No other context cuz it does    
its stuff all on the main       

1102
00:52:12,797 --> 00:52:13,596
queue, it's a UI.               

1103
00:52:13,598 --> 00:52:16,866
So it's nice when you pass a    
container cuz you're gonna ask  

1104
00:52:16,868 --> 00:52:17,500
for the view context and        

1105
00:52:17,502 --> 00:52:19,702
you know you're getting         
a main queue context.           

1106
00:52:19,704 --> 00:52:22,037
Where if someone passes         
a context in here,              

1107
00:52:22,039 --> 00:52:25,774
could be not be a main queue    
context, that could be bad.     

1108
00:52:25,776 --> 00:52:29,445
So I think a container is a     
good wrapper when you want to   

1109
00:52:29,447 --> 00:52:33,482
tell an MVC this is the         
database to use to do what you  

1110
00:52:33,484 --> 00:52:34,450
do, here it is.                 

1111
00:52:34,452 --> 00:52:39,421
And sure we'll do our little    
trick here where we make        

1112
00:52:39,423 --> 00:52:39,889
a default,                      

1113
00:52:39,891 --> 00:52:43,392
(UIApplication.shared.delegete  
as?                             

1114
00:52:43,394 --> 00:52:48,097
AppDelegate)?.persistentConta-  
iner.                           

1115
00:52:48,099 --> 00:52:54,770
You don't even really have      
to do this but we'll do it.     

1116
00:52:55,238 --> 00:52:59,708
So that's basically             
our model and                   

1117
00:52:59,710 --> 00:53:02,845
anytime our model changes,      

1118
00:53:02,847 --> 00:53:10,119
I'm gonna have a didSet         
here that updates my UI.        

1119
00:53:10,121 --> 00:53:12,655
We'll do the same thing.        

1120
00:53:13,223 --> 00:53:13,756
If I can select it,             

1121
00:53:13,758 --> 00:53:16,692
do the same thing with          
this guy right here.            

1122
00:53:18,128 --> 00:53:22,331
We need a private               
func to do that.                

1123
00:53:23,833 --> 00:53:29,371
So this is our model,           
and it's UI updating.           

1124
00:53:29,373 --> 00:53:32,174
Now before I go implement       
this UI updating,               

1125
00:53:32,176 --> 00:53:33,242
cuz it's pretty                 
straightforward,                

1126
00:53:33,244 --> 00:53:37,313
I'm gonna back to my            
SmashTweetTableViewController,  

1127
00:53:37,315 --> 00:53:39,448
the one that's gathering        
all the statistics,             

1128
00:53:39,450 --> 00:53:42,985
because that's also             
the one I'm segueing from.      

1129
00:53:43,153 --> 00:53:44,853
This smash,                     
this one right here,            

1130
00:53:44,855 --> 00:53:46,255
Smash Tweet Table               
View Controller,                

1131
00:53:46,257 --> 00:53:48,691
I'm segueing from this to       
this using this button.         

1132
00:53:48,693 --> 00:53:50,859
So that's where                 
the prepare needs to be.        

1133
00:53:50,861 --> 00:53:53,062
So I'm gonna put the prepare    
in here for that.               

1134
00:53:53,064 --> 00:53:55,831
So let's put the prepare        
down at the bottom here.        

1135
00:53:55,833 --> 00:54:00,269
prepare (for segue:.            

1136
00:54:00,271 --> 00:54:00,436
Here it is.                     
Now,                            

1137
00:54:00,438 --> 00:54:03,239
I'm gonna go through this       
really fast because you guys    

1138
00:54:03,241 --> 00:54:05,207
surely know prepare             
(for segue: by now.             

1139
00:54:05,209 --> 00:54:09,278
I mean to say if                
the segue:identifier is what    

1140
00:54:09,280 --> 00:54:09,878
I said which is,                

1141
00:54:09,880 --> 00:54:14,216
and again I should make         
a constant here but for speed,  

1142
00:54:14,218 --> 00:54:17,953
so this is Tweeters             
Mentioning Search Term,         

1143
00:54:17,955 --> 00:54:20,589
that's what I                   
called that segue.              

1144
00:54:20,591 --> 00:54:22,625
Then I'm going to               
get the destination.            

1145
00:54:22,627 --> 00:54:27,796
So that is a                    
TweetersTableViewController =   

1146
00:54:27,798 --> 00:54:30,399
segues.destination as?          

1147
00:54:30,401 --> 00:54:34,370
SmashTweetersTableViewControl-  
ler.                            

1148
00:54:34,372 --> 00:54:37,773
And yeah, I could probably do   
ContentViewController here,     

1149
00:54:37,775 --> 00:54:40,576
because if I had that           
extension in here, because      

1150
00:54:40,578 --> 00:54:44,146
maybe I want to put this in     
a split view someday and etc.   

1151
00:54:44,148 --> 00:54:47,049
But first time                  
I won't do that.                

1152
00:54:47,051 --> 00:54:49,518
So now I've got                 
the tweetersTVC.                

1153
00:54:49,520 --> 00:54:51,120
This is my                      
TweetersTableViewController.    

1154
00:54:51,122 --> 00:54:53,389
I'm just gonna set              
its public API.                 

1155
00:54:53,391 --> 00:54:56,091
TweetersTVC.mention.            

1156
00:54:56,093 --> 00:55:00,963
Mention equals my search term.  

1157
00:55:00,965 --> 00:55:04,667
This is the MVC where           
you type the text in so         

1158
00:55:04,669 --> 00:55:05,668
it has search text.             

1159
00:55:05,670 --> 00:55:09,838
And then the                    
tweetersTVC.container equals    

1160
00:55:09,840 --> 00:55:11,006
my container.                   

1161
00:55:11,008 --> 00:55:11,573
I have the same one.            

1162
00:55:11,575 --> 00:55:15,477
The tweeters MVC looking        
in the same database I'm        

1163
00:55:15,479 --> 00:55:15,844
looking in.                     

1164
00:55:15,846 --> 00:55:19,081
So here I am actually           
setting this thing.             

1165
00:55:19,083 --> 00:55:21,750
We got an error here,           
what is it?                     

1166
00:55:21,752 --> 00:55:23,385
Tweeters, okay.                 

1167
00:55:23,387 --> 00:55:26,855
All right, so I'm just          
setting my public model of      

1168
00:55:26,857 --> 00:55:31,960
my Tweeters, not Tweet,         
TweetersTableViewController.    

1169
00:55:31,962 --> 00:55:32,728
SImple enough.                  

1170
00:55:32,730 --> 00:55:36,231
All right, now that we are all  
ready to segue to this nice     

1171
00:55:36,233 --> 00:55:39,768
SmashTableViewController, how   
do we update its UI?            

1172
00:55:39,770 --> 00:55:41,937
How do we get it to             
look in CoreData,               

1173
00:55:41,939 --> 00:55:46,175
find the Twitter users that     
have tweeted something that     

1174
00:55:46,177 --> 00:55:48,844
matches this mention and        
show it?                        

1175
00:55:48,846 --> 00:55:49,878
Well, there's really,           

1176
00:55:49,880 --> 00:55:53,048
we're gonna use NS Fetched      
Results Controller, of course,  

1177
00:55:53,050 --> 00:55:55,084
that's the main deal here.      

1178
00:55:55,086 --> 00:55:57,920
And what are the pieces         
we need to do?                  

1179
00:55:57,922 --> 00:56:00,756
This was the last slide         
from the last lecture.          

1180
00:56:00,758 --> 00:56:04,259
I hope you all remember it,     
it was very recent.             

1181
00:56:04,261 --> 00:56:08,430
First thing is we have to have  
this table-view controller      

1182
00:56:08,432 --> 00:56:11,834
be an                           
NS-fetched-result-controller    

1183
00:56:11,836 --> 00:56:11,867
If you're going to use          
a fetched results controller    

1184
00:56:11,869 --> 00:56:13,569
delegate.                       

1185
00:56:13,571 --> 00:56:16,271
your table needs to be          
the delegate of that fetched    

1186
00:56:16,273 --> 00:56:18,941
controller, and I told you I    
was going to help you out with  

1187
00:56:18,943 --> 00:56:22,745
that and provide that code and  
sure enough I am.               

1188
00:56:22,747 --> 00:56:22,778
It's right here.                

1189
00:56:22,780 --> 00:56:28,550
I'm gonna drag it in            
somewhere, copy it in, yes.     

1190
00:56:29,018 --> 00:56:32,388
All right, and let's take       
a look at it, here it is,       

1191
00:56:32,390 --> 00:56:34,957
FetchedResultsTableViewContro-  
ller.                           

1192
00:56:34,959 --> 00:56:37,359
You can see that it             
is a subclass of                

1193
00:56:37,361 --> 00:56:39,762
UITableViewController that      
implements the                  

1194
00:56:39,764 --> 00:56:42,264
NSFetchedResultsControllerDel-  
egate protocol.                 

1195
00:56:42,266 --> 00:56:45,401
So these are the methods        
right here in our protocol,     

1196
00:56:45,403 --> 00:56:46,568
there are four of them.         

1197
00:56:46,570 --> 00:56:50,606
You can see that it is just     
using table view methods        

1198
00:56:50,608 --> 00:56:51,874
to update the table.            

1199
00:56:51,876 --> 00:56:54,643
These controller methods        
get called whenever the NS      

1200
00:56:54,645 --> 00:56:58,347
Fetched Result Controller       
notices the database change     

1201
00:56:58,349 --> 00:57:01,650
in a way that would affect      
the NS Fetched Result.          

1202
00:57:02,118 --> 00:57:03,585
So this is the magic            
that makes your table           

1203
00:57:03,587 --> 00:57:05,254
automatically update when       
the database changes.           

1204
00:57:05,256 --> 00:57:08,490
You don't have to do anything,  
it just automatically updates.  

1205
00:57:08,492 --> 00:57:09,758
It's because of this delegate.  

1206
00:57:09,760 --> 00:57:13,862
Now, for our thing to work we   
need to be a subclass of this,  

1207
00:57:13,864 --> 00:57:16,165
so that we inherit              
all this stuff.                 

1208
00:57:16,167 --> 00:57:16,398
we're just going to go back     
to our smashTweeters here and   

1209
00:57:16,400 --> 00:57:20,269
So that's easy,                 

1210
00:57:20,271 --> 00:57:21,937
instead of being                
a UITableViewController,        

1211
00:57:21,939 --> 00:57:24,706
I'm gonna be a                  
FetchedResultsTableViewContro-  

1212
00:57:24,708 --> 00:57:27,276
ller, simple.                   

1213
00:57:27,278 --> 00:57:30,145
So, that's the easy             
way to become                   

1214
00:57:30,147 --> 00:57:32,147
a FetchedResultsController      
delegate.                       

1215
00:57:32,149 --> 00:57:33,449
Now, what was the next          
thing we need to do?            

1216
00:57:33,451 --> 00:57:36,485
We have to implement all of     
our UITableViewDataSource       

1217
00:57:36,487 --> 00:57:40,989
Methods using                   
a fetchedResultsController.     

1218
00:57:40,991 --> 00:57:42,324
So there's two parts to that.   

1219
00:57:42,326 --> 00:57:44,893
One is we need to               
create a var, which is          

1220
00:57:44,895 --> 00:57:49,965
a fetchedResultsController      
controller.                     

1221
00:57:49,967 --> 00:57:54,136
It's going to be a type         
NSFetchedResultsController.     

1222
00:57:57,273 --> 00:58:01,877
It's FetchResultsController     
that fetches tweeter users.     

1223
00:58:02,979 --> 00:58:05,514
So FetchResultsController       
is also generic type and        

1224
00:58:05,516 --> 00:58:08,183
you have to say what kind       
of thing does it fetch?         

1225
00:58:08,185 --> 00:58:10,919
So I've got this var,           
how do I implement all          

1226
00:58:10,921 --> 00:58:12,654
those UI table of your data     
source methods as well?         

1227
00:58:12,656 --> 00:58:14,656
Well, I can type them all       
in but you know what,           

1228
00:58:14,658 --> 00:58:17,793
it's exactly the same in every  
single to every single time     

1229
00:58:17,795 --> 00:58:20,863
you implement one of these      
the code is exactly the same    

1230
00:58:20,865 --> 00:58:21,730
because                         
fetchedResultsController        

1231
00:58:21,732 --> 00:58:25,133
always answers those questions  
in exactly the same way.        

1232
00:58:25,135 --> 00:58:25,834
So you could copy and           

1233
00:58:25,836 --> 00:58:28,237
paste it from some other        
half that you've done or        

1234
00:58:28,239 --> 00:58:30,539
you could use this little       
beauty that I've created for    

1235
00:58:30,541 --> 00:58:34,610
you right here, another         
little thing you can drag in,   

1236
00:58:34,612 --> 00:58:35,377
which we'll take a look.        

1237
00:58:35,379 --> 00:58:40,182
Copy that, and                  
this is an extension            

1238
00:58:40,184 --> 00:58:44,887
that you can                    
extend your class.              

1239
00:58:44,889 --> 00:58:45,187
So in this case,                

1240
00:58:45,189 --> 00:58:49,525
it's our smash tweeters         
tableviewController.            

1241
00:58:49,527 --> 00:58:50,292
And in this extension,          

1242
00:58:50,294 --> 00:58:55,330
it adds all the UI tableview    
data source methods.            

1243
00:58:55,999 --> 00:58:56,498
See.                            

1244
00:58:56,500 --> 00:58:58,834
And implements them             
in terms of your                

1245
00:58:58,836 --> 00:58:59,902
fetchresultscontroller.         

1246
00:58:59,904 --> 00:59:03,005
Now, this extension will not    
compile if you do not have      

1247
00:59:03,007 --> 00:59:06,241
a fetch results controller      
because extensions can't add    

1248
00:59:06,243 --> 00:59:09,545
any storage themselves so you   
have to have the storage be in  

1249
00:59:09,547 --> 00:59:13,215
your class but this class does  
have fetch result controller.   

1250
00:59:13,217 --> 00:59:17,152
Now, the one thing it doesn't   
implement here though is        

1251
00:59:17,154 --> 00:59:21,490
cellForRowAt cuz cellForRowAt   
add is specific to whatever     

1252
00:59:21,492 --> 00:59:23,759
data you're showing             
in the table but                

1253
00:59:23,761 --> 00:59:27,930
even cellForRowAt, if we go     
back here and do cellForRowAt,  

1254
00:59:27,932 --> 00:59:32,801
let's do that so cellForRowAt   
index path more with.           

1255
00:59:32,803 --> 00:59:34,369
And, of course,                 
we know how to do that right,   

1256
00:59:34,371 --> 00:59:39,408
let the cell equal to           
tableView deque this one,       

1257
00:59:39,410 --> 00:59:45,280
and the Identifier was          
"TwitterUser Cell" I believe,   

1258
00:59:45,282 --> 00:59:46,214
correct me if I'm wrong.        

1259
00:59:46,216 --> 00:59:49,618
And we want IndexPath there,    
so I got the cell, and          

1260
00:59:49,620 --> 00:59:51,119
we return the cell.             

1261
00:59:51,121 --> 00:59:51,386
And in between,                 

1262
00:59:51,388 --> 00:59:56,058
I need to load the cell up      
with its various information.   

1263
00:59:56,060 --> 00:59:59,027
Now we set our cell to be,      
if you remember,                

1264
00:59:59,029 --> 01:00:00,596
a Subtitle cell, right?         

1265
01:00:00,598 --> 01:00:02,097
This is a Subtitle cell.        

1266
01:00:02,099 --> 01:00:05,667
So we can set its TextLabel     
and its detailTextLabel.        

1267
01:00:05,669 --> 01:00:07,970
So let's just start with        
just the TextLabel.             

1268
01:00:07,972 --> 01:00:13,208
So I wanna set                  
the cell.textLabels Text,       

1269
01:00:13,210 --> 01:00:18,647
basically equal to              
the twitter uses handle.        

1270
01:00:18,649 --> 01:00:23,051
But I have to get the twitter   
user that's in this row.        

1271
01:00:23,353 --> 01:00:25,721
Okay, how do I find             
the twitter user                

1272
01:00:25,723 --> 01:00:26,154
that's in the role?             

1273
01:00:26,156 --> 01:00:29,358
I'm gonna ask my fetch          
results controller.             

1274
01:00:29,360 --> 01:00:32,561
Let the twitter                 
user in this role,              

1275
01:00:32,563 --> 01:00:37,299
in this row, equal my           
fetch results controller        

1276
01:00:37,533 --> 01:00:39,668
which might be null             
cuz it's an optional.           

1277
01:00:39,670 --> 01:00:44,473
Object(at: indexPath).          

1278
01:00:44,475 --> 01:00:48,944
And since this could be nil     
because this could be nil       

1279
01:00:48,946 --> 01:00:55,517
right here let's do if let,     
then we will update our cell.   

1280
01:00:56,819 --> 01:00:58,920
Now if we didn't have           
a fetchedResultsController,     

1281
01:00:58,922 --> 01:01:01,223
by the way, if this were nil,   
our number of rows and          

1282
01:01:01,225 --> 01:01:02,958
sections would be               
zero all the time.              

1283
01:01:02,960 --> 01:01:03,558
This would never be called.     

1284
01:01:03,560 --> 01:01:05,994
So we can even put              
an exclamation point here.      

1285
01:01:05,996 --> 01:01:07,596
And maybe we should put         
an exclamation point here       

1286
01:01:07,598 --> 01:01:10,298
because this should never       
be called if this is nil.       

1287
01:01:10,300 --> 01:01:13,735
But anyway, so it's this very   
simple method, object)at:,      

1288
01:01:13,737 --> 01:01:16,872
is gonna return you             
the thing of the type           

1289
01:01:16,874 --> 01:01:18,974
that it's controlling,          
which is Twitter user.          

1290
01:01:18,976 --> 01:01:20,075
And if we look at               
the type here,                  

1291
01:01:20,077 --> 01:01:23,779
you can see that's a Twitter    
user that goes at this          

1292
01:01:23,781 --> 01:01:24,112
index path.                     

1293
01:01:24,114 --> 01:01:25,580
So that row and that section.   

1294
01:01:25,582 --> 01:01:26,448
So it could not be easier.      

1295
01:01:26,450 --> 01:01:28,917
And now we can just, in here,   
update whatever you or          

1296
01:01:28,919 --> 01:01:30,519
I want, no matter how           
complicated it is.              

1297
01:01:30,521 --> 01:01:32,487
We've got the Twitter user      
that's showing there, so        

1298
01:01:32,489 --> 01:01:35,490
we can his handle,              
his username, whatever else.    

1299
01:01:35,492 --> 01:01:38,727
We wanna get on him and         
put it in there.                

1300
01:01:39,896 --> 01:01:41,797
Everybody got that?             

1301
01:01:41,799 --> 01:01:42,064
Super simple, and               

1302
01:01:42,066 --> 01:01:45,233
yes it is super simple that's   
what's great about in fetch     

1303
01:01:45,235 --> 01:01:48,270
results controller is that      
really the amount of code we    

1304
01:01:48,272 --> 01:01:51,540
actually had to write           
here is absolutely tiny.        

1305
01:01:51,542 --> 01:01:55,110
Now, there is one piece         
left which is update UI so      

1306
01:01:55,112 --> 01:01:58,447
when someone sets our           
mention or sets our database,   

1307
01:01:58,449 --> 01:02:02,784
we need to create a fetch       
results controller, obviously.  

1308
01:02:02,786 --> 01:02:04,152
Just can't be nil               
all the time,                   

1309
01:02:04,154 --> 01:02:06,855
we actually have to create      
one and we're just gonna say,   

1310
01:02:06,857 --> 01:02:12,294
fetchResultsController = a new  

1311
01:02:12,296 --> 01:02:18,567
NSFetchedResultsController,     
which is for Twitter users.     

1312
01:02:19,736 --> 01:02:24,039
And we will use this            
constructor right here.         

1313
01:02:24,041 --> 01:02:26,074
I'll go ahead and               
separate this out so            

1314
01:02:26,076 --> 01:02:28,543
you can see a little better     
what the arguments are.         

1315
01:02:28,545 --> 01:02:31,379
Let me see from                 
this slide as well.             

1316
01:02:32,415 --> 01:02:34,282
So what are the four            
things we need?                 

1317
01:02:34,284 --> 01:02:37,586
We need a request,              
I'll make a request.            

1318
01:02:37,588 --> 01:02:40,922
We need a context,              
I'll make a context.            

1319
01:02:40,924 --> 01:02:45,861
We need the name of             
the var in TwitterUser,         

1320
01:02:45,863 --> 01:02:47,662
that says this section title.   

1321
01:02:47,664 --> 01:02:49,664
Well, we don't have any         
sections all our Twitter users  

1322
01:02:49,666 --> 01:02:51,533
are gonna be shown in           
one big like long list,         

1323
01:02:51,535 --> 01:02:53,802
so that's nil and               
we won't cache our results.     

1324
01:02:53,804 --> 01:02:57,539
Although we could, because      
we're never gonna change this   

1325
01:02:57,541 --> 01:03:00,408
request--well, actually         
that's not true.                

1326
01:03:00,410 --> 01:03:02,244
We could change this            
because someone might           

1327
01:03:02,246 --> 01:03:04,446
bring up this MVC and           
then change the mention and     

1328
01:03:04,448 --> 01:03:06,815
that would be changing the      
request to look for different   

1329
01:03:06,817 --> 01:03:09,417
twitter users so it's better    
not to catch this beside        

1330
01:03:09,419 --> 01:03:12,254
the results are hopefully       
gonna be fairly small.          

1331
01:03:12,256 --> 01:03:14,523
So I have to do a request       
in context here.                

1332
01:03:14,525 --> 01:03:15,023
Let's do context first.         

1333
01:03:15,025 --> 01:03:19,895
I'm gonna say if I can let my   
context equal my containers     

1334
01:03:21,864 --> 01:03:22,597
View context.                   

1335
01:03:22,599 --> 01:03:25,700
Now, this is very               
important right here to use     

1336
01:03:25,702 --> 01:03:28,703
view context because            
this is a Ui thing.             

1337
01:03:28,705 --> 01:03:31,406
And this fetch results          
controller is gonna be working  

1338
01:03:31,408 --> 01:03:34,009
with our table view             
controller, that's all UI so    

1339
01:03:34,011 --> 01:03:35,944
we wanna do this all            
in the main queue.              

1340
01:03:35,946 --> 01:03:39,047
So, you have to                 
use view context.               

1341
01:03:39,049 --> 01:03:41,550
You cannot do that              
background thing                

1342
01:03:41,552 --> 01:03:42,751
to create your                  
FetchResultController.          

1343
01:03:42,753 --> 01:03:46,288
All right, so all that leaves   
is this request here so         

1344
01:03:46,290 --> 01:03:49,858
I'm gonna let the request       
it's obviously going to         

1345
01:03:49,860 --> 01:03:53,829
be an NSFetchRequest for        
Twitter users.                  

1346
01:03:55,064 --> 01:03:57,399
And we use this nice            
convenience thing here          

1347
01:03:57,401 --> 01:04:01,570
TwitterUser.FetchRequest and    
so what does our request need?  

1348
01:04:01,572 --> 01:04:05,173
Well, our request needs         
sort descriptors, so            

1349
01:04:05,175 --> 01:04:08,376
we're gonna have to have some   
array of sort descriptors.      

1350
01:04:08,378 --> 01:04:10,912
Our request also                
needs a predicate.              

1351
01:04:10,914 --> 01:04:18,119
Predicate.                      

1352
01:04:18,121 --> 01:04:25,660
Whoops, gotta get format        
right here, this one.           

1353
01:04:26,295 --> 01:04:28,897
We're gonna have to have some   
format string there, and        

1354
01:04:28,899 --> 01:04:32,133
then some args for              
the percent at signs.           

1355
01:04:32,135 --> 01:04:33,735
So let's do this sort           
descriptor first.               

1356
01:04:33,737 --> 01:04:36,204
We're looking for all the       
Twitter users who have tweeted  

1357
01:04:36,206 --> 01:04:38,373
something that mentioned        
that search for a minute.       

1358
01:04:38,375 --> 01:04:42,210
Let's order them by their       
handle, at sign whatever.       

1359
01:04:42,212 --> 01:04:47,048
So all we need to do then is    
say, NSSortDescriptor with and  

1360
01:04:47,050 --> 01:04:49,050
we'll use the one               
with the key.                   

1361
01:04:49,052 --> 01:04:55,790
It's not, it's going to         
make me type it, arg.           

1362
01:04:55,792 --> 01:05:02,097
So we'll do the key handle and  
we'll do ascending true.        

1363
01:05:02,099 --> 01:05:04,232
That's good enough, we'll just  
have it sort however it sorts.  

1364
01:05:04,234 --> 01:05:06,935
We'll come back to sorting      
later and look at it.           

1365
01:05:06,937 --> 01:05:09,104
We only need one sort           
descriptor we're not gonna      

1366
01:05:09,106 --> 01:05:10,372
sort by the a handle and        

1367
01:05:10,374 --> 01:05:12,807
then subsort by something else  
because the handle will be      

1368
01:05:12,809 --> 01:05:16,378
sufficient sorting in there,    
and what about our predicate?   

1369
01:05:16,380 --> 01:05:19,047
What tweeter users              
are we looking for here?        

1370
01:05:19,049 --> 01:05:22,150
This is really the key to       
making anything work and for    

1371
01:05:22,152 --> 01:05:22,584
your homework by the way,       

1372
01:05:22,586 --> 01:05:28,390
really this homework it's       
not a lot of programming.       

1373
01:05:28,392 --> 01:05:29,958
It's a lot of thinking.         

1374
01:05:29,960 --> 01:05:32,193
Especially designing            
your schema so                  

1375
01:05:32,195 --> 01:05:36,998
that this line of code right    
here is really simple.          

1376
01:05:37,000 --> 01:05:39,100
If you design your schema       
properly you can make           

1377
01:05:39,102 --> 01:05:39,267
this quite simple.              

1378
01:05:39,269 --> 01:05:42,837
It's all about thinking about   
what am I actually showing,     

1379
01:05:42,839 --> 01:05:45,273
and how do I calculate          
what those things are.          

1380
01:05:45,275 --> 01:05:49,377
In this case I'm showing        
all the Twitter users.          

1381
01:05:49,512 --> 01:05:56,651
Any of the twitter users        
here whose tweets,              

1382
01:05:56,653 --> 01:06:00,422
the text in their tweets        
actually, contains, and         

1383
01:06:00,424 --> 01:06:04,726
we'll go case insensitively,    
that search term.               

1384
01:06:04,728 --> 01:06:05,527
Our mention.                    

1385
01:06:05,529 --> 01:06:07,762
Which is optional, so           
we'd better unwrap.             

1386
01:06:07,764 --> 01:06:10,231
And if I'm gonna                
unwrap this forcibly,           

1387
01:06:10,233 --> 01:06:14,402
I'm actually going to check     
to make sure it's not nil.      

1388
01:06:15,871 --> 01:06:18,940
Just to be careful there.       

1389
01:06:19,475 --> 01:06:21,242
So this is                      
the predicate we want.          

1390
01:06:21,244 --> 01:06:23,678
We want any Twitter user.       

1391
01:06:23,680 --> 01:06:24,913
Because we're looking for       
Twitter users,                  

1392
01:06:24,915 --> 01:06:28,950
any Twitter user who's tweets,  
any of their tweets,            

1393
01:06:28,952 --> 01:06:34,456
texts contains this mention.    

1394
01:06:34,458 --> 01:06:34,556
This is actually,               

1395
01:06:34,558 --> 01:06:37,225
I probably said that            
a little bit wrong there.       

1396
01:06:37,227 --> 01:06:39,928
We're looking for               
any Twitter user who have any   

1397
01:06:39,930 --> 01:06:43,798
of it's tweets text             
contains this mention.          

1398
01:06:43,800 --> 01:06:46,868
Off of any, means here,         
anything, any of the tweets     

1399
01:06:46,870 --> 01:06:53,541
texts contains this, then       
show this twitter user here.    

1400
01:06:54,810 --> 01:06:55,910
Everybody got all that?         

1401
01:06:55,912 --> 01:06:58,913
So now, I got my fetch          
request controller,             

1402
01:06:58,915 --> 01:07:01,416
remember the only two things    
I need to do now is to          

1403
01:07:01,418 --> 01:07:06,054
try to have my fetched results  
controller perform this fetch,  

1404
01:07:06,056 --> 01:07:09,257
okay that can throw, so         
that's why we're trying there.  

1405
01:07:09,259 --> 01:07:11,726
And we've got to tell our       
table view, time to go          

1406
01:07:11,728 --> 01:07:15,263
call all of your UI table       
view data source methods, and   

1407
01:07:15,265 --> 01:07:16,965
we know whose going             
to answer that,                 

1408
01:07:16,967 --> 01:07:19,067
that extension that             
we have there.                  

1409
01:07:19,069 --> 01:07:21,736
And it's going to ask fetched   
results controller for          

1410
01:07:21,738 --> 01:07:23,838
all the information it needs.   

1411
01:07:26,308 --> 01:07:32,013
By the way, notice I made this  
public, (internal, basically).  

1412
01:07:32,015 --> 01:07:36,184
That's because I put            
that extension over here        

1413
01:07:36,186 --> 01:07:37,185
in a different file and         

1414
01:07:37,187 --> 01:07:39,821
it wouldn't be a receive        
this otherwise.                 

1415
01:07:39,823 --> 01:07:42,857
So, if you wanna make           
this var private,               

1416
01:07:42,859 --> 01:07:44,993
which is not a bad idea,        
actually.                       

1417
01:07:44,995 --> 01:07:47,695
In a MVC that is using          
a fetchedResultsController,     

1418
01:07:47,697 --> 01:07:50,765
making its controller           
public is kinda opening up      

1419
01:07:50,767 --> 01:07:51,299
the internal guts of it.        

1420
01:07:51,301 --> 01:07:54,669
If you wanna make this          
private, then you would just    

1421
01:07:54,671 --> 01:07:57,105
put this extension at           
the bottom of the file,         

1422
01:07:57,107 --> 01:07:57,305
in the same file.               

1423
01:07:57,307 --> 01:08:00,875
That way they you would         
be able to see it.              

1424
01:08:01,977 --> 01:08:10,085
Hopefully we've                 
remembered everything,          

1425
01:08:10,087 --> 01:08:15,523
let's go give this a try.       

1426
01:08:15,758 --> 01:08:18,393
Let's go here #stanford again.  

1427
01:08:19,128 --> 01:08:20,428
Now I'm gonna press Tweeters.   

1428
01:08:20,430 --> 01:08:23,298
And it's going to segue         
to this new MVC that            

1429
01:08:23,300 --> 01:08:26,434
will hopefully show us          
a list of all the people who    

1430
01:08:26,436 --> 01:08:27,102
have tweeted here.              

1431
01:08:27,104 --> 01:08:28,002
And sure enough, there it is.   

1432
01:08:28,004 --> 01:08:30,672
These are all the people        
who have tweeted one of         

1433
01:08:30,674 --> 01:08:33,408
the tweets that was found       
by that search team.            

1434
01:08:33,410 --> 01:08:34,109
Search term #stanford.          

1435
01:08:34,111 --> 01:08:36,344
It even has that listed at      
the top, which is kinda cool,   

1436
01:08:36,346 --> 01:08:40,014
because that's the same         
as the back button here.        

1437
01:08:40,016 --> 01:08:42,016
Now, one thing I don't          
like about this,                

1438
01:08:42,018 --> 01:08:45,253
a couple of things,             
one, subtitle.                  

1439
01:08:45,255 --> 01:08:45,887
Okay that's no good,            

1440
01:08:45,889 --> 01:08:47,322
we could put something          
better there like,              

1441
01:08:47,324 --> 01:08:50,658
maybe we could put how many     
tweets they've tweeted          

1442
01:08:50,660 --> 01:08:52,527
that match that search term,    
that'd be cool.                 

1443
01:08:52,529 --> 01:08:54,696
And then, the other thing       
is the order its in,            

1444
01:08:54,698 --> 01:08:58,166
look at this, all the capital   
letter's first and              

1445
01:08:58,168 --> 01:09:01,903
then all the lowercase          
letters after it.               

1446
01:09:01,905 --> 01:09:01,970
I want it all to be             
alphabetical case insensitive,  

1447
01:09:01,972 --> 01:09:05,306
And like that,                  

1448
01:09:05,308 --> 01:09:07,442
so let's fix those things.      

1449
01:09:07,444 --> 01:09:11,045
So the case insensitive is      
just a matter of sorting.       

1450
01:09:11,047 --> 01:09:13,148
We're sorting there and         
it's sorting by some default,   

1451
01:09:13,150 --> 01:09:16,551
while the default is obviously  
case sensitive search and       

1452
01:09:16,553 --> 01:09:17,118
we don't want that.             

1453
01:09:17,120 --> 01:09:19,954
So, this is where this          
sorting selector comes in.      

1454
01:09:19,956 --> 01:09:24,325
And we just say #selector and   
it's gotta be an NSString       

1455
01:09:24,327 --> 01:09:26,828
selector because this           
is an NSString field.           

1456
01:09:26,830 --> 01:09:27,896
And there's quite               
a few of them,                  

1457
01:09:27,898 --> 01:09:31,799
if you type compare, you'll     
get to see what they are.       

1458
01:09:31,801 --> 01:09:34,502
So, there's                     
a localizedCaseInsensitive,     

1459
01:09:34,504 --> 01:09:37,972
this kind of thing, so,         
let's try CaseInsensitive.      

1460
01:09:37,974 --> 01:09:40,508
Let's do localized case         
insensitive compare.            

1461
01:09:40,510 --> 01:09:43,645
So that's case insensitive,     
and using the user's local      

1462
01:09:43,647 --> 01:09:48,116
language to know what goes      
where, what the ordering is.    

1463
01:09:48,118 --> 01:09:48,917
So that's a pretty good one,    

1464
01:09:48,919 --> 01:09:51,286
to use localized case           
insensitive compare.            

1465
01:09:51,288 --> 01:09:54,389
So that's all we need to        
do to the case sensitivity,     

1466
01:09:54,391 --> 01:09:55,590
that was really easy.           

1467
01:09:55,592 --> 01:10:01,496
How about this thing of having  
the cells detail text label?    

1468
01:10:02,331 --> 01:10:04,265
Have the twitter account,       

1469
01:10:04,267 --> 01:10:04,933
basically the account           
of tweet.                       

1470
01:10:04,935 --> 01:10:12,173
So I'm gonna say this           
equals twitter tweet count.     

1471
01:10:12,175 --> 01:10:18,980
Tweet and let's even be nice    
here and put an s if it's one.  

1472
01:10:19,915 --> 01:10:22,083
Count equals one.               

1473
01:10:22,085 --> 01:10:26,754
Then we'll put an s on the end  
otherwise we're nothing.        

1474
01:10:26,756 --> 01:10:27,989
Okay, every one see             
what I did there?               

1475
01:10:27,991 --> 01:10:28,890
So it will take one tweet.      

1476
01:10:28,892 --> 01:10:31,626
What else do we                 
need to do here?                

1477
01:10:31,628 --> 01:10:37,665
We'll do this.                  

1478
01:10:37,667 --> 01:10:39,167
All right, so I just want       
to make it look nice.           

1479
01:10:39,169 --> 01:10:41,803
One tweet, two tweets,          
zero tweets.                    

1480
01:10:41,805 --> 01:10:43,938
How do I get this tweet         
count right here and            

1481
01:10:43,940 --> 01:10:47,742
let tweet count                 
equal something?                

1482
01:10:48,410 --> 01:10:52,313
And to do this,                 
I'm going to do a little quick  

1483
01:10:52,315 --> 01:10:56,584
fast type code, because we're   
getting close to the end here.  

1484
01:10:56,586 --> 01:10:59,921
I have a method here            
called tweet count,             

1485
01:10:59,923 --> 01:11:02,624
with mention by right here.     

1486
01:11:02,626 --> 01:11:04,559
And let's look at this          
method and how this works.      

1487
01:11:04,561 --> 01:11:11,032
So this is gonna give           
the tweetCountWithMentionBy     

1488
01:11:11,034 --> 01:11:14,936
this twitterUser, the           
twitterUser that we got from    

1489
01:11:14,938 --> 01:11:15,837
our fetchResultsController.     

1490
01:11:15,839 --> 01:11:16,638
It's gonna give us              
the tweetCount.                 

1491
01:11:16,640 --> 01:11:20,174
And the way it's work is        
it's gonna create a fetch       

1492
01:11:20,176 --> 01:11:20,241
for tweet.                      

1493
01:11:20,243 --> 01:11:24,746
So here even in the middle      
of my cellForRowAtIndexPath,    

1494
01:11:24,748 --> 01:11:27,849
I'm making a request perfectly  
valid to go to a fetch          

1495
01:11:27,851 --> 01:11:30,318
request right in the middle     
here to find some information.  

1496
01:11:30,320 --> 01:11:31,953
So here I'm fetching for        
Tweets this time,               

1497
01:11:31,955 --> 01:11:35,857
cause I wanna count the number  
of Tweets this Twitter user     

1498
01:11:35,859 --> 01:11:37,158
has Tweeted with that so sure.  

1499
01:11:37,160 --> 01:11:37,892
And the predicate is,           

1500
01:11:37,894 --> 01:11:43,498
"tell me all the Tweets who's   
text contains that mention".    

1501
01:11:43,500 --> 01:11:47,335
And who's Tweeter is            
this Twitter user?              

1502
01:11:49,905 --> 01:11:50,672
Mention and a twitterUser.      

1503
01:11:50,674 --> 01:11:53,174
And I'm gonna go ahead and      
force unwrap that,              

1504
01:11:53,176 --> 01:11:55,877
because, boy if I get all       
the way down to here,           

1505
01:11:55,879 --> 01:11:58,246
surely the mention is not nil.  

1506
01:11:58,514 --> 01:11:59,814
And then I'm going to return,   

1507
01:11:59,816 --> 01:12:03,551
I'm going to use the same       
context the twitterUser is in,  

1508
01:12:03,553 --> 01:12:05,853
hopefully that's                
a view context.                 

1509
01:12:05,855 --> 01:12:09,791
And I'm going to count,         
use that count thing for        

1510
01:12:09,793 --> 01:12:10,725
that request.                   

1511
01:12:10,727 --> 01:12:12,393
And if that fails for           
some reason,                    

1512
01:12:12,395 --> 01:12:14,896
I'm gonna say 0 tweets.         

1513
01:12:16,432 --> 01:12:18,333
Have you got that?              

1514
01:12:18,335 --> 01:12:23,271
So let's go                     

1515
01:12:23,273 --> 01:12:28,576
take a look.                    

1516
01:12:28,578 --> 01:12:32,013
Right, #stanford.               

1517
01:12:32,015 --> 01:12:32,447
Right, here it is.              

1518
01:12:32,449 --> 01:12:37,452
Tweeters, look at that, not 1   
tweet, 37 tweets from MEC30.    

1519
01:12:37,454 --> 01:12:39,854
Let's go see if we can          
find MEC30 in here.             

1520
01:12:39,856 --> 01:12:43,191
Sure, there's one my MEC30,     
another one, sure enough.       

1521
01:12:43,193 --> 01:12:44,158
Look at this ME, what the?      

1522
01:12:44,160 --> 01:12:48,429
Okay, what if I decide I don't  
want MEC30 in there anymore.    

1523
01:12:48,431 --> 01:12:51,165
I don't like, this guy is       
a spammer or something.         

1524
01:12:51,167 --> 01:12:52,834
I don't know what               
his problem is.                 

1525
01:12:52,836 --> 01:12:53,634
But I don't want him in there.  

1526
01:12:53,636 --> 01:12:57,705
Well, I can go back here and    
change my predicate right here  

1527
01:12:57,707 --> 01:13:01,075
to say, I want all              
the tweets that have that.      

1528
01:13:01,077 --> 01:13:06,614
But I don't want ones where     
the handle of that guy, let's   

1529
01:13:06,616 --> 01:13:13,054
say it even begins with, just   
to be kind of interesting MEC.  

1530
01:13:13,056 --> 01:13:13,588
What was it?                    

1531
01:13:13,590 --> 01:13:15,189
MEC, we'll say.                 

1532
01:13:15,191 --> 01:13:19,026
And we can't put this           
literal in here, so             

1533
01:13:19,028 --> 01:13:26,134
we have to say %@ and then we   
put the MEC on the outside.     

1534
01:13:26,136 --> 01:13:30,738
So let's see                    

1535
01:13:30,740 --> 01:13:35,877
if that got rid                 

1536
01:13:35,879 --> 01:13:40,648
of Mr. MEC.                     

1537
01:13:40,650 --> 01:13:43,718
He gone!                        

1538
01:13:43,720 --> 01:13:46,220
Got that spammer out of there.  

1539
01:13:46,222 --> 01:13:46,754
No questions?                   

1540
01:13:46,756 --> 01:13:47,255
Yes?                            
Question?                       

1541
01:13:47,257 --> 01:13:50,291
Yeah, so the question is, are   
the tweets in the database,     

1542
01:13:50,293 --> 01:13:53,161
do they stay in there for       
run to run?                     

1543
01:13:53,163 --> 01:13:54,295
And the answer is absolutely,   

1544
01:13:54,297 --> 01:13:56,564
that's one,                     
core data is kinda all about.   

1545
01:13:56,566 --> 01:13:57,298
There's a permanent database.   

1546
01:13:57,300 --> 01:14:00,868
So all those tweets, those      
#stanford tweets in there,      

1547
01:14:00,870 --> 01:14:03,137
if we go back and run again.    

1548
01:14:07,910 --> 01:14:09,644
And search for #stanford.       

1549
01:14:09,646 --> 01:14:10,711
If there have, you know,        

1550
01:14:10,713 --> 01:14:13,181
been some tweets since          
then they'll be added.          

1551
01:14:13,183 --> 01:14:16,184
But every single tweet          
we ever got is still            

1552
01:14:16,186 --> 01:14:16,350
going to be in here.            

1553
01:14:16,352 --> 01:14:18,286
So you can see this list        
actually got slightly longer,   

1554
01:14:18,288 --> 01:14:20,121
a few tweets were in there,     
but they're all in there.       

1555
01:14:20,123 --> 01:14:24,992
we're unique-ing them so it's   
not adding them over and over.  

1556
01:14:24,994 --> 01:14:27,061
And you gotta be careful to     
do that on your homework.       

1557
01:14:27,063 --> 01:14:28,663
Don't add them over and over.   

1558
01:14:28,665 --> 01:14:30,698
But yeah, that CoreData         
database is there.              

1559
01:14:30,700 --> 01:14:32,266
By the way,                     
I'm gonna show you a trick.     

1560
01:14:32,268 --> 01:14:34,602
We just enough time to show     
you something's really cool.    

1561
01:14:34,604 --> 01:14:37,538
What if you want to             
delete your database?           

1562
01:14:37,540 --> 01:14:39,707
Okay, now there's two           
reasons you wanna,              

1563
01:14:39,709 --> 01:14:40,374
might wanna delete              
your database.                  

1564
01:14:40,376 --> 01:14:42,877
One, you wanna clear the data   
out cuz you wanna get a fresh   

1565
01:14:42,879 --> 01:14:44,779
set so you can see if           
things are working.             

1566
01:14:44,781 --> 01:14:48,282
And number two, you might       
change your data model.         

1567
01:14:48,284 --> 01:14:52,553
If I go back here and           
I go to my data model here and  

1568
01:14:52,555 --> 01:14:55,256
I add some attributes or        
add an entity,                  

1569
01:14:55,258 --> 01:15:00,361
then my app will no longer      
run on that device or           

1570
01:15:00,363 --> 01:15:04,899
on the simulator cuz it'll say  
your data model doesn't match   

1571
01:15:04,901 --> 01:15:06,701
the data that's already         
on this device.                 

1572
01:15:06,703 --> 01:15:10,371
So here's the magic to get rid  
of, it's not very magical.      

1573
01:15:10,373 --> 01:15:10,972
Is on your device, or           

1574
01:15:10,974 --> 01:15:14,509
on the simulator, you go to     
the home button right here and  

1575
01:15:14,511 --> 01:15:18,813
you press and hold to           
make the things jiggle.         

1576
01:15:18,815 --> 01:15:19,647
You all know about that?        

1577
01:15:19,649 --> 01:15:21,015
It's how you delete apps.       

1578
01:15:21,017 --> 01:15:23,784
And just delete your app.       

1579
01:15:23,786 --> 01:15:27,588
And when you delete your app,   
your core data goes with it.    

1580
01:15:27,590 --> 01:15:30,691
And now when you run the next   
time, you're gonna run,         

1581
01:15:30,693 --> 01:15:32,293
it's gonna be                   
a fresh database,               

1582
01:15:32,295 --> 01:15:34,161
it will have the new            
data model etc.                 

1583
01:15:34,163 --> 01:15:35,463
So I'm very glad                
you asked that,                 

1584
01:15:35,465 --> 01:15:38,799
really important to know how    
to clear out your database.     

1585
01:15:38,801 --> 01:15:41,969
Now if we do #trump or          
something,                      

1586
01:15:41,971 --> 01:15:47,975
see it's even asking me again,  
do I wanna allow it?            

1587
01:15:47,977 --> 01:15:49,143
And I do.                       

1588
01:15:52,948 --> 01:15:54,315
All right, that is it.          

1589
01:15:54,317 --> 01:15:57,919
I will see you next Wednesday   
after you turn in your          

1590
01:15:57,921 --> 01:15:58,085
homework and                    

1591
01:15:58,087 --> 01:16:03,724
we'll learn all about the       
final project in Autolayout.    

1592
01:16:03,726 --> 01:16:03,757
For more, please visit          
us at stanford.edu.             

