1
00:00:00,001 --> 00:00:08,107
>> Stanford University.         

2
00:00:08,109 --> 00:00:11,143
>> Welcome to Stanford CS193P,  

3
00:00:11,145 --> 00:00:15,447
Developing Applications for     
iOS, winter of 2017.            

4
00:00:15,449 --> 00:00:17,750
This is lecture number five?    

5
00:00:17,752 --> 00:00:19,618
Is that right?                  
The lecture number five?        

6
00:00:19,620 --> 00:00:21,453
Yeah, lecture number five.      

7
00:00:21,588 --> 00:00:24,823
Today we are going to start     
off with a little demo,         

8
00:00:24,825 --> 00:00:28,927
where I'm gonna take the        
application we worked on last   

9
00:00:28,929 --> 00:00:30,662
time, and add a model to it.    

10
00:00:30,664 --> 00:00:34,199
Cuz we have only worked         
on the view part of that,       

11
00:00:34,201 --> 00:00:36,035
building that nice              
cool FaceView,                  

12
00:00:36,037 --> 00:00:39,271
now we are going to add         
a model to that MVC.            

13
00:00:39,273 --> 00:00:41,907
Then we're going to come        
back to the slides and          

14
00:00:41,909 --> 00:00:44,276
I'm going to do some            
slides on gestures.             

15
00:00:44,278 --> 00:00:47,946
Obviously, you want to be able  
to have input to your app,      

16
00:00:47,948 --> 00:00:50,215
you need to know how to         
do multi-touch gestures,        

17
00:00:50,217 --> 00:00:51,417
we'll talk all about that, and  

18
00:00:51,419 --> 00:00:54,053
then I will go back to our      
FaceView application and        

19
00:00:54,055 --> 00:00:57,823
we will add some gestures,      
pinching, panning, tapping.     

20
00:00:57,825 --> 00:01:01,060
And finally, I will go back     
to the slides again and         

21
00:01:01,062 --> 00:01:02,961
start talking about             
multiple MVCs.                  

22
00:01:02,963 --> 00:01:05,230
How to build bigger             
applications that are made out  

23
00:01:05,232 --> 00:01:10,803
of combining MVCs, so that's    
what's on tap for today.        

24
00:01:10,805 --> 00:01:16,909
So let's jump right back        
into this FaceIt Demo.          

25
00:01:16,911 --> 00:01:20,245
And if you remember             
where we left off,              

26
00:01:20,247 --> 00:01:22,781
we had this nice view,          
it was really cool because,     

27
00:01:22,783 --> 00:01:27,553
in Interface Builder, we could  
do things like open the eyes.   

28
00:01:27,555 --> 00:01:30,022
We could make it really big,    

29
00:01:30,024 --> 00:01:35,394
we could make it really small,  
or anywhere in between.         

30
00:01:35,396 --> 00:01:38,430
And we could change the color,  
green,                          

31
00:01:38,432 --> 00:01:40,132
something like that,            
so that's cool.                 

32
00:01:40,134 --> 00:01:43,802
And this is a nice reusable     
thing that's got a little       

33
00:01:43,804 --> 00:01:45,170
public API to it.               

34
00:01:45,172 --> 00:01:47,139
These inspectable               
things are all public,          

35
00:01:47,141 --> 00:01:50,909
so, we can set the mouth        
curvature, we can open and      

36
00:01:50,911 --> 00:01:52,811
close the eyes, we can change   
those things, like scale.       

37
00:01:52,813 --> 00:01:55,681
And so, it's nice,              
it's this nice reusable face.   

38
00:01:55,683 --> 00:01:59,952
And what we're going to do is   
make our MVC have a model.      

39
00:01:59,954 --> 00:02:02,654
That model is not gonna         
match up exactly to what our    

40
00:02:02,656 --> 00:02:05,057
FaceView can do, because        
that's the way models work.     

41
00:02:05,059 --> 00:02:08,827
Models in the world are often   
databases or something, their   

42
00:02:08,829 --> 00:02:11,964
schema doesn't quite match      
what view you have around.      

43
00:02:11,966 --> 00:02:14,700
So you, the job of              
the controller is to interpret  

44
00:02:14,702 --> 00:02:17,636
that model for                  
the view as best it can.        

45
00:02:17,638 --> 00:02:22,241
And interpret input from the    
view also to affect the model.  

46
00:02:22,243 --> 00:02:24,643
So let's go back                
to our controller,              

47
00:02:24,645 --> 00:02:28,480
you can see that we have no     
model, we also have no outlets  

48
00:02:28,482 --> 00:02:31,550
to our view here, so, let's     
add both of those things.       

49
00:02:31,552 --> 00:02:35,787
I'm gonna start by adding       
an outlet to our FaceView, so   

50
00:02:35,789 --> 00:02:39,591
remember how we do that, we     
got our storyboard on screen.   

51
00:02:39,593 --> 00:02:43,262
I'm gonna get them both on      
screen at the same time and     

52
00:02:43,264 --> 00:02:44,563
then I'm gonna control drag.    

53
00:02:44,565 --> 00:02:47,866
And I'm control dragging        
from my FaceView to create      

54
00:02:47,868 --> 00:02:47,933
an outlet to it,                

55
00:02:47,935 --> 00:02:51,103
in exactly the same way I       
would control drag to a label,  

56
00:02:51,105 --> 00:02:52,004
or button, or                   
anything else, so               

57
00:02:52,006 --> 00:02:53,705
nothing special                 
about the FaceView.             

58
00:02:53,707 --> 00:02:56,542
So I'm just gonna hold down     
control and drag in here,       

59
00:02:56,544 --> 00:02:58,944
and I'm gonna                   
create an outlet,               

60
00:02:58,946 --> 00:03:01,747
I'll call this                  
outlet my FaceView.             

61
00:03:01,749 --> 00:03:04,983
That's a perfectly              
good name for it.               

62
00:03:04,985 --> 00:03:09,555
Hit connect and there we go,    
we get this code that you're    

63
00:03:09,557 --> 00:03:15,727
quite used to here, which       
is this IBOutlet weak var.      

64
00:03:15,729 --> 00:03:18,864
Now we have a connection to     
our view, and remember, in MVC  

65
00:03:18,866 --> 00:03:21,934
picture, the controller can     
have green arrows to its view,  

66
00:03:21,936 --> 00:03:25,103
that's this, and it can have    
green arrows to its model.      

67
00:03:25,105 --> 00:03:27,306
So let's create                 
a connection to the model.      

68
00:03:27,308 --> 00:03:29,575
So what is gonna be             
our model of our MVC?           

69
00:03:29,577 --> 00:03:33,278
I'm actually going to           
drag that in, right here,       

70
00:03:33,280 --> 00:03:35,647
it's called facial expression.  

71
00:03:36,349 --> 00:03:38,784
When you drag things in         
I strongly recommend            

72
00:03:38,786 --> 00:03:41,420
you have this Destination,      
Copy items if needed,           

73
00:03:41,422 --> 00:03:44,890
otherwise, when you drag in     
a class, or structure, or       

74
00:03:44,892 --> 00:03:46,124
something, you'll               
be pointing to it.              

75
00:03:46,126 --> 00:03:48,360
So if you change it in,         
wherever you got it from,       

76
00:03:48,362 --> 00:03:49,895
it will be changing             
it in your project,             

77
00:03:49,897 --> 00:03:51,797
so, it's usually                
what we wanna do.               

78
00:03:51,799 --> 00:03:52,531
Maybe that might                
be what you want,               

79
00:03:52,533 --> 00:03:55,701
in certain circumstances, but   
usually wanna copy it in.       

80
00:03:55,703 --> 00:03:58,837
So let's take a look at this    
thing that I brought in,        

81
00:03:58,839 --> 00:04:02,674
it's a struct and it's gonna    
be the model of our FaceView.   

82
00:04:02,676 --> 00:04:05,110
And it's a really simple        
FacialExpression,               

83
00:04:05,112 --> 00:04:08,580
that's what this represents,    
this struct.                    

84
00:04:08,582 --> 00:04:09,848
And it has positions            
of the eyes,                    

85
00:04:09,850 --> 00:04:12,818
open eyes, closed eyes,         
squinting eyes, unfortunately,  

86
00:04:12,820 --> 00:04:15,954
we can't represent that in our  
view but it's in the model,     

87
00:04:15,956 --> 00:04:17,889
we'll have to figure            
out the best we can do.         

88
00:04:17,891 --> 00:04:21,793
It's also got a mouth, and the  
mouth can frown or smirk, or    

89
00:04:21,795 --> 00:04:22,394
it can grin, or smile,          

90
00:04:22,396 --> 00:04:26,698
notice there's nothing in this  
model about mouth curvature.    

91
00:04:26,700 --> 00:04:28,533
It doesn't know anything        
about mouth curvature,          

92
00:04:28,535 --> 00:04:29,167
it just knows about grins and   

93
00:04:29,169 --> 00:04:31,770
frowns, things like that,       
that's what the model is.       

94
00:04:31,772 --> 00:04:36,108
It's also kinda cool, it knows  
how to give you a happier       

95
00:04:36,110 --> 00:04:39,578
version of itself, or           
a sadder version of itself.     

96
00:04:39,580 --> 00:04:40,846
That's what these bars do,      

97
00:04:40,848 --> 00:04:43,415
they just wanna return          
a happier or sadder.            

98
00:04:43,417 --> 00:04:47,586
But primarily, this struct is   
just an expression to keep      

99
00:04:47,588 --> 00:04:52,457
track of the state of           
the eyes and the mouth.         

100
00:04:52,459 --> 00:04:54,026
So I'm going to,                
in my controller,               

101
00:04:54,028 --> 00:04:57,562
create a green arrow to it,     
or a var for it.                

102
00:04:57,564 --> 00:04:59,665
We're gonna call                
it Expression,                  

103
00:04:59,667 --> 00:05:01,466
cuz it's a facial expression.   

104
00:05:01,468 --> 00:05:05,137
And it's type                   
FacialExpression,               

105
00:05:05,139 --> 00:05:08,340
and actually,                   

106
00:05:08,342 --> 00:05:11,343
let's have a starting facial    
expression have eyes,           

107
00:05:11,345 --> 00:05:17,582
which are, let's say, open,     
and a mouth, which is a grin.   

108
00:05:17,584 --> 00:05:20,419
That sound like a happy         
place to start.                 

109
00:05:21,788 --> 00:05:21,853
So that's great,                

110
00:05:21,855 --> 00:05:26,558
now, remember that the primary  
job of a controller             

111
00:05:26,560 --> 00:05:30,128
is to interpret the model for   
the view and vice versa.        

112
00:05:30,130 --> 00:05:33,365
So I'm gonna add                
a private function here-        

113
00:05:33,367 --> 00:05:35,300
you'll all often                
have a method or                

114
00:05:35,302 --> 00:05:37,969
a number of methods in          
your controller like this.      

115
00:05:37,971 --> 00:05:40,672
This one I'm gonna              
call updateUI.                  

116
00:05:40,873 --> 00:05:43,241
And the job of this             
method is just to               

117
00:05:43,243 --> 00:05:46,912
make the model match the UI,    
tha's its job.                  

118
00:05:46,914 --> 00:05:48,914
Tha's what this                 
method is gonna do.             

119
00:05:48,916 --> 00:05:51,917
So, what do we have to          
do to make our model,           

120
00:05:51,919 --> 00:05:53,652
this facial expression,         
match our UI?                   

121
00:05:53,654 --> 00:05:55,687
Well, we have to deal           
with the eyes and               

122
00:05:55,689 --> 00:05:57,155
we have to deal                 
with the mouth.                 

123
00:05:57,157 --> 00:06:01,893
So, let's deal with the eyes    
first, that's pretty easy, so,  

124
00:06:01,895 --> 00:06:05,530
I'm just going to switch        
on my expressions.eyes.         

125
00:06:05,532 --> 00:06:09,634
And in the case that the eyes   
are open in the model,          

126
00:06:09,636 --> 00:06:13,338
then it's easy, I can           
just take my faceView and       

127
00:06:13,340 --> 00:06:18,443
set it's eyesOpen to true,      
that's obvious how we do that.  

128
00:06:18,445 --> 00:06:21,947
And this face, you remember,    
is this outlet,                 

129
00:06:21,949 --> 00:06:26,318
that I just created there,      
and so, that's obvious.         

130
00:06:26,320 --> 00:06:30,088
How about the case where the    
eyes are closed in the model?   

131
00:06:30,090 --> 00:06:32,924
Well, that's                    
the faceView.eyesOpen,          

132
00:06:32,926 --> 00:06:34,526
are gonna be false.             

133
00:06:34,528 --> 00:06:37,929
And finally,                    
there's this case in the model  

134
00:06:37,931 --> 00:06:40,899
where we're squinting,          
and here,                       

135
00:06:40,901 --> 00:06:43,135
I don't really have             
a way to represent that.        

136
00:06:43,137 --> 00:06:45,804
So I'm just going to say        
that in that case our eyes      

137
00:06:45,806 --> 00:06:49,708
are gonna be closed because,    
squinting is more like having   

138
00:06:49,710 --> 00:06:51,810
your eyes closed than           
having them open.               

139
00:06:51,812 --> 00:06:55,247
But we don't always have        
exactly the view we want to     

140
00:06:55,249 --> 00:06:58,517
represent our model, so we're   
doing the best we can here.     

141
00:06:59,051 --> 00:07:01,887
So that is the eyes,            
pretty straightforward.         

142
00:07:01,889 --> 00:07:04,856
Now the mouth,                  
I could do the same thing for   

143
00:07:04,858 --> 00:07:07,058
the mouth here,                 
case expression.mouth,          

144
00:07:07,060 --> 00:07:09,327
if it's a grin, set             
the mouth curvature to this.    

145
00:07:09,329 --> 00:07:11,363
If it's normal, set             
the mouth curvature to that,    

146
00:07:11,365 --> 00:07:13,131
but that code is                
kind of messy,                  

147
00:07:13,133 --> 00:07:18,437
(make some space here so        
it's up higher), what if        

148
00:07:18,439 --> 00:07:24,009
I created a little private var  
here, actually make it a let.   

149
00:07:24,011 --> 00:07:27,412
And I'm gonna call it           
mouthCurvatures, and            

150
00:07:27,414 --> 00:07:29,848
it's gonna be a dictionary,     
and in the dictionary,          

151
00:07:29,850 --> 00:07:37,322
the values are gonna be         
FacialExpression.MouthPositi-   

152
00:07:37,324 --> 00:07:39,591
ons, maybe a grin.              

153
00:07:39,593 --> 00:07:42,794
And the value is gonna          
be a mouth curvature, so        

154
00:07:42,796 --> 00:07:44,362
what's a good thing for         
a grin?                         

155
00:07:44,364 --> 00:07:45,997
I think I decided 0.5.          

156
00:07:45,999 --> 00:07:48,400
So this is just gonna           
be a dictionary with            

157
00:07:48,402 --> 00:07:52,504
mouth position in the model,    
mouthCurvatures for the view.   

158
00:07:52,506 --> 00:07:55,440
So I'm just creating this       
little mapping data structure.  

159
00:07:55,442 --> 00:07:57,375
So let's do this for            
all, let's map this.            

160
00:07:57,377 --> 00:08:00,278
For all of our facial           
expressions right here.         

161
00:08:00,280 --> 00:08:01,112
Notice, by the way,             

162
00:08:01,114 --> 00:08:05,584
that Swift was able to infer    
the type of this dictionary.    

163
00:08:05,586 --> 00:08:09,354
Cuz it only has one item in     
it, and the types of those two  

164
00:08:09,356 --> 00:08:12,824
things are obvious              
from what they are.             

165
00:08:12,826 --> 00:08:15,894
So now that it knows that,      
by the way,                     

166
00:08:15,896 --> 00:08:20,565
we can be a little more         
succinct and just say like,     

167
00:08:20,567 --> 00:08:23,869
frown is -1.0 and               
smile is 1.0.                   

168
00:08:23,871 --> 00:08:30,308
And obviously neutral           
would be 0.0.                   

169
00:08:30,310 --> 00:08:31,109
Did I get them all?             

170
00:08:31,111 --> 00:08:32,010
Smirk, how about smirk?         

171
00:08:32,012 --> 00:08:38,717
Nope, that smirk                
we'll say is -0.5.              

172
00:08:39,018 --> 00:08:41,686
So I've just put those mouth    
curvatures in this nice         

173
00:08:41,688 --> 00:08:42,420
little table.                   

174
00:08:42,422 --> 00:08:43,822
And so now in my update UI,     

175
00:08:43,824 --> 00:08:47,425
I'm just gonna set my           
faceView's mouthCurvature       

176
00:08:47,427 --> 00:08:50,996
equal to looking up in          
the mouthCurvatures,            

177
00:08:50,998 --> 00:08:57,402
the model's mouth.              

178
00:08:57,404 --> 00:09:00,572
I just kinda wanna do it this   
way to kinda show you that you  

179
00:09:00,574 --> 00:09:03,808
don't always have to            
forcefully case every single    

180
00:09:03,810 --> 00:09:04,910
thing when you have an enum.    

181
00:09:04,912 --> 00:09:06,878
Sometimes you can use           
things like this.               

182
00:09:06,880 --> 00:09:08,146
Now, I have an error there,     

183
00:09:08,148 --> 00:09:09,814
anybody know why                
I have an error?                

184
00:09:09,816 --> 00:09:11,149
Can anyone guess?               

185
00:09:15,788 --> 00:09:15,921
Optional, yeah.                 

186
00:09:15,923 --> 00:09:18,056
Alright, people are getting     
the optional thing.             

187
00:09:18,058 --> 00:09:19,925
Good.                           
MouthCurvature,                 

188
00:09:19,927 --> 00:09:20,659
what type is that?              

189
00:09:20,661 --> 00:09:23,895
That is a double, and           
mouthCurvature sub              

190
00:09:23,897 --> 00:09:27,032
expression.mouth, what          
type is that?                   

191
00:09:27,034 --> 00:09:28,466
It's an optional double.        

192
00:09:28,468 --> 00:09:32,804
And that's because this         
expression might not be         

193
00:09:32,806 --> 00:09:33,405
in that dictionary.             

194
00:09:33,407 --> 00:09:36,474
So I'm gonna use that           
defaulting thing we learned     

195
00:09:36,476 --> 00:09:38,977
and say, if I can't find        
the expression mouth,           

196
00:09:38,979 --> 00:09:42,414
we are gonna have neutral       
mouth, not smiling or           

197
00:09:42,416 --> 00:09:45,383
frowning as our curvature.      

198
00:09:47,787 --> 00:09:51,389
Now, we have this               
great update UI.                

199
00:09:51,391 --> 00:09:54,025
When should we                  
call this thing?                

200
00:09:54,027 --> 00:09:58,530
Well, we certainly need to      
call this thing anytime our     

201
00:09:58,532 --> 00:09:59,230
model changes.                  

202
00:09:59,232 --> 00:10:02,334
If our model changes to have    
a different expression,         

203
00:10:02,336 --> 00:10:03,401
we gotta update our UI.         

204
00:10:03,403 --> 00:10:04,669
So how are we gonna do that?    

205
00:10:04,671 --> 00:10:07,238
We're gonna use this cool       
feature that I talked about     

206
00:10:07,240 --> 00:10:12,544
last time called property       
observers, this didSet thing.   

207
00:10:12,546 --> 00:10:15,714
So didSet allows you            
on any of your vars,            

208
00:10:15,716 --> 00:10:18,483
if it changes,                  
you can execute some code.      

209
00:10:18,485 --> 00:10:21,252
So anytime someone              
sets this expression,           

210
00:10:21,254 --> 00:10:24,122
I'm just going                  
to update my UI.                

211
00:10:27,159 --> 00:10:28,693
Now, there's one other          
place that I wanna              

212
00:10:28,695 --> 00:10:32,697
update my UI though, it's       
a little less obvious, and      

213
00:10:32,699 --> 00:10:36,568
that is with this               
property observer.              

214
00:10:38,537 --> 00:10:40,238
What am I doing here?           

215
00:10:40,240 --> 00:10:41,640
This property is the outlet,    

216
00:10:41,642 --> 00:10:44,776
that thing I Ctrl+dragged       
to my faceView.                 

217
00:10:44,778 --> 00:10:48,480
And when we first start up,     
it's not set.                   

218
00:10:48,482 --> 00:10:52,384
iOS takes a few microseconds    
to actually connect this up.    

219
00:10:52,386 --> 00:10:55,253
That's why this is              
an optional, remember?          

220
00:10:55,255 --> 00:11:00,325
In that short amount of time,   
what if the model gets set.     

221
00:11:00,327 --> 00:11:03,294
Then update UI is not gonna     
work because the faceView       

222
00:11:03,296 --> 00:11:05,330
hasn't been connected yet.      

223
00:11:05,332 --> 00:11:06,498
So that's no good.              

224
00:11:06,500 --> 00:11:10,602
Also we initialized our         
FacialExpression to be this.    

225
00:11:10,604 --> 00:11:15,674
When you initialize something,  
didSet does not get called.     

226
00:11:15,676 --> 00:11:18,677
didSet is only called if        
someone externally sets         

227
00:11:18,679 --> 00:11:19,411
the expression.                 

228
00:11:19,413 --> 00:11:23,848
The initial thing does          
not cause it to be set.         

229
00:11:23,850 --> 00:11:26,217
So when is didSet               
gonna happen?                   

230
00:11:26,219 --> 00:11:30,922
It's gonna happen only once     
when iOS hooks up this outlet   

231
00:11:30,924 --> 00:11:34,459
to that faceView, then this     
didSet is gonna get called.     

232
00:11:34,461 --> 00:11:36,361
That's the only time it's       
ever gonna get called.          

233
00:11:36,363 --> 00:11:38,830
But at that time,               
we're gonna update our UI.      

234
00:11:38,832 --> 00:11:42,400
Now, there's one other          
minor thing here.               

235
00:11:42,402 --> 00:11:51,009
What if this gets called        
before this happens?            

236
00:11:51,343 --> 00:11:54,245
This is gonna                   
crash our program               

237
00:11:54,247 --> 00:11:59,517
because until this gets hooked  
up to iOS, this is nil.         

238
00:11:59,985 --> 00:12:02,821
The only reason we don't have   
to say exclamation point here   

239
00:12:02,823 --> 00:12:06,324
is cuz we have this implicitly  
unwrapped optional here, but    

240
00:12:06,326 --> 00:12:07,392
it is an optional.              

241
00:12:07,394 --> 00:12:08,793
So how can we deal with that?   

242
00:12:08,795 --> 00:12:11,129
We don't want update UI         
to crash our program            

243
00:12:11,131 --> 00:12:14,299
if the expression should        
happen to be set before that    

244
00:12:14,301 --> 00:12:15,433
thing gets wired up.            

245
00:12:15,435 --> 00:12:18,336
Now that thing gets             
wired up pretty soon, so        

246
00:12:18,338 --> 00:12:20,572
probably not likely to happen,  
but it could.                   

247
00:12:20,574 --> 00:12:24,175
So, we're gonna do that         
by using this chaining,         

248
00:12:24,177 --> 00:12:25,744
this optional chaining.         

249
00:12:25,746 --> 00:12:27,212
Remember the optional           
chaining,                       

250
00:12:27,214 --> 00:12:28,613
where you can put               
a question mark there.          

251
00:12:28,615 --> 00:12:32,217
And if the thing that you put   
the question mark on evaluates  

252
00:12:32,219 --> 00:12:35,553
to nil, the rest of that line   
of code is just ignored.        

253
00:12:35,555 --> 00:12:39,758
Perfect, faceView?.eyesOpen,    
if faceView's not set,          

254
00:12:39,760 --> 00:12:40,692
we'll just ignore that.         

255
00:12:40,694 --> 00:12:42,494
We're not gonna set             
the eyes open to anything,      

256
00:12:42,496 --> 00:12:45,630
that line is just gonna         
be aborted immediately.         

257
00:12:46,332 --> 00:12:49,601
This is something you often     
wanna do in your update         

258
00:12:49,603 --> 00:12:54,572
UI things is protect against    
your outlets not being set      

259
00:12:56,842 --> 00:13:00,879
And it's all gonna be fine,     
because if this got sent, and   

260
00:13:00,881 --> 00:13:03,815
this has not been, and          
then this happens, and          

261
00:13:03,817 --> 00:13:07,252
none of these lines of          
code execute, no problem.       

262
00:13:07,254 --> 00:13:09,254
Because when this               
does get hooked up,             

263
00:13:09,256 --> 00:13:10,755
this is gonna get               
called again.                   

264
00:13:10,757 --> 00:13:13,258
And this time,                  
it'll be able to do it.         

265
00:13:16,428 --> 00:13:16,995
So that it.                     

266
00:13:16,997 --> 00:13:18,997
Let's run our                   
little app here and             

267
00:13:18,999 --> 00:13:23,168
see if we get                   
an open eyes grin.              

268
00:13:23,170 --> 00:13:23,701
In other words,                 

269
00:13:23,703 --> 00:13:27,205
let's see if our UI reflects    
what's in our model.            

270
00:13:27,207 --> 00:13:31,810
And sure enough,                
open eyes and a little grin.    

271
00:13:31,812 --> 00:13:37,882
Let's try closed                

272
00:13:37,884 --> 00:13:43,922
eyes, closed and                

273
00:13:43,924 --> 00:13:49,761
a little frown.                 

274
00:13:49,763 --> 00:13:50,628
Bingo!                          

275
00:13:50,630 --> 00:13:53,832
So now we have done what we     
need to do in our controller,   

276
00:13:53,834 --> 00:13:56,568
which is we're interpreting     
our model for our view.         

277
00:13:56,570 --> 00:13:58,336
And anytime we set              
the model from now on,          

278
00:13:58,338 --> 00:13:59,737
it's gonna update our           
view automatically.             

279
00:13:59,739 --> 00:14:03,241
So the question is, what if     
I forgot to put this little     

280
00:14:03,243 --> 00:14:04,976
question mark right here?       

281
00:14:04,978 --> 00:14:08,580
Probably everything would be    
fine because you don't set      

282
00:14:08,582 --> 00:14:12,984
your model before that Outlook  
gets wired up by iOS cuz it     

283
00:14:12,986 --> 00:14:14,786
wires it up really soon.        

284
00:14:14,788 --> 00:14:18,389
But if you did,                 

285
00:14:18,391 --> 00:14:19,624
And so                          
that's how you would know,      

286
00:14:19,626 --> 00:14:20,892
"oops", you messed that up.     

287
00:14:20,894 --> 00:14:23,361
And sometimes you'll forget to  
put that question mark there,   

288
00:14:23,363 --> 00:14:23,761
You do all your coding and you  
never call that model earlier.  

289
00:14:23,763 --> 00:14:26,564
it's fine.                      

290
00:14:26,566 --> 00:14:28,600
But then later, you change      
your code in a way that         

291
00:14:28,602 --> 00:14:30,935
does accept the model before    
that thing, and boom.           

292
00:14:30,937 --> 00:14:32,737
It crashes, and                 
you find it right away.         

293
00:14:32,739 --> 00:14:33,438
That's why crashing is          

294
00:14:33,440 --> 00:14:35,440
not always the worst            
thing in the world.             

295
00:14:35,442 --> 00:14:38,076
Crashing helps you              
find bugs like that.            

296
00:14:38,477 --> 00:14:39,744
You just hope you               
don't ship it out, and          

297
00:14:39,746 --> 00:14:43,047
the customers find that         
bug for you that way.           

298
00:14:43,049 --> 00:14:45,149
So that's it, that's all        
I wanted to do is show          

299
00:14:45,151 --> 00:14:46,517
you now we have                 
a complete MVC.                 

300
00:14:46,519 --> 00:14:47,819
It's got a model,               
it's got a view,                

301
00:14:47,821 --> 00:14:51,522
it's got a controller that is   
interpreting for each other.    

302
00:14:51,524 --> 00:14:52,991
So we can go back               
to our slides and               

303
00:14:52,993 --> 00:14:53,691
learn about gestures, and       

304
00:14:53,693 --> 00:14:56,561
then we'll add some             
gestures to this thing.         

305
00:15:00,766 --> 00:15:03,868
So, how do we get               
those touches?                  

306
00:15:03,870 --> 00:15:06,771
Now, it is possible             
to get notified                 

307
00:15:06,773 --> 00:15:10,541
of raw touch events like        
a touch, meaning a finger,      

308
00:15:10,543 --> 00:15:15,079
went down on the screen,        
it moved, it went up.           

309
00:15:15,081 --> 00:15:15,914
Two fingers went down,          

310
00:15:15,916 --> 00:15:19,150
you can find out all about      
that, but we never do.          

311
00:15:19,152 --> 00:15:22,553
Too complicated, trying to      
figure out whether this, down,  

312
00:15:22,555 --> 00:15:26,791
swipe, up is a swipe versus     
just moving, that's too hard.   

313
00:15:26,793 --> 00:15:29,060
So we're gonna let              
iOS do that for us.             

314
00:15:29,062 --> 00:15:32,931
And we call that interacting    
with multi touch,               

315
00:15:32,933 --> 00:15:34,299
touch via gestures.             

316
00:15:34,301 --> 00:15:36,200
So we're not even gonna         
learn about about the raw       

317
00:15:36,202 --> 00:15:39,871
touch input in this course,     
just gestures.                  

318
00:15:40,239 --> 00:15:42,340
So gestures are recognized      

319
00:15:42,342 --> 00:15:45,677
by this class called            
the UIGestureRecognizer.        

320
00:15:45,679 --> 00:15:48,780
Actually, not by                
UIGestureRecognizer itself,     

321
00:15:48,782 --> 00:15:49,948
that's an abstract class.       

322
00:15:49,950 --> 00:15:52,083
How many people know what       
an abstract class is?           

323
00:15:52,085 --> 00:15:53,751
Raise your hand if you          
know what that is.              

324
00:15:53,753 --> 00:15:55,186
Okay, so                        
I'll take a second to tell ya.  

325
00:15:55,188 --> 00:15:57,855
So an abstract class is         
a class that, it's only         

326
00:15:57,857 --> 00:16:01,492
purpose in life is to be the    
super class of other classes.   

327
00:16:01,494 --> 00:16:05,263
And you never actually create   
an abstract class, okay?        

328
00:16:05,265 --> 00:16:07,498
You only create                 
subclasses of it,               

329
00:16:07,500 --> 00:16:09,334
instances of subclasses of it.  

330
00:16:09,336 --> 00:16:12,070
So UI gesture recognizer's      
abstract, you would never       

331
00:16:12,072 --> 00:16:15,907
create a UI, you'd never call   
an initializer on UI gesture    

332
00:16:15,909 --> 00:16:15,940
recognizer.                     

333
00:16:15,942 --> 00:16:17,842
Instead there's a bunch of      
subclasses which I'm gonna      

334
00:16:17,844 --> 00:16:21,379
talk about and you would call   
the initializer on them.        

335
00:16:21,814 --> 00:16:26,784
Now there's two parts to using  
a gesture recognizer here.      

336
00:16:26,786 --> 00:16:29,287
One is you have to ask          
a UIView, please start          

337
00:16:29,289 --> 00:16:33,257
recognizing this gesture, like  
a swipe or a pan or whatever.   

338
00:16:33,259 --> 00:16:36,694
And then number two is, when    
the recognizer does recognize   

339
00:16:36,696 --> 00:16:39,130
it, it wants to call you        
back with a handler,            

340
00:16:39,132 --> 00:16:41,366
what we call a handler,         
a gesture handler.              

341
00:16:41,368 --> 00:16:43,868
So there's the recognizer       
that you add to a view and      

342
00:16:43,870 --> 00:16:47,405
then there's the handler,       
anybody can be the handler,     

343
00:16:47,407 --> 00:16:47,438
as you'll see.                  

344
00:16:47,440 --> 00:16:51,743
Almost always it's either the   
view itself or a controller,    

345
00:16:51,745 --> 00:16:53,111
but anybody could be it.        

346
00:16:53,113 --> 00:16:56,614
Now the adding of the gesture   
recognizer is done with         

347
00:16:56,616 --> 00:17:00,451
a method called add gesture     
recognizer in UIView.           

348
00:17:00,453 --> 00:17:04,222
And that method is usually      
called by controllers,          

349
00:17:04,224 --> 00:17:05,723
why do controllers call that?   

350
00:17:05,725 --> 00:17:09,327
That's because a controller     
wants to control whether        

351
00:17:09,329 --> 00:17:13,131
the things in its view          
recognize certain gestures.     

352
00:17:13,133 --> 00:17:15,967
They might wanna turn off       
certain gestures or or          

353
00:17:15,969 --> 00:17:17,602
not turn on certain gestures,   
so                              

354
00:17:17,604 --> 00:17:19,971
the controller is often         
controlling that.               

355
00:17:19,973 --> 00:17:24,308
But occasionally you do         
get a UIView that will add      

356
00:17:24,310 --> 00:17:27,278
a gesture to itself,            
like scroll view.               

357
00:17:27,280 --> 00:17:30,181
Because a scroll view           
without the pan gesture, or     

358
00:17:30,183 --> 00:17:33,051
without the pinching            
gesture if it can zoom,         

359
00:17:33,053 --> 00:17:34,552
it's not even a scroll view.    

360
00:17:34,554 --> 00:17:35,686
In other words,                 
that gesture is so              

361
00:17:35,688 --> 00:17:38,890
fundamental to what a scroll    
view is that scroll view adds   

362
00:17:38,892 --> 00:17:39,023
It'd, you'd have some API to    
turn it off, but it adds it to  

363
00:17:39,025 --> 00:17:42,427
it to itself.                   

364
00:17:42,429 --> 00:17:46,497
itself, it doesn't make some    
controller add this gesture,    

365
00:17:46,499 --> 00:17:48,466
it just recognizes pan and      
pinch.                          

366
00:17:48,468 --> 00:17:50,535
So mostly it's done             
by controllers,                 

367
00:17:50,537 --> 00:17:51,669
though you'll see that.         

368
00:17:51,671 --> 00:17:52,804
The second thing, the handler,  

369
00:17:52,806 --> 00:17:55,239
okay that could either be       
the controller or the view.     

370
00:17:55,241 --> 00:18:00,044
And what it really depends on   
is whether the gesture affects  

371
00:18:00,046 --> 00:18:00,378
the model, or                   

372
00:18:00,380 --> 00:18:04,248
whether the gesture affects     
just the view, okay.            

373
00:18:04,250 --> 00:18:05,983
If the gesture only             
affects the view,               

374
00:18:05,985 --> 00:18:07,552
then the view will              
probably handle it.             

375
00:18:07,554 --> 00:18:10,455
But if the gesture affects      
the model directly,             

376
00:18:10,457 --> 00:18:11,122
now the controller has to       

377
00:18:11,124 --> 00:18:13,958
handle it because a view        
can't see the model.            

378
00:18:16,095 --> 00:18:18,229
So the handler is either        
controller view and not, and    

379
00:18:18,231 --> 00:18:18,729
you'll see that in the demo.    

380
00:18:18,731 --> 00:18:20,965
I'm gonna have one handler      
that's a model, one and         

381
00:18:20,967 --> 00:18:24,702
one that controls view and      
you'll see where we put them.   

382
00:18:24,704 --> 00:18:28,272
Alright, so what's the code     
look like to add a gesture      

383
00:18:28,274 --> 00:18:29,540
recognizer to a view?           

384
00:18:29,542 --> 00:18:30,174
So for my example here,         

385
00:18:30,176 --> 00:18:32,910
let's say you had a view,       
and in this code I'm gonna      

386
00:18:32,912 --> 00:18:35,079
put here by the way is          
gonna be in a controller.       

387
00:18:35,081 --> 00:18:38,382
Let's say it has one of its     
views that it wants to add      

388
00:18:38,384 --> 00:18:42,320
a pan gesture, a pan gesture    
is put your finger down on      

389
00:18:42,322 --> 00:18:44,288
the screen and move around.     

390
00:18:44,290 --> 00:18:47,358
That's called panning           
around in the view.             

391
00:18:47,360 --> 00:18:53,164
So this is what it looks like,  
a good place to add a gesture   

392
00:18:53,166 --> 00:18:58,236
recognizer is in the didSet     
of an outlet for that view.     

393
00:18:58,238 --> 00:19:01,639
Because that's, as soon as you  
can get a hold of it anyway,    

394
00:19:01,641 --> 00:19:04,642
your iOS just sets,             
set that outlet up for you, so  

395
00:19:04,644 --> 00:19:06,611
now you've got                  
a hold of that view.            

396
00:19:06,613 --> 00:19:08,846
Now you can send                
a message to that view,         

397
00:19:08,848 --> 00:19:09,881
addGestureRecognizer.           

398
00:19:09,883 --> 00:19:13,151
Here I have this var, this      
outlet called pannableView,     

399
00:19:13,153 --> 00:19:17,188
this is the view that I wanna   
add the pan gesture to.         

400
00:19:17,190 --> 00:19:19,557
And you can see                 
that in its didSet,             

401
00:19:19,559 --> 00:19:21,859
in other words when             
iOS wires this up,              

402
00:19:21,861 --> 00:19:24,795
I'm going to do this            
addGestureRecognizer.           

403
00:19:24,797 --> 00:19:27,732
First I'm gonna create          
the gesture recognizer,         

404
00:19:27,734 --> 00:19:31,602
notice I'm saying               
UIPanGestureRecognizer, in it,  

405
00:19:31,604 --> 00:19:32,837
in the initializer for that.    

406
00:19:32,839 --> 00:19:36,140
Not UIGestureRecognizer,        
I'm creating a concrete         

407
00:19:36,142 --> 00:19:38,075
gesture recognizer              
which is for panning.           

408
00:19:38,077 --> 00:19:41,345
And that it has two arguments,  
the both of these arguments     

409
00:19:41,347 --> 00:19:43,748
are the handler,                
how this thing is handled.      

410
00:19:43,750 --> 00:19:46,050
The target is who's             
gonna handle it, and            

411
00:19:46,052 --> 00:19:49,487
the action is what method       
is going to handle it.          

412
00:19:49,489 --> 00:19:50,755
So now in the case here,        
the target,                     

413
00:19:50,757 --> 00:19:53,491
I'm having the target will be   
myself, the view controller.    

414
00:19:53,493 --> 00:19:56,460
This is obviously in the view   
controller because this is in   

415
00:19:56,462 --> 00:19:57,328
an outlet property observer,    

416
00:19:57,330 --> 00:19:59,330
that would only make sense      
in a view controller.           

417
00:19:59,332 --> 00:20:02,533
And so the target is myself,    
I'm going to set,               

418
00:20:02,535 --> 00:20:05,870
ask when this pan gestures      
starts to be recognized         

419
00:20:05,872 --> 00:20:09,941
it's gonna be sending me        
the action here to handle it.   

420
00:20:09,943 --> 00:20:14,745
And the action, you notice      
you have to say #selector to    

421
00:20:14,747 --> 00:20:15,780
specify the method.             

422
00:20:15,782 --> 00:20:18,883
Don't get confused the          
difference between a function   

423
00:20:18,885 --> 00:20:21,485
type, a type that               
is a function and               

424
00:20:21,487 --> 00:20:23,788
an actual method in a class.    

425
00:20:23,790 --> 00:20:27,258
We use #selector to             
say this is a method,           

426
00:20:27,260 --> 00:20:31,295
I wanna call this specific      
method in my class.             

427
00:20:31,297 --> 00:20:33,664
And notice I've said            
ViewController.pan(             

428
00:20:33,666 --> 00:20:37,969
recognizer:), well that means   
that the method that's gonna    

429
00:20:37,971 --> 00:20:38,769
be called is called pan.        

430
00:20:38,771 --> 00:20:43,441
And it has one argument, whose  
external name is recognizer:    

431
00:20:43,443 --> 00:20:44,742
that's what that means.         

432
00:20:44,744 --> 00:20:48,946
The ViewController., means      
that method is in myself.       

433
00:20:48,948 --> 00:20:52,083
If it was in my view it         
would probably be like          

434
00:20:52,085 --> 00:20:53,751
PannableView.whatever.          

435
00:20:53,753 --> 00:20:56,988
This could also be self.pan,    
that's allowed,                 

436
00:20:56,990 --> 00:21:00,591
saying pan.panGesture,          
pan recognizer in myself.       

437
00:21:00,593 --> 00:21:03,461
Also you could omit it,         
that part in totally and        

438
00:21:03,463 --> 00:21:07,231
just say panRecognizer:         
because the default is for      

439
00:21:07,233 --> 00:21:07,832
it to be in myself.             

440
00:21:07,834 --> 00:21:10,701
So there's three ways I         
could have specified that,      

441
00:21:10,703 --> 00:21:14,138
viewController.pan, self.pan,   
or just pan.                    

442
00:21:14,140 --> 00:21:16,407
But notice it does have         
that argument by the way,       

443
00:21:16,409 --> 00:21:19,477
that argument is gonna be the   
recognizer passed back to me.   

444
00:21:19,479 --> 00:21:22,213
So when the pan starts to be    
recognized, it's gonna call     

445
00:21:22,215 --> 00:21:24,949
this method, and that           
recognizer is gonna be passed.  

446
00:21:24,951 --> 00:21:28,019
This pan gesture recognizer     
called panGestureRecognizer     

447
00:21:28,021 --> 00:21:31,422
right there, that's gonna be    
passed back to me each time.    

448
00:21:31,424 --> 00:21:34,458
Now I've got a gesture          
recognizer for                  

449
00:21:34,460 --> 00:21:37,128
panning, I just add             
it to the view,                 

450
00:21:37,130 --> 00:21:41,732
only views are capable          
of recognizing gestures.        

451
00:21:41,734 --> 00:21:43,501
So if you have                  
a gesture recognizer,           

452
00:21:43,503 --> 00:21:47,305
the only addGestureRecognizer   
method in the entire UI kit is  

453
00:21:47,307 --> 00:21:50,541
in UIView, so you have          
to send it to UIView, or        

454
00:21:50,543 --> 00:21:52,576
a subclass of UIView.           

455
00:21:52,778 --> 00:21:56,347
Let's talk about the handling,  
so now this is code,            

456
00:21:56,349 --> 00:21:56,781
adds the handler so             

457
00:21:56,783 --> 00:22:01,018
that the view is gonna start    
looking for pan gestures.       

458
00:22:01,020 --> 00:22:01,986
And then when it finds them,    

459
00:22:01,988 --> 00:22:05,289
it's going to start calling     
this pan recognizer.            

460
00:22:05,291 --> 00:22:06,991
Now before we can               
look at the code for            

461
00:22:06,993 --> 00:22:09,794
that we gotta understand        
a few things about it.          

462
00:22:09,796 --> 00:22:12,563
One is that when you get        
a gesture like a pan or         

463
00:22:12,565 --> 00:22:17,501
a pinch you need some concrete  
subclass specific information   

464
00:22:17,503 --> 00:22:18,469
about it like a pan.            

465
00:22:18,471 --> 00:22:20,838
You gotta know where it is,     
or a pinch,                     

466
00:22:20,840 --> 00:22:23,040
you gotta know                  
much you pinched.               

467
00:22:23,042 --> 00:22:25,843
So we have to understand        
what that means,                

468
00:22:25,845 --> 00:22:29,480
now for a pan gesture           
recognizer, there are three.    

469
00:22:29,482 --> 00:22:32,216
It's actually a little more,    
but there's this three very     

470
00:22:32,218 --> 00:22:34,819
important pieces of concrete    
information about the pan.      

471
00:22:34,821 --> 00:22:39,724
So, translation(in: UIView) is  
a function in the pan gesture   

472
00:22:39,726 --> 00:22:41,792
recognizer where                
you can ask it,                 

473
00:22:41,794 --> 00:22:45,062
how far has this pan            
moved since it started.         

474
00:22:45,064 --> 00:22:48,299
How far has it moved from the   
start as I'm moving around,     

475
00:22:48,301 --> 00:22:51,469
x and y, it's a CG point,       
so it's giving me the x and     

476
00:22:51,471 --> 00:22:54,171
y where it's moved              
to since it started.            

477
00:22:54,173 --> 00:22:57,541
Velocity says how fast          
is the finger moving.           

478
00:22:57,543 --> 00:22:59,477
Is it kind of                   
whipping it around or           

479
00:22:59,479 --> 00:23:00,478
is it going really slow?        

480
00:23:00,480 --> 00:23:01,812
Because if it's                 
going really slow,              

481
00:23:01,814 --> 00:23:04,448
maybe you wanna do a very       
you know, small drawing.        

482
00:23:04,450 --> 00:23:05,449
And if he's whipping            
it really fast and              

483
00:23:05,451 --> 00:23:08,018
you just wanna you know, moves  
something around, who knows?    

484
00:23:08,020 --> 00:23:10,321
And then there's                
setTranslation,                 

485
00:23:10,323 --> 00:23:12,523
now this last one is            
kinda cool because              

486
00:23:12,525 --> 00:23:15,893
if you just know the start      
point and where it's moved to.  

487
00:23:15,895 --> 00:23:19,830
You're not really getting       
the incremental move with       

488
00:23:19,832 --> 00:23:20,731
each time you update,           

489
00:23:20,733 --> 00:23:23,734
so you can actually set         
that translation to zero.       

490
00:23:23,736 --> 00:23:26,270
And then instead of getting     
the distance from the origin,   

491
00:23:26,272 --> 00:23:29,039
you're getting from the         
distance from the last time     

492
00:23:29,041 --> 00:23:29,407
this was sent to you.           

493
00:23:29,409 --> 00:23:32,109
Cuz this handler's going        
to be sent to you over and      

494
00:23:32,111 --> 00:23:34,512
over as the pan moves           
around repeatedly.              

495
00:23:34,514 --> 00:23:37,081
Hundreds of times as you        
move move around, so            

496
00:23:37,083 --> 00:23:40,851
often you'll wanna set that     
translation back to zero,       

497
00:23:40,853 --> 00:23:43,354
it gives you                    
incremental panning.            

498
00:23:43,356 --> 00:23:45,723
You'll see that with some       
of the other concrete           

499
00:23:45,725 --> 00:23:45,890
Now, the abstract superclass,   
the UIGestureRecognizer,        

500
00:23:45,892 --> 00:23:48,592
ones as well.                   

501
00:23:48,594 --> 00:23:52,296
even though you don't make one  
it still is the superclass of   

502
00:23:52,298 --> 00:23:52,930
these things.                   

503
00:23:52,932 --> 00:23:53,497
And you do inherit,             

504
00:23:53,499 --> 00:23:57,868
especially this one very        
important var, Called state.    

505
00:23:57,870 --> 00:24:00,871
And a state tells you           
the state of the gesture's,     

506
00:24:00,873 --> 00:24:02,206
how it's being recognized.      

507
00:24:02,208 --> 00:24:05,342
So all of these gesture         
recognizers start out in        

508
00:24:05,344 --> 00:24:06,911
the state possible.             

509
00:24:06,913 --> 00:24:09,447
It's possible this              
gesture could happen.           

510
00:24:09,449 --> 00:24:12,850
And then, once it starts if     
it's a continuous gesture       

511
00:24:12,852 --> 00:24:15,553
like a pan or a pinch you       
go to the state began.          

512
00:24:15,555 --> 00:24:18,622
So this isn't like, " a pan!,   
I think it's started".          

513
00:24:18,624 --> 00:24:21,358
So you'll get your handlers     
called and you can look at      

514
00:24:21,360 --> 00:24:24,295
the state of the recognizer     
and say, it began.              

515
00:24:24,297 --> 00:24:27,431
And then,                       
every time the finger moves,    

516
00:24:27,433 --> 00:24:27,765
it's gonna get changed.         

517
00:24:27,767 --> 00:24:30,534
It gets change, change,         
change, change, change,         

518
00:24:30,536 --> 00:24:30,668
change, change.                 

519
00:24:30,670 --> 00:24:32,937
You're getting your handler     
called repeatedly and           

520
00:24:32,939 --> 00:24:35,673
no anything that's changing     
is those methods above,         

521
00:24:35,675 --> 00:24:38,142
translation and                 
also the state.                 

522
00:24:38,144 --> 00:24:38,242
Moves to change.                

523
00:24:38,244 --> 00:24:40,811
And then, when the finger       
goes up, you get ended.         

524
00:24:40,813 --> 00:24:44,381
You'll get your handler called  
and the state will be ended.    

525
00:24:44,383 --> 00:24:49,487
Now, for a discrete             
gesture like a swipe,           

526
00:24:49,489 --> 00:24:51,188
a swipe either happened or      
not.                            

527
00:24:51,190 --> 00:24:52,990
When you're looking at          
a swipe you don't get           

528
00:24:52,992 --> 00:24:56,393
the swipe started and it's      
moving across the screen and    

529
00:24:56,395 --> 00:24:57,294
it comes off, no.               

530
00:24:57,296 --> 00:24:58,496
Either the swipe happened or    
not.                            

531
00:24:58,498 --> 00:25:00,030
So you would just               
get called once and             

532
00:25:00,032 --> 00:25:03,334
the stage is gonna go straight  
to being ended or recognized.   

533
00:25:03,336 --> 00:25:08,706
But you have to be a little     
bit careful of the states       

534
00:25:08,708 --> 00:25:11,542
failed and cancelled.           

535
00:25:11,544 --> 00:25:14,378
Failed might be because         
you started a gesture and       

536
00:25:14,380 --> 00:25:15,446
then the system realized,       
my gosh,                        

537
00:25:15,448 --> 00:25:19,149
that wasn't a pan gesture,      
that was the start of a swipe.  

538
00:25:19,151 --> 00:25:20,184
Or something like that.         

539
00:25:20,186 --> 00:25:22,152
And so,                         
it switches to a swipe.         

540
00:25:22,154 --> 00:25:25,456
So you could have canceled,     
and then the other one,         

541
00:25:25,458 --> 00:25:28,359
or the failed, and then you     
also didn't have canceled.      

542
00:25:28,361 --> 00:25:31,195
You're in the middle of         
panning, phone call comes in,   

543
00:25:31,197 --> 00:25:34,665
takes over your screen, person  
says, hello, how you doing?     

544
00:25:34,667 --> 00:25:38,335
Well, clearly,                  
that pan gesture was canceled.  

545
00:25:38,337 --> 00:25:39,336
So you could get that,          
as well.                        

546
00:25:39,338 --> 00:25:41,739
So if you ever do anything,     
when you gesture ends,          

547
00:25:41,741 --> 00:25:45,109
then you have to be careful     
to clean up when it fails, or   

548
00:25:45,111 --> 00:25:46,477
gets canceled, as well.         

549
00:25:46,479 --> 00:25:47,745
So that's the state.            

550
00:25:47,747 --> 00:25:51,582
So let's take a look then,      
knowing what we know about pan  

551
00:25:51,584 --> 00:25:53,717
gestures, what the handler      
would look like.                

552
00:25:53,719 --> 00:25:56,387
So remember that                
the handler is called pan,      

553
00:25:56,389 --> 00:25:58,989
recognizer is the argument      
there, and that is the pan      

554
00:25:58,991 --> 00:26:01,625
gesture recognizer itself       
coming back to us.              

555
00:26:01,627 --> 00:26:03,127
And its state will              
be different,                   

556
00:26:03,129 --> 00:26:05,829
and we can ask it about         
translation and view and        

557
00:26:05,831 --> 00:26:06,263
all those things.               

558
00:26:06,265 --> 00:26:09,567
So the first thing we're gonna  
do is look at that state and    

559
00:26:09,569 --> 00:26:12,469
I'm going to do the same        
thing whether the pan is,       

560
00:26:12,471 --> 00:26:14,872
has changed or                  
whether the finger went up.     

561
00:26:14,874 --> 00:26:16,540
That's kinda the last           
position of the pan,            

562
00:26:16,542 --> 00:26:18,008
we're gonna do                  
the exact same thing.           

563
00:26:18,010 --> 00:26:21,078
Notice by the way I'm using     
this switch thing fallthrough,  

564
00:26:21,080 --> 00:26:23,013
hopefully you got that in       
your reading assignment.        

565
00:26:23,015 --> 00:26:26,317
That basically just means that  
you wanna fall through to       

566
00:26:26,319 --> 00:26:29,753
the next case cuz in a lot of   
languages that's the default,   

567
00:26:29,755 --> 00:26:31,422
but in Swift it's               
not the default,                

568
00:26:31,424 --> 00:26:32,323
you don't fall through.         

569
00:26:32,325 --> 00:26:34,191
So fallthrough makes            
you fall through,               

570
00:26:34,193 --> 00:26:35,392
it's a special key word.        

571
00:26:35,394 --> 00:26:39,029
You could also say              
case.changed.ended: that        

572
00:26:39,031 --> 00:26:40,764
would probably be               
actually better.                

573
00:26:40,766 --> 00:26:42,299
We'll do that in the demo.      

574
00:26:42,767 --> 00:26:46,971
So if the pan moves a little    
or it ends, then I'm going to   

575
00:26:46,973 --> 00:26:51,542
get the translation from        
where we started at first       

576
00:26:51,544 --> 00:26:54,545
by asking for the translation   
in the pannable view.           

577
00:26:54,547 --> 00:26:56,981
That's the view the pan         
is having there.                

578
00:26:56,983 --> 00:26:58,082
You're almost always            
gonna ask for                   

579
00:26:58,084 --> 00:26:59,717
the translation in              
the pannable view.              

580
00:26:59,719 --> 00:27:00,918
But you could ask for           
it in other views and           

581
00:27:00,920 --> 00:27:04,521
it will convert to that view's  
coordinate system if you want.  

582
00:27:04,523 --> 00:27:06,490
But almost always               
you're asking for               

583
00:27:06,492 --> 00:27:08,125
the one in the pannable view.   

584
00:27:08,127 --> 00:27:10,661
Then, I'm gonna take that       
translation that I'm gonna      

585
00:27:10,663 --> 00:27:13,697
move and I'm gonna go do        
something with my app.          

586
00:27:13,699 --> 00:27:13,964
Draw a line to,                 

587
00:27:13,966 --> 00:27:16,667
if I'm tracking the finger      
with the line, or               

588
00:27:16,669 --> 00:27:17,701
if I'm moving something,        

589
00:27:17,703 --> 00:27:20,037
I'm gonna move the thing        
to the new position.            

590
00:27:20,039 --> 00:27:23,107
Then, if I want, I can set      
translation to zero so          

591
00:27:23,109 --> 00:27:25,142
the next time this              
handler is called,              

592
00:27:25,144 --> 00:27:28,512
the translation is gonna        
be just the distance from       

593
00:27:28,514 --> 00:27:30,648
the last time it was called.    

594
00:27:30,650 --> 00:27:33,717
As opposed to the distance      
from where it all started.      

595
00:27:34,419 --> 00:27:35,919
Where the pan started.          

596
00:27:35,921 --> 00:27:37,554
So that's it.                   

597
00:27:37,556 --> 00:27:38,889
That's how a handler works,     
it's easy.                      

598
00:27:38,891 --> 00:27:41,759
Let's talk a little bit about   
some of the other concrete      

599
00:27:41,761 --> 00:27:45,029
gestures.                       

600
00:27:45,031 --> 00:27:48,365
So I put my fingers down,       
two fingers on the screen.      

601
00:27:48,367 --> 00:27:50,034
Now, the scale is 1.0.          

602
00:27:50,036 --> 00:27:52,803
If I put my fingers             
twice as far apart,             

603
00:27:52,805 --> 00:27:53,837
now the scale is 2.0.           

604
00:27:53,839 --> 00:27:57,408
If I go down to half as         
small now, the scale is 0.5.    

605
00:27:57,410 --> 00:27:58,842
So that's what pinch is doing.  

606
00:27:58,844 --> 00:28:01,345
It just constantly reporting    
what the scale is,              

607
00:28:01,347 --> 00:28:03,213
relative to what                
the pinch started.              

608
00:28:03,215 --> 00:28:05,849
Now, that scale is              
not read-only var, so           

609
00:28:05,851 --> 00:28:06,950
you can reset it as well.       

610
00:28:06,952 --> 00:28:09,486
And then,                       
you'll get incremental scale.   

611
00:28:09,488 --> 00:28:11,722
How much the scale has          
changed since the last time?    

612
00:28:11,724 --> 00:28:15,659
There's almost like you keep    
resetting the initial finger    

613
00:28:15,661 --> 00:28:18,729
down, to scale,                 
if you set that scale to one.   

614
00:28:18,731 --> 00:28:21,365
That's how you can get          
incremental scale.              

615
00:28:21,367 --> 00:28:22,633
We'll do that in                
the demo as well.               

616
00:28:22,635 --> 00:28:24,368
And then,                       
you also get velocity.          

617
00:28:24,370 --> 00:28:29,239
How many points for a second    
or whatever this thing is, or   

618
00:28:29,241 --> 00:28:30,541
not really a point fact.        

619
00:28:30,543 --> 00:28:32,242
It's a scale factor.            

620
00:28:32,244 --> 00:28:33,644
The percent of                  
scale is changing,              

621
00:28:33,646 --> 00:28:34,945
how fast it's                   
changing per second.            

622
00:28:34,947 --> 00:28:38,849
There's also a rotation         
gesture that's two fingers      

623
00:28:38,851 --> 00:28:41,452
down, like turning a knob.      

624
00:28:42,821 --> 00:28:43,821
Keep the two fingers down.      

625
00:28:43,823 --> 00:28:44,254
You turn them.                  

626
00:28:44,256 --> 00:28:46,023
You get the rotation there.     

627
00:28:46,025 --> 00:28:47,391
The rotation is in radians.     

628
00:28:47,393 --> 00:28:50,494
Again, it's not read only so    
you could reset it and          

629
00:28:50,496 --> 00:28:52,096
get the incremental turning.    

630
00:28:52,098 --> 00:28:54,465
And you also get the velocity   
and radians per second.         

631
00:28:54,467 --> 00:28:56,300
How fast the person is          
turning their knob.             

632
00:28:56,302 --> 00:29:00,504
There's also SwipeGesture,      
and again this is discrete so   

633
00:29:00,506 --> 00:29:04,408
your handler's only             
gonna be called once.           

634
00:29:04,410 --> 00:29:06,110
If it recognizes this gesture.  

635
00:29:06,112 --> 00:29:06,710
Now, because of that,           

636
00:29:06,712 --> 00:29:09,713
you have to configure           
a SwipeGesture recognizer.      

637
00:29:09,715 --> 00:29:10,013
You create it and               

638
00:29:10,015 --> 00:29:12,483
then you wanna set bars         
here like direction.            

639
00:29:12,485 --> 00:29:15,819
You wanna left swipe,           
right swipe, up, down.          

640
00:29:15,821 --> 00:29:17,054
And how many fingers?           

641
00:29:17,056 --> 00:29:18,055
Two finger swipe?               

642
00:29:18,057 --> 00:29:19,123
Three finger swipe?             

643
00:29:19,125 --> 00:29:19,223
You set all that up when you    
create it because then it's     

644
00:29:19,225 --> 00:29:22,693
One finger swipe?               

645
00:29:22,695 --> 00:29:23,527
just gonna be looking for       
that.                           

646
00:29:23,529 --> 00:29:26,697
And when it finds it, it's      
gonna call your handler once.   

647
00:29:26,699 --> 00:29:28,298
Cuz it's discrete.              

648
00:29:28,300 --> 00:29:31,201
Then there's tap gesture,       
similar to the swipe gesture    

649
00:29:31,203 --> 00:29:32,136
in that you have                
to configure it.                

650
00:29:32,138 --> 00:29:34,805
Number of taps,                 
like is it a double tap and     

651
00:29:34,807 --> 00:29:37,074
is it two finger tap,           
you do that.                    

652
00:29:37,076 --> 00:29:40,544
And then, it's gonna call,      
this is not purely a discrete   

653
00:29:40,546 --> 00:29:44,481
gesture, like SwipeGesture,     
really you're looking for       

654
00:29:44,483 --> 00:29:47,584
the state ended with            
a tap as well, but              

655
00:29:47,586 --> 00:29:49,553
still you have to preconfigure  
it like a swipe, so             

656
00:29:49,555 --> 00:29:53,490
it behaves almost exactly       
like a discrete gesture.        

657
00:29:53,925 --> 00:29:56,627
So hopefully this will make a   
lot more sense when we show in  

658
00:29:56,629 --> 00:29:59,329
the demo here, our demo we're   
gonna add three gestures,       

659
00:29:59,331 --> 00:30:02,599
one is a pinch, that's just     
gonna make the face bigger and  

660
00:30:02,601 --> 00:30:02,933
Which has nothing to do with    
a model that view only so       

661
00:30:02,935 --> 00:30:05,169
smaller.                        

662
00:30:05,171 --> 00:30:07,738
we're gonna put that            
handler in the view.            

663
00:30:07,740 --> 00:30:12,142
And then, we gonna do pan,      
moving around.                  

664
00:30:12,144 --> 00:30:14,411
Actually no, we're gonna        
swipe instead of pan.           

665
00:30:14,413 --> 00:30:14,578
Let's use swipe.                

666
00:30:14,580 --> 00:30:18,215
We do swipe and we swipe up     
to make our face happier or     

667
00:30:18,217 --> 00:30:19,149
swipe down to make it sadder.   

668
00:30:19,151 --> 00:30:21,518
And we'll have tab to open and  
close your eyes.                

669
00:30:21,520 --> 00:30:22,152
How about that?                 

670
00:30:22,154 --> 00:30:24,121
And those last two              
are obviously gonna affect      

671
00:30:24,123 --> 00:30:27,324
the model, so the'll have to    
be handled by the controller.   

672
00:30:27,326 --> 00:30:31,461
So le's go back to our          
code where we were here and     

673
00:30:31,463 --> 00:30:32,729
how we can do this.             

674
00:30:32,731 --> 00:30:35,632
Le's do the pinch first.        

675
00:30:35,634 --> 00:30:38,769
Now, the pinch does't           
affect the model, so            

676
00:30:38,771 --> 00:30:39,870
it can be handled by the view.  

677
00:30:39,872 --> 00:30:41,939
So le's actually go             
over to our view and            

678
00:30:41,941 --> 00:30:46,910
start by writing a handler for  
a pinch.                        

679
00:30:46,912 --> 00:30:49,813
I'm gonna call this handler     
func changeScale because        

680
00:30:49,815 --> 00:30:52,716
that's what it's gonna do,      
it's gonna be a pinch.          

681
00:30:52,718 --> 00:30:58,522
So it's gonna change            
the scale of our head.          

682
00:30:58,524 --> 00:31:04,962
And I'm gonna say byReactingTo  
a pinchRecognizer,              

683
00:31:04,964 --> 00:31:09,032
Which will be UI                
pinch recognizer,               

684
00:31:09,034 --> 00:31:14,137
pinch gesture recognizer,       
there we go.                    

685
00:31:14,139 --> 00:31:16,206
So this is gonna                
be my handler.                  

686
00:31:16,208 --> 00:31:19,710
So it's gonna get this pinch    
sent back to me all the time.   

687
00:31:19,712 --> 00:31:21,912
I'm not gonna look at that      
pinch of scale to know          

688
00:31:21,914 --> 00:31:23,580
how much to scale               
my own scale.                   

689
00:31:23,582 --> 00:31:31,154
So I'm gonna switch on          
the pinch recognizer's state.   

690
00:31:31,156 --> 00:31:34,558
Remember, it inherits that      
from UI gesture recognizer,     

691
00:31:34,560 --> 00:31:36,660
which is the super              
class of this.                  

692
00:31:36,662 --> 00:31:40,063
And in the case that            
it is changed, so               

693
00:31:40,065 --> 00:31:41,298
the pinch has changed, or       

694
00:31:41,300 --> 00:31:45,802
if it's ended, which means the  
user lifted the fingers off.    

695
00:31:45,804 --> 00:31:50,240
Neither of those cases          
I'm gonna adjust my scale       

696
00:31:50,242 --> 00:31:54,344
by whatever the scale is        
of the pinchRecognizer.         

697
00:31:56,014 --> 00:31:57,247
Simple as that.                 

698
00:31:58,516 --> 00:32:03,086
Now the thing about             
this though, what if            

699
00:32:03,088 --> 00:32:08,025
I start my pinch here 1.0, and  
I move it just a little bit.    

700
00:32:08,027 --> 00:32:08,158
Okay, fine.                     

701
00:32:08,160 --> 00:32:09,927
My scale gets moved             
just a little bit.              

702
00:32:09,929 --> 00:32:12,329
What if I moved all             
the way out to scale 2.0?       

703
00:32:12,331 --> 00:32:13,964
Now my face gets 2.0.           

704
00:32:13,966 --> 00:32:16,400
Now what if I move              
it out to 2.1?                  

705
00:32:16,402 --> 00:32:22,239
This code's gonna make my face  
go from 2.1 to 4.2 you see.     

706
00:32:22,241 --> 00:32:25,442
So I need to keep resetting     
this scale back to 1 all        

707
00:32:25,444 --> 00:32:28,712
the time so I'm getting         
incremental scale changes.      

708
00:32:28,714 --> 00:32:32,115
So I'm gonna say pinch          
recognizer .scale = 1.          

709
00:32:32,117 --> 00:32:34,918
So I'm just                     
constantly resetting.           

710
00:32:34,920 --> 00:32:36,620
Every time this gets called,    
and                             

711
00:32:36,622 --> 00:32:39,489
I move my scale up,             
I'm gonna reset the scale so    

712
00:32:39,491 --> 00:32:42,492
that I'm starting at one        
again with my pinch.            

713
00:32:42,494 --> 00:32:45,862
That gives me incremental       
scaling there.                  

714
00:32:45,864 --> 00:32:50,067
And of course we have to        
handle all the other cases      

715
00:32:50,069 --> 00:32:50,600
of the state.                   

716
00:32:50,602 --> 00:32:51,201
But I'm not gonna do anything.  

717
00:32:51,203 --> 00:32:53,403
So I'm not gonna do anything    
when the pinch starts.          

718
00:32:53,405 --> 00:32:54,972
If it gets cancelled,           
I don't care.                   

719
00:32:54,974 --> 00:32:57,107
I'll just leave it              
whatever scale it was           

720
00:32:57,109 --> 00:32:57,374
in at the time, etc.            

721
00:32:57,376 --> 00:33:02,079
So I don't need to really       
handle any other cases.         

722
00:33:02,081 --> 00:33:02,279
So that's it.                   

723
00:33:02,281 --> 00:33:06,216
The handlers are super          
easy to write.                  

724
00:33:06,218 --> 00:33:06,516
And this scale by the way,      

725
00:33:06,518 --> 00:33:09,920
everyone understands, is this   
scale right here, this bar.     

726
00:33:09,922 --> 00:33:11,521
This is our scale.              

727
00:33:13,391 --> 00:33:14,758
Questions about that?           

728
00:33:15,059 --> 00:33:15,559
So now we have a handler.       

729
00:33:15,561 --> 00:33:18,829
We have someone to handle when  
a pinch happens in the view.    

730
00:33:18,831 --> 00:33:24,001
Now all we need to do is add    
a recognizer that recognizes    

731
00:33:24,003 --> 00:33:26,003
a pinch, and                    
calls the handler.              

732
00:33:26,005 --> 00:33:28,438
So we're gonna do that up       
here in our face views          

733
00:33:28,440 --> 00:33:31,008
didSet, because this is the     
first time we got a hold of     

734
00:33:31,010 --> 00:33:33,977
that face view, and I want      
the face view to be the one     

735
00:33:33,979 --> 00:33:36,680
that is recognizing             
this pinch.                     

736
00:33:36,682 --> 00:33:39,349
So let's start by               
creating the handlers, so       

737
00:33:39,351 --> 00:33:42,185
I'm going to create a local     
variabilities to make it clear  

738
00:33:42,187 --> 00:33:42,619
to my handler.                  

739
00:33:42,621 --> 00:33:47,991
It's a hashtag selector and     
its the faceView method,        

740
00:33:47,993 --> 00:33:52,429
changeScalebyReactingTo,        
that's my handler.              

741
00:33:53,131 --> 00:33:55,866
And then I am going to          
create a recognizer here,       

742
00:33:55,868 --> 00:33:58,035
a pinch recognizer and          

743
00:33:58,037 --> 00:34:02,072
it's going to be                
a UIPinchGestureRecognizer and  

744
00:34:02,074 --> 00:34:04,674
of course we need               
the target and the action.      

745
00:34:04,676 --> 00:34:06,810
That's all we need to           
create a recognizer.            

746
00:34:06,812 --> 00:34:10,714
The target is going             
to be the faceView,             

747
00:34:10,948 --> 00:34:13,216
it's gonna handle this          
thing itself, and               

748
00:34:13,218 --> 00:34:15,786
the action is gonna             
be this handler.                

749
00:34:18,456 --> 00:34:18,488
That's it.                      

750
00:34:18,490 --> 00:34:21,024
Now we just need to             
take the faceView and           

751
00:34:21,026 --> 00:34:25,128
add GestureRecognizer,          
the pinchRecognizer.            

752
00:34:25,130 --> 00:34:26,263
And by doing that,              

753
00:34:26,265 --> 00:34:28,698
face view is gonna start        
recognizing pinches.            

754
00:34:28,700 --> 00:34:31,701
And when it recognizes one,     
it's gonna send this handler    

755
00:34:31,703 --> 00:34:34,638
message right here              
to the face view.               

756
00:34:34,640 --> 00:34:39,709
Now, if you                     

757
00:34:39,711 --> 00:34:47,117
hope this is gonna work,        
let's see.                      

758
00:34:47,119 --> 00:34:48,285
When you might ask,             
by the way,                     

759
00:34:48,287 --> 00:34:51,555
if I have a mouse here,         
how do I do a pinch?            

760
00:34:51,557 --> 00:34:52,956
In my thing, okay?              

761
00:34:52,958 --> 00:34:55,158
Well the magic                  
there is option.                

762
00:34:55,160 --> 00:34:56,493
If you press option, and look,  

763
00:34:56,495 --> 00:34:57,828
I haven't even                  
touched anything,               

764
00:34:57,830 --> 00:34:59,896
see I have two                  
things right there.             

765
00:34:59,898 --> 00:35:00,831
And they kinda stay             
the same apart.                 

766
00:35:00,833 --> 00:35:04,367
You can also do option shift,   
and they'll offset them, so     

767
00:35:04,369 --> 00:35:06,169
you can pinch                   
anywhere you want.              

768
00:35:06,171 --> 00:35:09,539
So anyway, do that.             

769
00:35:10,274 --> 00:35:12,075
No, it's not working.           

770
00:35:12,077 --> 00:35:14,778
See that?                       
How could that possibly be?     

771
00:35:14,780 --> 00:35:17,214
Well, let's take a moment       
here and debug this.            

772
00:35:17,216 --> 00:35:18,849
Why would this not be working?  

773
00:35:18,851 --> 00:35:20,350
I put that pinch gesture.       

774
00:35:20,352 --> 00:35:21,318
I added it.                     

775
00:35:21,320 --> 00:35:22,486
I have a handler.               

776
00:35:22,488 --> 00:35:25,188
Let's start by going            
to our FaceView and             

777
00:35:25,190 --> 00:35:27,624
putting a break point right     
here in our handler Bar.        

778
00:35:27,626 --> 00:35:30,594
And let's see if it's           
actually handling it okay.      

779
00:35:30,596 --> 00:35:33,196
So I'm going to                 
go back to here,                

780
00:35:33,198 --> 00:35:37,534
I'm going to get my             
option ready, pinch.            

781
00:35:37,536 --> 00:35:38,468
Alright!                        

782
00:35:38,470 --> 00:35:39,302
It broke.                       

783
00:35:39,304 --> 00:35:42,772
It's definitely                 
calling my handler.             

784
00:35:42,774 --> 00:35:43,673
So what's the problem?          

785
00:35:43,675 --> 00:35:44,107
Let's do nothing.               

786
00:35:44,109 --> 00:35:46,643
Let's say let's                 
print our scale and             

787
00:35:46,645 --> 00:35:48,778
see if our scale                
is being change.                

788
00:35:48,780 --> 00:35:50,480
I'm just gonna put a little     
print line in here.             

789
00:35:50,482 --> 00:35:53,150
Use a combination of            
break points here and           

790
00:35:53,152 --> 00:35:55,585
doing print debugging.          

791
00:35:55,587 --> 00:35:55,685
And let's,                      

792
00:35:55,687 --> 00:36:00,190
let's see if the scale is       
actually being changed.         

793
00:36:03,194 --> 00:36:03,326
Here we go.                     

794
00:36:03,328 --> 00:36:07,230
Again option key, and,          
it looks like it is.            

795
00:36:07,232 --> 00:36:09,666
I see something in              
the background there.           

796
00:36:09,901 --> 00:36:11,434
Sure enough look at that.       

797
00:36:11,436 --> 00:36:14,905
Half, double,                   
it's working perfectly.         

798
00:36:14,907 --> 00:36:16,439
Why is it not                   
redrawing that face.            

799
00:36:16,441 --> 00:36:20,076
Can anyone thing why            
it's not redrawing.             

800
00:36:20,578 --> 00:36:22,179
Cuz we know it's working.       

801
00:36:22,847 --> 00:36:27,851
It's because when you change    
a var, like scale, right        

802
00:36:27,853 --> 00:36:34,391
here it does not automatically  
know to redraw your view.       

803
00:36:34,659 --> 00:36:35,859
That scale is changing fine.    

804
00:36:35,861 --> 00:36:38,261
But the last time draw was      
called was when this first      

805
00:36:38,263 --> 00:36:41,364
thing was drawn, you know,      
this method we have down here   

806
00:36:41,366 --> 00:36:44,501
in the FaceView                 
called draw CGRect.             

807
00:36:44,503 --> 00:36:44,701
This thing?                     

808
00:36:44,703 --> 00:36:46,803
This was called when            
it was first drawn and          

809
00:36:46,805 --> 00:36:48,205
it's never been called again.   

810
00:36:48,207 --> 00:36:52,943
So without this being called    
there's no other way to draw    

811
00:36:52,945 --> 00:36:56,546
my face I told you this         
is the only way to draw.        

812
00:36:56,548 --> 00:37:00,083
So we have to get               
this to get called.             

813
00:37:00,085 --> 00:37:00,984
And how are we gonna do that?   

814
00:37:00,986 --> 00:37:04,254
Well we're just gonna slide     
right up here to scale, and     

815
00:37:04,256 --> 00:37:09,292
any time scale get called,      
we're gonna do a didSet.        

816
00:37:09,460 --> 00:37:12,128
Okay, and                       
inside here we're going to      

817
00:37:12,130 --> 00:37:14,064
cause ourself to get drawn.     

818
00:37:14,066 --> 00:37:14,698
Now how do I do that?           

819
00:37:14,700 --> 00:37:17,701
Do I call draw like that?       

820
00:37:18,669 --> 00:37:21,504
No, I see a lot of shaking      
heads no and absolutely not.    

821
00:37:21,506 --> 00:37:23,106
Of course we never call draw.   

822
00:37:23,108 --> 00:37:25,775
We get huge trouble             
if we do that.                  

823
00:37:25,777 --> 00:37:26,576
What do we call instead?        

824
00:37:26,578 --> 00:37:28,645
Anyone remember                 
from the slides?                

825
00:37:30,381 --> 00:37:32,048
SetNeedsDisplay.                

826
00:37:32,516 --> 00:37:35,285
So we're telling the system     
something about us has          

827
00:37:35,287 --> 00:37:37,254
changed, we need to             
be re-displayed.                

828
00:37:37,256 --> 00:37:41,224
So please, at your earliest     
convenience, re-display us.     

829
00:37:41,226 --> 00:37:41,524
And that's what it's gonna do.  

830
00:37:41,526 --> 00:37:46,830
And in fact, we want this       
on all of our things here.      

831
00:37:49,267 --> 00:37:53,637
Any time any of these public    
things get changed by someone,  

832
00:37:53,639 --> 00:37:55,038
we want to re-display.          

833
00:37:55,040 --> 00:37:56,840
Let's put this                  
comment up here.                

834
00:37:56,842 --> 00:38:00,010
So this is very common to have  
this little snippet of code     

835
00:38:00,012 --> 00:38:02,946
after any var,                  
that when you change it,        

836
00:38:02,948 --> 00:38:05,315
would change the way            
things look.                    

837
00:38:05,549 --> 00:38:07,951
Now when we run we can          
actually go back here and       

838
00:38:07,953 --> 00:38:09,085
get rid of this print.          

839
00:38:09,087 --> 00:38:15,025
Pretty confident it's           

840
00:38:15,027 --> 00:38:19,362
going to work now.              

841
00:38:19,364 --> 00:38:23,400
Here I go on option again, and  
sure enough, look, our scale.   

842
00:38:23,402 --> 00:38:26,536
Since our scale changes here,   
that setNeedsDisplay is         

843
00:38:26,538 --> 00:38:30,740
asking to draw and iOS is       
accommodating us by drawing.    

844
00:38:32,777 --> 00:38:32,942
That's pretty cool,             

845
00:38:32,944 --> 00:38:36,446
that was quite simple to put    
in that gesture to do that.     

846
00:38:36,448 --> 00:38:38,848
So let's go back now            
to our controller, and          

847
00:38:38,850 --> 00:38:43,920
think about doing a gesture     
like a tap, to open the eyes.   

848
00:38:43,922 --> 00:38:47,324
Now again, the view could       
be the handler for that.        

849
00:38:47,326 --> 00:38:49,059
It arguably knows how to        
open an close its eyes.         

850
00:38:49,061 --> 00:38:51,995
But if we made the view be      
the handler for a tap, and it   

851
00:38:51,997 --> 00:38:55,732
opened the eyes, it would get   
out of sync with the model.     

852
00:38:55,734 --> 00:38:59,069
Cuz the model is what says      
whether the eyes are open,      

853
00:38:59,071 --> 00:38:59,736
not the face view.              

854
00:38:59,738 --> 00:39:00,970
Face view is a slave.           

855
00:39:00,972 --> 00:39:02,138
It's a minion of                
the controller,                 

856
00:39:02,140 --> 00:39:04,407
it's supposed to do what        
the controller wants, so        

857
00:39:04,409 --> 00:39:04,441
we can't do that.               

858
00:39:04,443 --> 00:39:08,011
So we're gonna have to have     
the controller handle a tap,    

859
00:39:08,013 --> 00:39:09,045
and change it in the model.     

860
00:39:09,047 --> 00:39:11,014
And then it'll automatically    

861
00:39:11,016 --> 00:39:14,217
update in the UI because of     
this line of code right here.   

862
00:39:14,219 --> 00:39:18,021
Any time we change our model    
it's gonna update our UI.       

863
00:39:18,023 --> 00:39:20,824
So we're gonna just have        
to have a handler for           

864
00:39:20,826 --> 00:39:23,493
tap that just                   
changes our model.              

865
00:39:23,495 --> 00:39:26,296
And that's all it needs to do.  

866
00:39:27,064 --> 00:39:28,331
Let's try that handler first.   

867
00:39:28,333 --> 00:39:31,601
Let's call that handler,        
how about toggleEyes            

868
00:39:31,603 --> 00:39:33,670
cuz we're gonna tap and         
it's gonna with the eyes.       

869
00:39:33,672 --> 00:39:36,139
If its opened it'll close,      
close it'll open.               

870
00:39:36,141 --> 00:39:41,311
And toggleEyes is               
a tapGestureRecognizer thing,   

871
00:39:41,313 --> 00:39:46,082
so I'm gonna say byReacting     
to a tapRecognizer              

872
00:39:46,084 --> 00:39:50,587
which is a type                 
UITapGestureRecognizer.         

873
00:39:50,589 --> 00:39:52,489
And here I'm just gonna say,    

874
00:39:52,491 --> 00:39:56,092
if the tapRecognizer.state      
is ended.                       

875
00:39:56,094 --> 00:39:56,993
So the tap happened.            

876
00:39:56,995 --> 00:40:02,132
Then I'm gonna let eyes, which  
is FacialExpression.Eyes,       

877
00:40:02,134 --> 00:40:05,068
just so that you know           
what type that is,              

878
00:40:05,070 --> 00:40:09,072
equal whatever my current       
expression's eyes are,          

879
00:40:09,074 --> 00:40:13,576
if the current expressions      
eyes are closed, then I'm       

880
00:40:13,578 --> 00:40:18,815
going to have them be open,     
otherwise they will be closed.  

881
00:40:18,817 --> 00:40:21,251
So I'm just toggling them.      

882
00:40:21,552 --> 00:40:26,222
So eyes now which is of         
type FacialExpression.Eyes,     

883
00:40:26,224 --> 00:40:29,325
it's got the opposite or        
whatever the old one had.       

884
00:40:29,327 --> 00:40:34,531
Now, I'm gonna set my model to  
equal a new facial expression.  

885
00:40:34,533 --> 00:40:35,732
That new facial                 
expression's eyes               

886
00:40:35,734 --> 00:40:38,601
are gonna be this new           
eyes I just calculated.         

887
00:40:38,603 --> 00:40:40,870
And the mouth is gonna be       
whatever the old mouth was.     

888
00:40:40,872 --> 00:40:44,040
I'm not doing anything to the   
mouth, so I'm just gonna say    

889
00:40:44,042 --> 00:40:46,576
expression.mouth, for           
the old one.                    

890
00:40:46,578 --> 00:40:48,344
So here I'm changing            
my model and                    

891
00:40:48,346 --> 00:40:50,680
that's gonna cause              
this didSet to happen.          

892
00:40:50,682 --> 00:40:51,915
It's gonna re-draw my view and  

893
00:40:51,917 --> 00:40:55,318
the eyes are gonna be the       
opposite of what they were.     

894
00:40:56,787 --> 00:40:58,188
So that's the handler.          

895
00:40:58,190 --> 00:40:58,455
That's gonna handle that.       

896
00:40:58,457 --> 00:41:02,325
So now we have to add           
a tap gesture recognizer        

897
00:41:02,327 --> 00:41:02,625
to our face view.               

898
00:41:02,627 --> 00:41:07,464
So this time let's just         
say let tapRecognizer =         

899
00:41:07,466 --> 00:41:09,499
UITapGestureRecognizer.         

900
00:41:09,501 --> 00:41:12,769
And as always we just           
specify target and selector.    

901
00:41:12,771 --> 00:41:15,238
So the target this              
time is not faceView,           

902
00:41:15,240 --> 00:41:16,506
up here it was faceView.        

903
00:41:16,508 --> 00:41:18,842
Now the target is myself.       

904
00:41:18,844 --> 00:41:21,744
And the action is going to be,  

905
00:41:21,746 --> 00:41:23,413
again I can say                 
faceView controller or          

906
00:41:23,415 --> 00:41:28,751
I can indicate self dot,        
we'll do that, toggle eyes.     

907
00:41:32,590 --> 00:41:35,658
And we need to put              
around this #selector.          

908
00:41:35,660 --> 00:41:40,263
Cuz we need to turn it into     
that particular selector.       

909
00:41:40,265 --> 00:41:42,765
Then again, I don't actually    
need that self in there,        

910
00:41:42,767 --> 00:41:42,899
Looks a little better cuz it    
defaults to my own methods.     

911
00:41:42,901 --> 00:41:47,737
I can just do that.             

912
00:41:48,205 --> 00:41:50,073
So we got the tap               
recognizer created.             

913
00:41:50,075 --> 00:41:52,609
Now we have to configure        
the tap recognizer              

914
00:41:52,611 --> 00:41:54,844
because we want it to           
happen on single taps.          

915
00:41:54,846 --> 00:41:58,047
So we could say for example     
numberOfTapsRequired = 1,       

916
00:41:58,049 --> 00:42:00,517
that happens to be the          
default, so probably I won't    

917
00:42:00,519 --> 00:42:02,619
need to actually say that,      
but we'll do it anyway.         

918
00:42:02,621 --> 00:42:05,788
And now we need to turn it      
on and we do that by adding     

919
00:42:05,790 --> 00:42:08,625
a gestureRecognizer             
to the FaceView.                

920
00:42:08,759 --> 00:42:11,528
If you don't do this step       
of adding it to some view       

921
00:42:11,530 --> 00:42:14,631
then that view is not going     
to be recognizing this.         

922
00:42:14,633 --> 00:42:16,633
So it's not gonna               
be doing anything.              

923
00:42:16,635 --> 00:42:19,836
Just an easy step               
to kind of forget.              

924
00:42:20,337 --> 00:42:25,508
All right, so let's             

925
00:42:25,510 --> 00:42:29,812
see if that works.              

926
00:42:29,814 --> 00:42:33,616
All right, so tap,              
it's working.                   

927
00:42:33,618 --> 00:42:37,720
Every time I tap,               
it opens and closes the eyes.   

928
00:42:37,722 --> 00:42:39,856
And it's changing               
it in the model.                

929
00:42:40,624 --> 00:42:40,957
So it changes the model,        

930
00:42:40,959 --> 00:42:44,794
that causes the update UI to    
happen, this update UI does     

931
00:42:44,796 --> 00:42:47,363
does this little thing          
to update the eyes.             

932
00:42:47,365 --> 00:42:52,602
When it calls eyes open         
over here okay, eyesOpen.       

933
00:42:52,604 --> 00:42:54,704
When it gets set,               
it calls NeedsDisplay,          

934
00:42:54,706 --> 00:42:56,272
which causes                    
the thing to redraw.            

935
00:42:56,274 --> 00:42:59,909
Everyone got that               
chain of events?                

936
00:43:01,045 --> 00:43:03,546
Let's do one other one here.    

937
00:43:03,548 --> 00:43:05,014
Which is to do a swipe.         

938
00:43:05,016 --> 00:43:07,850
So I'm gonna have a swipe,      
where swiping up makes          

939
00:43:07,852 --> 00:43:11,387
our face happier and            
swiping down makes it sadder.   

940
00:43:11,389 --> 00:43:14,624
So this has to be handled       
in the controller.              

941
00:43:14,626 --> 00:43:14,657
Why?                            

942
00:43:14,659 --> 00:43:16,459
Because this is                 
affecting the model.            

943
00:43:16,461 --> 00:43:17,660
Happiness is in the model.      

944
00:43:17,662 --> 00:43:21,831
So I'm gonna have a func        
called increaseHappiness.       

945
00:43:22,433 --> 00:43:25,268
It's just going to set          
the expression equal to         

946
00:43:25,270 --> 00:43:28,071
the existing expression but     
happier.                        

947
00:43:29,740 --> 00:43:32,275
I'll do a func                  
decreaseHappiness,              

948
00:43:32,277 --> 00:43:34,043
i's gonna be the opposite,      

949
00:43:34,045 --> 00:43:37,413
expression = the current        
expression but sadder.          

950
00:43:37,415 --> 00:43:39,182
And these vars here,            
happier and                     

951
00:43:39,184 --> 00:43:43,353
sadder, those are in the        
FacialExpression, right here.   

952
00:43:43,355 --> 00:43:45,388
You can look at those later     
to see how they work.           

953
00:43:45,390 --> 00:43:46,489
But basically the're            
just creating a new             

954
00:43:46,491 --> 00:43:49,525
FacialExpression where          
the mouth is happier or         

955
00:43:49,527 --> 00:43:50,360
the mouth is sadder.            

956
00:43:50,362 --> 00:43:52,261
And then the mouth knows        
how to be happy or sad or       

957
00:43:52,263 --> 00:43:55,031
it's using this raw value       
mechanism in enum, hopefully    

958
00:43:55,033 --> 00:43:57,400
you've figured that out in      
your reading assignment.        

959
00:43:57,402 --> 00:44:01,170
This is a great opportunity     
to go figure it out if you      

960
00:44:01,172 --> 00:44:02,005
didn't.                         

961
00:44:02,007 --> 00:44:07,810
Back in our controller here,    
we now have these handlers.     

962
00:44:07,812 --> 00:44:10,413
Notice these handlers           
have no argument.               

963
00:44:10,415 --> 00:44:12,315
Why do these handlers           
not have an argument,           

964
00:44:12,317 --> 00:44:14,617
like this ByReactingTo          
guy down here.                  

965
00:44:14,619 --> 00:44:16,552
Because a swipe gesture         
is discrete, so                 

966
00:44:16,554 --> 00:44:19,322
we never have to look at the    
swipe gesture when it happens,  

967
00:44:19,324 --> 00:44:21,024
we know it happened and         
that's all we need to know.     

968
00:44:21,026 --> 00:44:23,893
So these handlers do not ever   
need to look at the state or    

969
00:44:23,895 --> 00:44:27,830
anything like that, like a tap  
gesture or a swipe gesture or   

970
00:44:27,832 --> 00:44:29,232
a hand gesture.                 

971
00:44:29,234 --> 00:44:33,569
Let's add these guys to there,  
so                              

972
00:44:33,571 --> 00:44:37,940
I'm gonna let                   
swipeUpRecognizer =             

973
00:44:37,942 --> 00:44:45,615
UISwipeGestureRecognizer,       
again, target and action.       

974
00:44:45,617 --> 00:44:48,117
Again, the target is myself     
because it affects the model.   

975
00:44:48,119 --> 00:44:52,889
And I'm gonna have this be      
the selector increaseHappiness  

976
00:44:52,891 --> 00:44:55,158
because this is swipe up.       

977
00:44:55,160 --> 00:44:56,893
Okay, now I have                
to configure it.                

978
00:44:56,895 --> 00:45:01,197
SwipeUpRecognizer's direction   
is up, and                      

979
00:45:01,199 --> 00:45:02,632
now I'm gonna add it,           

980
00:45:02,634 --> 00:45:08,438
faceView.addGestureRecognizer-  
(swipeUpRecognizer).            

981
00:45:08,440 --> 00:45:09,872
And since swipeDown is so       
similar,                        

982
00:45:09,874 --> 00:45:12,709
I'm just going to copy and      
paste here.                     

983
00:45:12,711 --> 00:45:14,010
Copy and paste.                 

984
00:45:14,012 --> 00:45:19,415
And we will change swipe        
up to be swipe down.            

985
00:45:21,618 --> 00:45:23,853
And of course, the direction    
here now is down.               

986
00:45:23,855 --> 00:45:28,191
And it's decreaseHappiness and  
so I decrease.                  

987
00:45:28,193 --> 00:45:31,561
So I've added these two         
recognizers, up and             

988
00:45:31,563 --> 00:45:32,095
down swiping.                   

989
00:45:32,097 --> 00:45:33,830
And they're going               
to increase and                 

990
00:45:33,832 --> 00:45:35,998
decrease our happiness          
in the model.                   

991
00:45:36,000 --> 00:45:38,935
And when the model changes,     
update UI is called.            

992
00:45:38,937 --> 00:45:41,671
We're gonna look up mouth       
curvature in that dictionary.   

993
00:45:41,673 --> 00:45:43,139
We're gonnaset                  
the mouth curvature,            

994
00:45:43,141 --> 00:45:45,308
that's gonna do the didSet,     
we're in good shape.            

995
00:45:45,310 --> 00:45:48,878
So here we have a pretty sad    
guy, we'll open his eyes,       

996
00:45:48,880 --> 00:45:51,047
then we'll close,               
no leave them open.             

997
00:45:51,049 --> 00:45:52,448
Now we're gonna make            
him happier, and                

998
00:45:52,450 --> 00:45:53,449
happier, and happier.           

999
00:45:53,451 --> 00:45:54,517
Woo, he's really happy!         

1000
00:45:54,519 --> 00:45:59,055
And swiping down, no,           
not so happy after all.         

1001
00:46:01,492 --> 00:46:02,525
So that's it for gestures.      

1002
00:46:02,527 --> 00:46:05,862
Gestures are super-simple and   
super-powerful cuz all          

1003
00:46:05,864 --> 00:46:09,398
the logic going into detecting  
was that a swipe, or was that   

1004
00:46:09,400 --> 00:46:12,969
a pan, or what was that,        
was all done for you by iOS.    

1005
00:46:15,606 --> 00:46:20,910
Back to our                     

1006
00:46:20,912 --> 00:46:25,782
slides.                         

1007
00:46:25,784 --> 00:46:28,484
Time to talk about              
building bigger apps,           

1008
00:46:28,486 --> 00:46:32,588
apps where we're gonna have     
multiple MVCs involved.         

1009
00:46:32,590 --> 00:46:35,424
Not just our calculator MVC,    
but multiple MVCs.              

1010
00:46:35,426 --> 00:46:39,095
Not just our face view          
controller MVC, but             

1011
00:46:39,097 --> 00:46:40,029
multiple MVCs.                  

1012
00:46:40,031 --> 00:46:44,534
So I showed you this picture    
from the MVC discussion and     

1013
00:46:44,536 --> 00:46:47,703
you can see that the MVCs       
relationship to each other is   

1014
00:46:47,705 --> 00:46:53,509
that one or more MVCs is part   
of the view of another MVC.     

1015
00:46:53,511 --> 00:46:56,512
So let's see how that happens.  

1016
00:46:56,514 --> 00:47:02,185
We combine these MVCs using,    
(I don't wanna say special,     

1017
00:47:02,187 --> 00:47:05,388
because you could               
write your own), but            

1018
00:47:05,390 --> 00:47:08,791
built-in MVCs that              
come with iOS.                  

1019
00:47:08,793 --> 00:47:11,093
And these MVCs are built        

1020
00:47:11,095 --> 00:47:13,996
using other MVCs as             
part of their view.             

1021
00:47:13,998 --> 00:47:16,332
So, yes you can                 
build your own.                 

1022
00:47:16,334 --> 00:47:19,368
So, for example, here's the     
three that we do most of our    

1023
00:47:19,370 --> 00:47:22,271
building with here or pretty    
much all of our building,       

1024
00:47:22,273 --> 00:47:22,505
multiple MVCs.                  

1025
00:47:22,507 --> 00:47:26,108
There's the TabBarController,   
a SplitViewController and       

1026
00:47:26,110 --> 00:47:26,776
a NavigationController.         

1027
00:47:26,778 --> 00:47:30,012
So I'm gonna go into detail     
here about how each of these    

1028
00:47:30,014 --> 00:47:33,649
controllers, are controllers    
of MVCs                         

1029
00:47:33,651 --> 00:47:36,886
whose view is other MVCs.       

1030
00:47:37,187 --> 00:47:40,189
So here's a TabBarController    
for example.                    

1031
00:47:40,191 --> 00:47:42,258
If you look at what             
you see up there,               

1032
00:47:42,260 --> 00:47:46,395
there are two MVCs              
on that screen, two.            

1033
00:47:46,397 --> 00:47:48,631
One MVC is                      
the TabBarController.           

1034
00:47:48,633 --> 00:47:51,200
It's what's drawing the little  
icons at the bottom.            

1035
00:47:51,202 --> 00:47:54,503
You see those icons at          
the bottom, those four icons?   

1036
00:47:54,505 --> 00:47:55,905
That MVC is doing that.         

1037
00:47:55,907 --> 00:47:58,808
The other MVC is the thing      
surrounded in yellow,           

1038
00:47:58,810 --> 00:48:00,977
a dashboard MVC,                
whatever that is,               

1039
00:48:00,979 --> 00:48:03,212
something in the health         
app here or something.          

1040
00:48:03,214 --> 00:48:06,749
That is drawn by                
a completely different MVC,     

1041
00:48:06,751 --> 00:48:07,683
the dashboard MVC.              

1042
00:48:07,685 --> 00:48:11,454
But notice how it's             
drawing inside the view         

1043
00:48:11,456 --> 00:48:12,622
of the tab bar controller.      

1044
00:48:12,624 --> 00:48:17,093
So, you're already seeing here  
how we're building an MVC out   

1045
00:48:17,095 --> 00:48:18,294
of other MVCs.                  

1046
00:48:18,296 --> 00:48:22,331
The tab bar controller has      
an MVC built into its view.     

1047
00:48:22,333 --> 00:48:25,334
Now, what's interesting is      
this is very object oriented    

1048
00:48:25,336 --> 00:48:29,005
in that those buttons along     
the bottom, both the icon and   

1049
00:48:29,007 --> 00:48:31,207
the text on and                 
if they had a badge,            

1050
00:48:31,209 --> 00:48:31,674
that would be there too.        

1051
00:48:31,676 --> 00:48:36,212
Those are actually not being    
set in the TabBarController,    

1052
00:48:36,214 --> 00:48:39,582
the TabBarController            
is grabbing them from           

1053
00:48:39,584 --> 00:48:41,050
the dashboard MVC.              

1054
00:48:42,686 --> 00:48:44,921
Grabs them from a var           
in the dashboard MVC,           

1055
00:48:44,923 --> 00:48:48,457
it's a view UI controller       
bar called TabBarItem.          

1056
00:48:48,459 --> 00:48:53,763
And TabBarItem has things like  
Badges, and titles, and icons,  

1057
00:48:53,765 --> 00:48:55,264
things like that.               

1058
00:48:55,266 --> 00:48:59,101
And of course, we can have      
more MVCs in the tab bar if I   

1059
00:48:59,103 --> 00:49:01,070
click on that second            
icon right there,               

1060
00:49:01,072 --> 00:49:04,540
I get a different MVC filling   
up this space at the top.       

1061
00:49:04,542 --> 00:49:06,676
So now,                         
we've seen three MVCs so        

1062
00:49:06,678 --> 00:49:10,379
far, dashboard, health data,    
and the TabBarController.       

1063
00:49:10,381 --> 00:49:14,917
Right, now by the way, if you   
get too many tabs, if you put   

1064
00:49:14,919 --> 00:49:18,020
six MVCs, for example,          
into a tab bar controller,      

1065
00:49:18,022 --> 00:49:21,857
then you get a little more      
"..." icon on the right, and    

1066
00:49:21,859 --> 00:49:23,392
you can click that and          
the user can get at those.      

1067
00:49:23,394 --> 00:49:28,230
So a tab bar controller could   
have more than five MVCs.       

1068
00:49:28,232 --> 00:49:29,765
But if you start                
getting more than five,         

1069
00:49:29,767 --> 00:49:32,301
the UI gets a little clunky     
because their user is having    

1070
00:49:32,303 --> 00:49:34,637
to go over and click that       
more to get to the other one.   

1071
00:49:34,639 --> 00:49:36,706
I kinda recommend if            
you have a tab bar,             

1072
00:49:36,708 --> 00:49:38,607
don't put more than             
five MVCs in there.             

1073
00:49:38,609 --> 00:49:42,845
So the question is, when we     
have the icons at the bottom    

1074
00:49:42,847 --> 00:49:45,247
and like, the icons and         
the titles there.               

1075
00:49:45,249 --> 00:49:48,184
And I said that it's getting    
that from the MVCs that         

1076
00:49:48,186 --> 00:49:49,151
are being shown.                

1077
00:49:49,153 --> 00:49:54,824
The question is,                
is the embedded                 

1078
00:49:54,826 --> 00:49:57,860
MVC, like the health data one,  
or the dashboard one, is it     

1079
00:49:57,862 --> 00:50:02,098
getting the button and the      
title there from the model?     

1080
00:50:02,100 --> 00:50:04,166
And the answer is,              
that's up to that MVC.          

1081
00:50:04,168 --> 00:50:08,037
Some MVCs might well do that,   
probably most are not because   

1082
00:50:08,039 --> 00:50:11,674
it's kinda more of a UI thing   
what the icon and the text is.  

1083
00:50:11,676 --> 00:50:15,077
Probably not part of the        
model, especially the icon.     

1084
00:50:15,079 --> 00:50:21,917
Unlikely to be in the model.    

1085
00:50:21,919 --> 00:50:27,723
We have more MVCs for a total   
of five MVCs on the screen.     

1086
00:50:27,725 --> 00:50:28,724
The tab bar controller and      

1087
00:50:28,726 --> 00:50:31,827
these four MVCs that            
are each of the tabs.           

1088
00:50:31,829 --> 00:50:36,365
So this is the simplest         
way to combine MVCs.            

1089
00:50:36,367 --> 00:50:39,201
But do you see what I mean      
when I say that these other     

1090
00:50:39,203 --> 00:50:42,905
MVCs are part of the view       
of the tab bar controller.      

1091
00:50:42,907 --> 00:50:46,709
They're actually even their     
views are embedded physically   

1092
00:50:46,711 --> 00:50:52,248
embedded inside the tab         
bar controller's view.          

1093
00:50:52,250 --> 00:50:53,816
So that's the simplest one.     

1094
00:50:53,818 --> 00:50:55,785
Let's talk about                
the next simplest one,          

1095
00:50:55,787 --> 00:50:57,019
which is split                  
view controller.                

1096
00:50:57,021 --> 00:51:01,891
So split view controllers       
is two MVCs side by side.       

1097
00:51:01,893 --> 00:51:04,994
You get to see them both        
on screen at the same time,     

1098
00:51:04,996 --> 00:51:06,228
at least in landscape you do.   

1099
00:51:06,230 --> 00:51:09,999
This one on the left            
here is a calculator MVC.       

1100
00:51:10,001 --> 00:51:11,801
It doesn't look                 
much like yours but             

1101
00:51:11,803 --> 00:51:14,670
you can imagine that's          
a calculator MVC.               

1102
00:51:14,672 --> 00:51:14,703
That MVC,                       

1103
00:51:14,705 --> 00:51:19,208
we call the master MVC of       
the split view controller.      

1104
00:51:19,210 --> 00:51:22,244
And then on the other side      
there's a whole different MVC,  

1105
00:51:22,246 --> 00:51:23,913
completely and                  
utterly different.              

1106
00:51:23,915 --> 00:51:28,551
This one happens                
to be a graph of                

1107
00:51:28,553 --> 00:51:30,619
what's in the calculator MVC.   

1108
00:51:30,621 --> 00:51:31,654
And this is gonna               
look very similar               

1109
00:51:31,656 --> 00:51:34,924
to your homework assignment,    
because that is assignment 3.   

1110
00:51:34,926 --> 00:51:36,492
To build a graphing             
calculator,                     

1111
00:51:36,494 --> 00:51:37,893
you're gonna be putting         
in a split view and             

1112
00:51:37,895 --> 00:51:40,162
doing all the things I'm        
talking about today,            

1113
00:51:40,164 --> 00:51:41,397
so pay attention.               

1114
00:51:41,399 --> 00:51:42,298
So that we call a detail.       

1115
00:51:42,300 --> 00:51:43,899
The reason we call              
that a detail,                  

1116
00:51:43,901 --> 00:51:45,501
is almost always                
the right side,                 

1117
00:51:45,503 --> 00:51:50,606
which is larger usually,        
whatever's in it happens        

1118
00:51:50,608 --> 00:51:53,476
to be controlled by what's      
on the left by the master.      

1119
00:51:53,478 --> 00:51:54,543
And that would be true here.    

1120
00:51:54,545 --> 00:51:57,646
Cuz the graph on the right      
is showing whatever is in       

1121
00:51:57,648 --> 00:51:58,013
the calculator on the left.     

1122
00:51:58,015 --> 00:52:00,149
So if you change something in   
the calculator on the left and  

1123
00:52:00,151 --> 00:52:02,585
hit its graphing button,        
it changes the details.         

1124
00:52:02,587 --> 00:52:06,989
So the master is controlling    
the detail in that way.         

1125
00:52:06,991 --> 00:52:09,859
Now, and this is what it        
looks like when these things    

1126
00:52:09,861 --> 00:52:11,527
are side-by-side                
in landscape mode.              

1127
00:52:11,529 --> 00:52:13,496
But what if you switch          
over to portrait?               

1128
00:52:13,498 --> 00:52:16,465
Well, in portrait it just       
shows you the detail, but       

1129
00:52:16,467 --> 00:52:21,170
you can swipe from the left     
and get the master to come      

1130
00:52:21,172 --> 00:52:23,973
out on top of it and            
then do whatever you want.      

1131
00:52:23,975 --> 00:52:25,274
It still updates                
the utility and                 

1132
00:52:25,276 --> 00:52:27,476
you can swipe it                
out of the way.                 

1133
00:52:29,179 --> 00:52:30,779
So that's split                 
view controller.                

1134
00:52:30,781 --> 00:52:31,147
Super simple.                   

1135
00:52:31,149 --> 00:52:34,550
Again, hopefully you're seeing  
that there are three MVCs       

1136
00:52:34,552 --> 00:52:34,617
The split view controller's     
MVC, and these master and       

1137
00:52:34,619 --> 00:52:39,588
up here.                        

1138
00:52:39,590 --> 00:52:40,189
detail MVCs.                    

1139
00:52:40,191 --> 00:52:43,792
The master details              
serve as the view of            

1140
00:52:43,794 --> 00:52:44,260
that split view controller.     

1141
00:52:44,262 --> 00:52:47,730
Notice that the split view      
controller itself has no UI.    

1142
00:52:47,732 --> 00:52:49,265
It doesn't actually draw        
anything in the view,           

1143
00:52:49,267 --> 00:52:53,969
it just uses the UI or the      
view of these MVCs to draw.     

1144
00:52:53,971 --> 00:52:56,939
I guess, it draws the vertical  
line between the two,           

1145
00:52:56,941 --> 00:53:01,076
that's probably drawn           
by the split view.              

1146
00:53:01,078 --> 00:53:02,278
The most complicated one and    

1147
00:53:02,280 --> 00:53:06,582
the most commonly used one,     
is a navigation controller.     

1148
00:53:06,584 --> 00:53:11,420
Another MVC that uses           
other MVCs in its view.         

1149
00:53:11,422 --> 00:53:15,558
So, here we see two             
MVCs on this screen,            

1150
00:53:15,560 --> 00:53:18,327
navigation controller           
based MVC.                      

1151
00:53:18,329 --> 00:53:21,297
And it's showing another MVC,   

1152
00:53:21,299 --> 00:53:24,700
which I'm calling               
the all settings MVC.           

1153
00:53:25,335 --> 00:53:28,037
In this particular view         
that you're looking at.         

1154
00:53:28,039 --> 00:53:30,639
See on the top there's          
a gray bar that says            

1155
00:53:30,641 --> 00:53:31,807
settings in there?              

1156
00:53:31,809 --> 00:53:34,910
The gray bar, which is          
actually transparent and        

1157
00:53:34,912 --> 00:53:38,214
showing the all                 
settings MVC behind it.         

1158
00:53:38,348 --> 00:53:40,316
Kinda, fuzzed out               
a little bit.                   

1159
00:53:40,318 --> 00:53:44,453
That gray bar is drawn by       
the navigation controller.      

1160
00:53:44,455 --> 00:53:45,321
That and                        
a toolbar on the bottom,        

1161
00:53:45,323 --> 00:53:47,423
which I'll talk about in a      
second, that's the only thing   

1162
00:53:47,425 --> 00:53:50,059
that the navigation controller  
actually draws in its view.     

1163
00:53:50,061 --> 00:53:54,396
The rest of its view,           
it fills up with another MVC.   

1164
00:53:54,398 --> 00:53:55,764
The view from another MVC,      

1165
00:53:55,766 --> 00:53:58,734
in this case the all            
settings MVC.                   

1166
00:54:01,838 --> 00:54:05,107
The contents are all            
this "all settings MVC".        

1167
00:54:05,342 --> 00:54:07,576
Just like with the tab bar      
controller where there was      

1168
00:54:07,578 --> 00:54:10,746
that tab bar item that          
had like the icon and           

1169
00:54:10,748 --> 00:54:10,879
the title on it.                

1170
00:54:10,881 --> 00:54:13,249
Same thing with                 
the navigation controller.      

1171
00:54:13,251 --> 00:54:15,217
That word settings at the top,  

1172
00:54:15,219 --> 00:54:19,355
the navigation controller MVC   
is getting that word by asking  

1173
00:54:19,357 --> 00:54:23,626
the MVC that it's currently     
showing what's your title.      

1174
00:54:24,661 --> 00:54:29,198
It gets that from this          
var navigation item.            

1175
00:54:29,200 --> 00:54:29,798
It's a UI view control thing,   

1176
00:54:29,800 --> 00:54:32,968
just like tab bar item has all  
the tab bar things, navigation  

1177
00:54:32,970 --> 00:54:36,272
has all the navigation,         
UI navigation things.           

1178
00:54:36,274 --> 00:54:38,307
So if you look at the API for   
navigation item,                

1179
00:54:38,309 --> 00:54:40,876
it has things in there like     
title, and I'm gonna show       

1180
00:54:40,878 --> 00:54:44,179
you another property that it's  
gonna use in a second to get    

1181
00:54:44,181 --> 00:54:46,282
more information to draw.       

1182
00:54:47,050 --> 00:54:50,286
If I click in this              
table view actually,            

1183
00:54:50,288 --> 00:54:54,123
if I click on general right     
there, then a new MVC is        

1184
00:54:54,125 --> 00:54:58,260
gonna slide in on top of        
that old settings one.          

1185
00:54:58,262 --> 00:55:02,097
Now, the old settings one is    
completely non-visible but      

1186
00:55:02,099 --> 00:55:03,399
it's still there.               

1187
00:55:03,667 --> 00:55:04,967
This is like a stack of cards,  

1188
00:55:04,969 --> 00:55:06,735
where I've put                  
a new card on top.              

1189
00:55:06,737 --> 00:55:10,372
The other card is no            
longer on screen, okay,         

1190
00:55:10,374 --> 00:55:12,374
you won't see it any more.      

1191
00:55:12,575 --> 00:55:15,844
But it still exists in memory,  
in the navigation controller.   

1192
00:55:15,846 --> 00:55:18,914
So now we have three            
MVCs involved in this           

1193
00:55:18,916 --> 00:55:21,984
Navigation Controller, the      
Navigation Controllers' MVC,    

1194
00:55:21,986 --> 00:55:25,854
the all setting ones that is    
now in the back of this one,    

1195
00:55:25,856 --> 00:55:30,459
and this one,                   
the General Settings MVC.       

1196
00:55:30,461 --> 00:55:31,393
Now, by the way, there,         

1197
00:55:31,395 --> 00:55:34,563
you can have toolbar buttons    
along the bottom here.          

1198
00:55:34,565 --> 00:55:36,298
They look similar to            
the tab bar ones,               

1199
00:55:36,300 --> 00:55:37,933
but they're                     
a little different.             

1200
00:55:37,935 --> 00:55:41,203
That is set with the toolbar    
item, the var in                

1201
00:55:41,205 --> 00:55:44,907
the General Settings MVC, not   
in the Navigation Controller.   

1202
00:55:44,909 --> 00:55:47,810
So as new MVCs slide in,        
the toolbar buttons at          

1203
00:55:47,812 --> 00:55:50,579
the bottom would change,        
because they're connected to    

1204
00:55:50,581 --> 00:55:54,016
whatever happens to be on       
top of the deck of cards.       

1205
00:55:54,018 --> 00:55:57,886
Notice also that                
there's a back button.          

1206
00:55:57,888 --> 00:55:58,887
You see that back button?       

1207
00:55:58,889 --> 00:55:59,888
It's called settings.           

1208
00:55:59,890 --> 00:56:03,258
That button was automatically   
put there by navigation         

1209
00:56:03,260 --> 00:56:04,259
controller.                     

1210
00:56:04,261 --> 00:56:05,060
And if you click that,          

1211
00:56:05,062 --> 00:56:06,562
it's gonna go back              
to the other card.              

1212
00:56:06,564 --> 00:56:10,666
The all settings, so            
that's all done for you.        

1213
00:56:11,468 --> 00:56:12,801
But if I click                  
somewhere in here,              

1214
00:56:12,803 --> 00:56:17,072
like on Accessibility there,    
then it goes to another MVC.    

1215
00:56:17,074 --> 00:56:20,309
Now we've seen four MVCs so     
far in this thing.              

1216
00:56:20,311 --> 00:56:23,746
And if I click on Larger Text   
in here, I get yet              

1217
00:56:23,748 --> 00:56:24,446
another MVC..                   

1218
00:56:24,448 --> 00:56:26,014
Now we have five MVCs.          

1219
00:56:26,016 --> 00:56:28,317
So these MVCs just keep         
stacking on top, and            

1220
00:56:28,319 --> 00:56:31,653
each of the new one that        
comes on is its own world.      

1221
00:56:31,655 --> 00:56:33,255
It's completely on its own.     

1222
00:56:33,257 --> 00:56:36,458
And of course if we start       
pressing the back button up     

1223
00:56:36,460 --> 00:56:39,795
there on the left, it goes      
back to the previous one.       

1224
00:56:39,797 --> 00:56:42,798
Notice the title of             
the back button is even set     

1225
00:56:42,800 --> 00:56:44,967
to be the title of              
the previous MVC so             

1226
00:56:44,969 --> 00:56:47,936
you know what can happen        
when you click it.              

1227
00:56:47,938 --> 00:56:51,073
And we can go all the way       
back to the all settings at     

1228
00:56:51,075 --> 00:56:51,373
the very top.                   

1229
00:56:51,375 --> 00:56:53,075
Now there's no back             
button because                  

1230
00:56:53,077 --> 00:56:54,576
there's no other cards.         

1231
00:56:55,211 --> 00:56:57,212
So that's what                  
navigation controller           

1232
00:56:57,214 --> 00:56:58,013
looks and works like.           

1233
00:56:58,015 --> 00:57:02,317
Okay, you guys have all seen    
this UI, I'm sure, in apps.     

1234
00:57:02,319 --> 00:57:03,385
Super common.                   

1235
00:57:03,387 --> 00:57:06,622
So let's talk a little bit of   
how the navigation controller   

1236
00:57:06,624 --> 00:57:08,490
works behind the scenes.        

1237
00:57:08,691 --> 00:57:09,958
How how you make                
this thing work.                

1238
00:57:09,960 --> 00:57:12,127
So when do you need             
a navigation controller?        

1239
00:57:12,129 --> 00:57:15,230
Well, let's see you have        
an MVC, right there, and        

1240
00:57:15,232 --> 00:57:18,767
you got another whole pile of   
UI down here in the corner      

1241
00:57:18,769 --> 00:57:21,170
that you wanna add,             
but just won't fit.             

1242
00:57:21,172 --> 00:57:23,038
You wanna be able to do         
the accessibility stuff and     

1243
00:57:23,040 --> 00:57:26,675
the larger texts and all that   
we saw on the previous slide.   

1244
00:57:26,677 --> 00:57:26,975
But it obviously,               

1245
00:57:26,977 --> 00:57:29,211
it's not gonna all fit          
in one phone screen so          

1246
00:57:29,213 --> 00:57:29,678
you need more space.            

1247
00:57:29,680 --> 00:57:34,149
So what you do is you create a  
new MVC that controls all that  

1248
00:57:34,151 --> 00:57:38,220
UI that is completely           
independent of that.            

1249
00:57:38,222 --> 00:57:39,588
And it just knows               
how to manage that.             

1250
00:57:39,590 --> 00:57:41,757
Now they might share a model,   
because maybe they're           

1251
00:57:41,759 --> 00:57:43,892
all looking in                  
the settings database.          

1252
00:57:43,894 --> 00:57:44,026
That's fine.                    

1253
00:57:44,028 --> 00:57:47,162
But they're not talking         
to each other in any way.       

1254
00:57:47,164 --> 00:57:48,597
The only time they ever         
talk to each other,             

1255
00:57:48,599 --> 00:57:50,299
is when it first                
comes on screen,                

1256
00:57:50,301 --> 00:57:52,634
as you'll see in a moment.      

1257
00:57:53,603 --> 00:57:54,937
So I have two MVC's now,        

1258
00:57:54,939 --> 00:57:58,974
to control all the UI           
that I wanna present.           

1259
00:57:58,976 --> 00:58:01,243
So let's use                    
a NavigationController to make  

1260
00:58:01,245 --> 00:58:02,377
these come on screen.           

1261
00:58:02,379 --> 00:58:04,480
And so                          
here's a NavigationController,  

1262
00:58:04,482 --> 00:58:06,014
it's just MVC.                  

1263
00:58:06,016 --> 00:58:10,319
It doesn't really have a model  
that's okay but it has a view.  

1264
00:58:10,321 --> 00:58:14,089
And inside that view there is   
a special var that's pointing   

1265
00:58:14,091 --> 00:58:16,158
to its view called              
RootViewController,             

1266
00:58:16,160 --> 00:58:19,962
that's just points of to the    
controller of the MVC that's    

1267
00:58:19,964 --> 00:58:21,997
at the root it's                
the base card.                  

1268
00:58:21,999 --> 00:58:25,167
The all settings one we         
saw on the previous page.       

1269
00:58:25,635 --> 00:58:26,134
So it just has this bar.        

1270
00:58:26,136 --> 00:58:28,070
You just set that               
to something, and               

1271
00:58:28,072 --> 00:58:28,337
now you'll have an MVC.         

1272
00:58:28,339 --> 00:58:30,939
And as soon as you do that,     
as soon as you set that,        

1273
00:58:30,941 --> 00:58:32,875
it's going to take              
that MVC's view and             

1274
00:58:32,877 --> 00:58:35,477
put it in its view with         
that little gray bar.           

1275
00:58:35,479 --> 00:58:38,080
And it's gonna ask it           
navigation item for             

1276
00:58:38,082 --> 00:58:40,382
the title, and get the title.   

1277
00:58:41,384 --> 00:58:41,783
Perfect example.                

1278
00:58:41,785 --> 00:58:42,584
This is super simple.           

1279
00:58:42,586 --> 00:58:47,089
And then let's say you have     
a button inside this UI, or     

1280
00:58:47,091 --> 00:58:50,626
like a line in the table view,  
like get me more settings or    

1281
00:58:50,628 --> 00:58:52,094
accessibility or whatever.      

1282
00:58:52,096 --> 00:58:52,628
And you touch that.             

1283
00:58:52,630 --> 00:58:56,765
Now, when you touch that, it's  
going to create one of these    

1284
00:58:56,767 --> 00:58:59,334
MVCs on the right,              
it creates it at that moment.   

1285
00:58:59,336 --> 00:59:01,870
As soon as you touch it,        
it creates a new one.           

1286
00:59:01,872 --> 00:59:04,706
Every single time you           
go to a new card,               

1287
00:59:04,708 --> 00:59:05,207
it creates a new one.           

1288
00:59:05,209 --> 00:59:08,176
Not back, but every time you    
go forward to a new card,       

1289
00:59:08,178 --> 00:59:09,378
it always creates a new one.    

1290
00:59:09,380 --> 00:59:10,946
That's something I'm            
gonna say three or              

1291
00:59:10,948 --> 00:59:11,780
four times in this slide so     

1292
00:59:11,782 --> 00:59:13,715
as to make sure                 
you understand it.              

1293
00:59:14,150 --> 00:59:17,519
This activity of going to       
a new one is called segueing.   

1294
00:59:17,521 --> 00:59:22,724
This particular segue's called  
a show or a push segue.         

1295
00:59:22,726 --> 00:59:26,028
Which just means a segue in     
a navigation control with       

1296
00:59:26,030 --> 00:59:27,362
the stack of cards.             

1297
00:59:27,364 --> 00:59:30,065
Now when you do that,           
you get the back button for     

1298
00:59:30,067 --> 00:59:32,501
free, it just automatically     
appears up there because        

1299
00:59:32,503 --> 00:59:33,869
that top bar like I say is      

1300
00:59:33,871 --> 00:59:37,873
drawn by the navigation         
controller's part of its view.  

1301
00:59:37,875 --> 00:59:40,442
And when you click              
that back button,               

1302
00:59:40,444 --> 00:59:42,511
of course what happens          
is interesting here.            

1303
00:59:42,513 --> 00:59:47,583
Of course this slides back,     
but what happened to that MVC?  

1304
00:59:47,585 --> 00:59:49,084
Gone.                           

1305
00:59:49,086 --> 00:59:52,054
Deallocated from the heap.      

1306
00:59:52,488 --> 00:59:54,056
So when you go back,            

1307
00:59:54,058 --> 00:59:57,392
whatever card was on            
top gets thrown away.           

1308
00:59:57,394 --> 01:00:01,063
So MVCs, as you're kind of      
getting the picture here,       

1309
01:00:01,065 --> 01:00:02,397
they're pretty ephemeral.       

1310
01:00:02,399 --> 01:00:04,900
MVCs don't really stick         
around for a long time.         

1311
01:00:04,902 --> 01:00:06,635
Now the root card on            
a Navigation Controller,        

1312
01:00:06,637 --> 01:00:07,603
it's gonna stick                
around pretty long,             

1313
01:00:07,605 --> 01:00:10,572
as long as that Navigation      
Controller is on screen.        

1314
01:00:10,574 --> 01:00:13,041
But mostly MVCs kind            
of come and go.                 

1315
01:00:13,043 --> 01:00:16,812
And it's their models that      
tend to be persistent.          

1316
01:00:16,814 --> 01:00:17,245
When you create a new MVC,      

1317
01:00:17,247 --> 01:00:19,915
you usually hook it up to       
a database or a network or      

1318
01:00:19,917 --> 01:00:21,183
something, something            
persistent.                     

1319
01:00:21,185 --> 01:00:23,318
And so that's why it's          
showing something new.          

1320
01:00:23,320 --> 01:00:27,189
Or it's an MVC that showed      
something new every time.       

1321
01:00:27,690 --> 01:00:31,627
So that's how a navigation      
controller works.               

1322
01:00:33,529 --> 01:00:35,163
I'm gonna talk a little bit     
how we hook all of this up.     

1323
01:00:35,165 --> 01:00:37,132
Because of course we're gonna   
do all this hooking up with     

1324
01:00:37,134 --> 01:00:41,103
control drag in Xcode, that's   
how we hook everything up.      

1325
01:00:41,105 --> 01:00:43,405
But I wanna talk a little       
bit about the code              

1326
01:00:43,407 --> 01:00:43,572
behind so you know.             

1327
01:00:43,574 --> 01:00:47,643
There's an important var that   
is in these viewControllers,    

1328
01:00:47,645 --> 01:00:48,210
like tab bar controller, and    

1329
01:00:48,212 --> 01:00:50,112
navigation controller,          
and split view controller.      

1330
01:00:50,114 --> 01:00:51,546
It's called viewControllers,    
and                             

1331
01:00:51,548 --> 01:00:55,050
it's an optional array          
of UIViewControllers.           

1332
01:00:55,052 --> 01:00:56,785
And it means different          
things depending on             

1333
01:00:56,787 --> 01:01:01,256
which one you're in.            

1334
01:01:01,258 --> 01:01:06,294
each tab, with the left most    
tab's MVC's at 0 and then 1,    

1335
01:01:06,296 --> 01:01:09,498
2, 3, 4 is just                 
the rest of the MVCs.           

1336
01:01:09,500 --> 01:01:12,734
For a split view 0 is always    
the master, 1 is always         

1337
01:01:12,736 --> 01:01:15,671
the detail, and there's never   
any other ones in this array.   

1338
01:01:15,673 --> 01:01:20,676
For a navigation control, 0 is  
the base card, and 1, 2, 3,     

1339
01:01:20,678 --> 01:01:24,579
4, etc., are the ones           
stacked on top, in order.       

1340
01:01:24,581 --> 01:01:26,114
So that's how you can           
kinda get at them.              

1341
01:01:26,116 --> 01:01:31,353
Now, we don't usually, this     
is a bar, it can be set but     

1342
01:01:31,355 --> 01:01:34,389
we usually don't set this bar,  
we don't set the things,        

1343
01:01:34,391 --> 01:01:37,759
we either use things that we    
do in our UI, which I'll show   

1344
01:01:37,761 --> 01:01:40,395
you or even like in Navigation  
Controller, there's push and    

1345
01:01:40,397 --> 01:01:45,934
pop methods to push MVCs on     
and pop them off of the stack.  

1346
01:01:46,335 --> 01:01:50,305
Now, it's great to have this    
var ViewControllers, but        

1347
01:01:50,307 --> 01:01:52,641
how do you get                  
the Split View Controller or    

1348
01:01:52,643 --> 01:01:55,610
get the Tab Bar Controller      
if you're in one?               

1349
01:01:55,612 --> 01:01:58,213
Okay if I'm the all             
settings MVC or                 

1350
01:01:58,215 --> 01:02:02,918
I'm one of the health data      
ones that we saw on the tab     

1351
01:02:02,920 --> 01:02:05,620
bar, how do I get the           
navigation controller I'm in,   

1352
01:02:05,622 --> 01:02:07,756
or the split view I'm in or     
the tab bar I'm in?             

1353
01:02:07,758 --> 01:02:10,792
Well all UIViewControllers      
have these three vars,          

1354
01:02:10,794 --> 01:02:12,894
tab bar controller,             
split view controller and       

1355
01:02:12,896 --> 01:02:13,361
navigation controller.          

1356
01:02:13,363 --> 01:02:16,698
And if you are in one of        
those things this will return   

1357
01:02:16,700 --> 01:02:17,833
the one you are in.             

1358
01:02:17,835 --> 01:02:21,069
And if you're not in one,       
it will return nil.             

1359
01:02:21,071 --> 01:02:21,737
So that's how you find out      

1360
01:02:21,739 --> 01:02:23,205
the Split View Controller       
you're in.                      

1361
01:02:23,207 --> 01:02:24,840
And you can use                 
the combination of              

1362
01:02:24,842 --> 01:02:24,873
For example, if you're          
the Master in a Split View,     

1363
01:02:24,875 --> 01:02:27,375
these two things.               

1364
01:02:27,377 --> 01:02:30,579
you can find your               
detail MVC by saying            

1365
01:02:30,581 --> 01:02:32,214
what's the split view           
controller I'm in?              

1366
01:02:32,216 --> 01:02:35,217
Get its View Controllers,       
look at View Controller sub 1   

1367
01:02:35,219 --> 01:02:37,552
because that's                  
always the detail.              

1368
01:02:37,554 --> 01:02:37,719
So I just clicked and           
went up and over and got it.    

1369
01:02:37,721 --> 01:02:39,121
You see?                        

1370
01:02:39,123 --> 01:02:41,957
And I use the question mark,    
the optional chaining there     

1371
01:02:41,959 --> 01:02:44,025
because I might not be in       
a split view controller.        

1372
01:02:44,027 --> 01:02:45,460
And then it obviously           
will return nil for             

1373
01:02:45,462 --> 01:02:48,730
my detail, which is fine cuz    
it would be nil if I'm not in   

1374
01:02:48,732 --> 01:02:51,666
a split view controller         
obviously there's no detail.    

1375
01:02:53,269 --> 01:02:54,903
Now, how do we wire             
all this stuff up?              

1376
01:02:54,905 --> 01:02:57,372
Of course we're gonna           
do it all graphically.          

1377
01:02:57,374 --> 01:03:00,308
Let's start by at looking       
at the split view and           

1378
01:03:00,310 --> 01:03:01,376
how we do this.                 

1379
01:03:01,378 --> 01:03:04,112
Now to create a new view        
controller, whether it's one    

1380
01:03:04,114 --> 01:03:06,081
of these view controllers       
of view controllers that we     

1381
01:03:06,083 --> 01:03:08,383
were talking about or just      
a regular view controller.      

1382
01:03:08,385 --> 01:03:10,952
You go down to the object       
pallet and you drag it out      

1383
01:03:10,954 --> 01:03:14,422
into your storyboard just like  
a button, except you're just    

1384
01:03:14,424 --> 01:03:16,691
dragging to open space and      
it's created there.             

1385
01:03:16,693 --> 01:03:19,361
Now when you drag a split       
view controller out, it's       

1386
01:03:19,363 --> 01:03:24,666
actually gonna drag out kind    
of empty, detail and master.    

1387
01:03:25,001 --> 01:03:25,567
You never want that.            

1388
01:03:25,569 --> 01:03:27,736
I don't know why it             
really does that.               

1389
01:03:27,738 --> 01:03:28,670
Just delete those.              

1390
01:03:28,672 --> 01:03:30,672
You're obviously gonna          
have your MVC's like your       

1391
01:03:30,674 --> 01:03:33,074
calculator and your graphing    
view controller sitting in      

1392
01:03:33,076 --> 01:03:35,343
your storyboard and you're      
gonna drag the split view       

1393
01:03:35,345 --> 01:03:37,512
controller and you're           
gonna wire it up to those.      

1394
01:03:37,514 --> 01:03:41,216
So you're gonna delete any of   
the extra junk that comes out.  

1395
01:03:41,218 --> 01:03:44,152
Then you just                   
Ctrl+drag like we do,           

1396
01:03:44,154 --> 01:03:47,355
our favorite gesture in         
a face builder, is Ctrl+drag.   

1397
01:03:47,357 --> 01:03:49,925
We just Ctrl+drag from          
the split view controller       

1398
01:03:49,927 --> 01:03:52,394
to the master and               
to the detail, so I'll get up.  

1399
01:03:52,396 --> 01:03:54,196
So this is what                 
that looks like.                

1400
01:03:54,198 --> 01:03:56,398
Here I've got split view        
controller on the left.         

1401
01:03:56,400 --> 01:03:58,700
I've got calculator view        
control on the top and          

1402
01:03:58,702 --> 01:04:01,603
I've got a graph and            
control view on the bottom.     

1403
01:04:01,605 --> 01:04:02,470
So I'm just gonna control,      

1404
01:04:02,472 --> 01:04:04,339
drag from the split             
view controllers,               

1405
01:04:04,341 --> 01:04:05,207
the calculator controller.      

1406
01:04:05,209 --> 01:04:07,309
This little black window        
is gonna come up.               

1407
01:04:07,311 --> 01:04:11,880
I'm gonna choose master view    
controller from the list and    

1408
01:04:11,882 --> 01:04:15,784
that's gonna hook that          
one up top to my master.        

1409
01:04:15,786 --> 01:04:18,954
Then, I'm gonna Ctrl+drag to    
the bottom one, the black       

1410
01:04:18,956 --> 01:04:22,057
window comes up I'm gonna       
choose Detail View Controller   

1411
01:04:22,059 --> 01:04:24,659
then it's gonna make            
that connection.                

1412
01:04:25,161 --> 01:04:26,294
Okay, as simple as that.        

1413
01:04:26,296 --> 01:04:28,563
Now you've got the split        
view with master that's         

1414
01:04:28,565 --> 01:04:30,432
calculator of your              
controller and                  

1415
01:04:30,434 --> 01:04:34,169
detail that is going to be      
a graphic view controller.      

1416
01:04:34,437 --> 01:04:36,171
Now, one interesting            
thing here though,              

1417
01:04:36,173 --> 01:04:38,707
is this split view does         
not work on an iPhone.          

1418
01:04:38,709 --> 01:04:42,110
Well it works on iPhone plus,   
iPhone six plus or              

1419
01:04:42,112 --> 01:04:44,779
seven plus, the kind of big     
ones, but it does not work on   

1420
01:04:44,781 --> 01:04:47,682
a normal iPhone, it's just not  
enough screen real estate to    

1421
01:04:47,684 --> 01:04:50,886
really do the split view        
thing, so we can't do it.       

1422
01:04:50,888 --> 01:04:54,356
So, what we really want to      
do is build a UI though that    

1423
01:04:54,358 --> 01:04:55,190
works on all the devices.       

1424
01:04:55,192 --> 01:04:58,960
So to do that,                  
what we do is we're gonna wrap  

1425
01:04:58,962 --> 01:05:01,696
the master and                  
the detail if we want.          

1426
01:05:01,698 --> 01:05:04,666
We're gonna wrap them in        
a navigation controller.        

1427
01:05:04,668 --> 01:05:06,067
And then when                   
they're on iPhone,              

1428
01:05:06,069 --> 01:05:07,135
they won't use                  
the split view part,            

1429
01:05:07,137 --> 01:05:09,838
they'll just use                
the navigation controller.      

1430
01:05:10,006 --> 01:05:12,707
It's really cool,               
how it figures this out.        

1431
01:05:12,709 --> 01:05:16,177
The way to wrap a view          
controller that's in there,     

1432
01:05:16,179 --> 01:05:18,280
you wanna wrap it in            
a Navigation Controller,        

1433
01:05:18,282 --> 01:05:19,281
you just go to                  
the Editor menu,                

1434
01:05:19,283 --> 01:05:21,616
the same place we did           
embed and stack view,           

1435
01:05:21,618 --> 01:05:22,117
and some of that.               

1436
01:05:22,119 --> 01:05:26,187
And you select the whole        
scene of your MVC, and          

1437
01:05:26,189 --> 01:05:28,723
you go to the Editor Menu and   

1438
01:05:28,725 --> 01:05:30,859
you say embed in                
navigation controller.          

1439
01:05:30,861 --> 01:05:33,828
So I've selected that top,      
calculate and control and       

1440
01:05:33,830 --> 01:05:34,429
when I do that,                 

1441
01:05:34,431 --> 01:05:37,699
it's going to put it inside     
a navigation controller.        

1442
01:05:37,701 --> 01:05:38,900
Did you see that?               

1443
01:05:38,902 --> 01:05:41,069
Now, I've got the flip view,    
it points to a navigation       

1444
01:05:41,071 --> 01:05:43,238
controller, so the master of    
this flip view is actually      

1445
01:05:43,240 --> 01:05:45,707
that navigation controller,     
and then the navigation         

1446
01:05:45,709 --> 01:05:49,210
controller root view            
controller is the calculator.   

1447
01:05:49,212 --> 01:05:51,546
So, if you're on a device       
that can do split view,         

1448
01:05:51,548 --> 01:05:52,047
like an iPad or a plus,         

1449
01:05:52,049 --> 01:05:54,516
you're going to get             
the whole split view effect.    

1450
01:05:54,518 --> 01:05:55,817
But if you're on                
just an iPhone,                 

1451
01:05:55,819 --> 01:05:57,419
it's not going to               
do the split view.              

1452
01:05:57,421 --> 01:05:59,921
It's just going to do           
the navigation controller.      

1453
01:05:59,923 --> 01:06:01,356
So, when you look               
at the detail,                  

1454
01:06:01,358 --> 01:06:03,258
it's going to slide it in.      

1455
01:06:03,260 --> 01:06:05,627
Whereas if you're on            
a iPad in landscape,            

1456
01:06:05,629 --> 01:06:08,697
you're gonna see Master and     
Detail at the same time.        

1457
01:06:08,699 --> 01:06:12,634
Now, you can also do            
the same thing- yeah, and so    

1458
01:06:12,636 --> 01:06:15,136
the UINavigationController      
is the Master,                  

1459
01:06:15,138 --> 01:06:16,638
as, as I talked about.          

1460
01:06:16,640 --> 01:06:19,040
So you can do the same          
thing with the Detail.          

1461
01:06:19,042 --> 01:06:21,276
Now why would you ever          
do that with the Detail?        

1462
01:06:21,278 --> 01:06:22,944
Because yo've already done      
it with the master and          

1463
01:06:22,946 --> 01:06:25,246
so you gotta click in the       
master to get to the detail,    

1464
01:06:25,248 --> 01:06:28,016
so yo're kinda already gonna    
be in a navigation controller,  

1465
01:06:28,018 --> 01:06:28,550
and tha's true.                 

1466
01:06:28,552 --> 01:06:30,919
But wha's kinda nice            
about putting the detail        

1467
01:06:30,921 --> 01:06:34,356
in a navigation controller is   
you get that little title bar,  

1468
01:06:34,358 --> 01:06:35,924
you know the little             
gray title bar?                 

1469
01:06:35,926 --> 01:06:36,324
So now, your master and         

1470
01:06:36,326 --> 01:06:38,994
your detail both have           
a title bar on the top and      

1471
01:06:38,996 --> 01:06:40,061
they match up nicely.           

1472
01:06:40,063 --> 01:06:42,297
So if you wanna title           
on your detail,                 

1473
01:06:42,299 --> 01:06:42,597
that's a good thing to do.      

1474
01:06:42,599 --> 01:06:44,532
The only thing to be            
careful there though is         

1475
01:06:44,534 --> 01:06:47,302
now your detail in not          
a graph view controller.        

1476
01:06:47,304 --> 01:06:49,537
Your detail is now              
a navigation controller.        

1477
01:06:49,539 --> 01:06:51,606
So if you wanna get the graph   
view controller and             

1478
01:06:51,608 --> 01:06:53,241
like talk to it,                
tell it what to graph or        

1479
01:06:53,243 --> 01:06:55,977
something like that,            
you need to get the root view   

1480
01:06:55,979 --> 01:06:58,580
controller of                   
the navigation controller.      

1481
01:06:59,081 --> 01:07:00,448
So it's just subtle             
difference but                  

1482
01:07:00,450 --> 01:07:02,584
if you wrap your detail in      
a navigation controller,        

1483
01:07:02,586 --> 01:07:04,819
the detail has come become      
a navigation controller.        

1484
01:07:04,821 --> 01:07:06,354
It's easy to get to             
the graph view controller,      

1485
01:07:06,356 --> 01:07:09,724
cuz the root view controller    
of the navigation controller.   

1486
01:07:11,060 --> 01:07:14,129
That's how you wire             
up the split views so           

1487
01:07:14,131 --> 01:07:17,298
that it works cross platform,   
all devices.                    

1488
01:07:17,400 --> 01:07:20,101
The last thing we're gonna      
talk about is segueing.         

1489
01:07:20,103 --> 01:07:24,472
So we know how to wire up       
the split view controller, and  

1490
01:07:24,474 --> 01:07:25,940
we know how to do               
a navigation control,           

1491
01:07:25,942 --> 01:07:28,209
we just embed it in             
the navigation controller.      

1492
01:07:28,211 --> 01:07:30,879
I didn't talk about the tab     
bar controller by the way,      

1493
01:07:30,881 --> 01:07:31,279
but that's easy.                

1494
01:07:31,281 --> 01:07:34,449
You just drag a tab bar         
controller out and CTRL + drag  

1495
01:07:34,451 --> 01:07:36,985
to all of the MVC's that        
you want it to show,            

1496
01:07:36,987 --> 01:07:41,656
and you can actually even       
drag the little icons around    

1497
01:07:41,658 --> 01:07:42,457
to put them in order.           

1498
01:07:42,459 --> 01:07:45,727
You can even set the icons in   
text in the interface builder   

1499
01:07:45,729 --> 01:07:45,760
with an inspector.              

1500
01:07:45,762 --> 01:07:48,530
So, tab bars, so simple I       
don't even want to waste time   

1501
01:07:48,532 --> 01:07:51,366
showing it, but so we know how  
to kind of hook up and control  

1502
01:07:51,368 --> 01:07:55,737
drags and wire up, or embed to  
do the navigation controllers.  

1503
01:07:55,739 --> 01:07:58,306
How do we go from one to the    
other, like in the navigation   

1504
01:07:58,308 --> 01:08:01,342
controller, how do we go from   
all settings to settings and    

1505
01:08:01,344 --> 01:08:02,410
from settings to                
accessibility,                  

1506
01:08:02,412 --> 01:08:05,980
and accessibility               
to larger text?                 

1507
01:08:05,982 --> 01:08:08,450
How do we set up that           
transition or how do we make    

1508
01:08:08,452 --> 01:08:12,120
it so that we press a button    
in our calculator split view    

1509
01:08:12,122 --> 01:08:16,057
and it causes that graph to     
be replaced with a new graph?   

1510
01:08:16,059 --> 01:08:16,257
How do we do that?              

1511
01:08:16,259 --> 01:08:18,526
We do that with what            
are called segues.              

1512
01:08:18,528 --> 01:08:20,628
I've alluded to this earlier.   

1513
01:08:21,997 --> 01:08:24,265
These are the kinds             
of segues that exist.           

1514
01:08:24,267 --> 01:08:24,999
There's a show segue.           

1515
01:08:25,001 --> 01:08:27,969
That means, if you're in        
a Navigation Controller,        

1516
01:08:27,971 --> 01:08:29,537
slide a card on.                

1517
01:08:30,840 --> 01:08:31,806
There's Show Detail,            

1518
01:08:31,808 --> 01:08:33,541
which if you're                 
a Navigation Controller,        

1519
01:08:33,543 --> 01:08:35,210
still means slide a card on.    

1520
01:08:35,212 --> 01:08:36,511
But if you're inside            
a Split View,                   

1521
01:08:36,513 --> 01:08:40,115
it means put this new MVC       
where the detail goes.          

1522
01:08:40,117 --> 01:08:41,649
That's why it's                 
called Show Detail.             

1523
01:08:41,651 --> 01:08:43,685
So Show Detail behaves          
differently depending on        

1524
01:08:43,687 --> 01:08:44,686
whether you're in               
the Split View or               

1525
01:08:44,688 --> 01:08:47,155
whether you're in               
a Navigation Controller.        

1526
01:08:47,157 --> 01:08:49,657
Modal segue,                    
it's kind of interesting one.   

1527
01:08:49,659 --> 01:08:52,060
It takes over the entire        
screen and lets                 

1528
01:08:52,062 --> 01:08:56,664
the MVC that you're segueing    
into own the whole screen.      

1529
01:08:56,666 --> 01:08:59,234
Now, these can be somewhat      
disturbing to the users cuz,    

1530
01:08:59,236 --> 01:09:00,935
I can't get back                
to where I was,                 

1531
01:09:00,937 --> 01:09:03,104
cuz there's no back button or   
anything.                       

1532
01:09:03,106 --> 01:09:04,005
That whatever MVC comes up and  

1533
01:09:04,007 --> 01:09:06,841
takes over the screen has to    
provide some UI to get out of   

1534
01:09:06,843 --> 01:09:09,944
there like cancel or            
done, or something.             

1535
01:09:09,946 --> 01:09:12,914
So we try to stay away          
from Modal if we can.           

1536
01:09:12,916 --> 01:09:16,818
So Popover is sort of           
the same as Modal, but          

1537
01:09:16,820 --> 01:09:19,554
instead of taking over the      
whole screen, it just puts up   

1538
01:09:19,556 --> 01:09:21,756
a little pop-up window,         
a little popover window,        

1539
01:09:21,758 --> 01:09:23,791
you've seen that,               
on iPad especially.             

1540
01:09:23,793 --> 01:09:27,662
It's still Modal, because       
if you click anywhere else,     

1541
01:09:27,664 --> 01:09:29,164
the popover goes away.          

1542
01:09:29,166 --> 01:09:31,299
So it's essentially modal.      

1543
01:09:31,301 --> 01:09:32,400
It's a little nicer             
than modal, though,             

1544
01:09:32,402 --> 01:09:34,736
because you can really see the  
background kinda grayed out.    

1545
01:09:34,738 --> 01:09:36,771
And if you don't want           
what's in the popover,          

1546
01:09:36,773 --> 01:09:38,540
just click somewhere else and   
it goes away.                   

1547
01:09:38,542 --> 01:09:41,109
So yeah, popover's              
a little nicer than modal.      

1548
01:09:41,111 --> 01:09:43,044
But it only works on            
fairly large screens,           

1549
01:09:43,046 --> 01:09:46,247
unless you have a really        
small pop over window.          

1550
01:09:46,348 --> 01:09:50,118
Now, I'm going                  
to emphasize for                

1551
01:09:50,120 --> 01:09:53,788
the second time what I said     
before segues always create     

1552
01:09:53,790 --> 01:09:55,657
a new instance of the MVC.      

1553
01:09:55,659 --> 01:10:00,195
All of the segues, all of       
them, modal, popover, show,     

1554
01:10:00,197 --> 01:10:00,428
slide in the min,               

1555
01:10:00,430 --> 01:10:03,031
show detail, even show          
detail in the split view.       

1556
01:10:03,033 --> 01:10:06,768
If you have a calculator and    
you say graph my function and   

1557
01:10:06,770 --> 01:10:08,536
you segue to a graph            
view controller,                

1558
01:10:08,538 --> 01:10:10,305
it throws away the one          
that was there and              

1559
01:10:10,307 --> 01:10:13,741
puts a new one there,           
always creating new MVCs.       

1560
01:10:13,743 --> 01:10:17,512
So think of these MVCs as       
ephemeral, they come alive,     

1561
01:10:17,514 --> 01:10:19,380
they do their job and           
they go away.                   

1562
01:10:19,382 --> 01:10:22,984
They don't live you know,       
long lives.                     

1563
01:10:22,986 --> 01:10:24,886
Now the master and              
a split view.                   

1564
01:10:24,888 --> 01:10:26,421
The root view of                
a navigational,                 

1565
01:10:26,423 --> 01:10:27,622
they tend to live fairly long.  

1566
01:10:27,624 --> 01:10:30,525
But even those, if that split   
view, if that navigational      

1567
01:10:30,527 --> 01:10:33,428
were to go off screen,          
they go away as well.           

1568
01:10:34,730 --> 01:10:36,631
So how do we make               
these segues happen?            

1569
01:10:36,633 --> 01:10:38,299
Of course,                      
we use control drag.            

1570
01:10:38,301 --> 01:10:40,735
We love to use control drag,    
so here for                     

1571
01:10:40,737 --> 01:10:42,837
example is                      
the calculator example.         

1572
01:10:42,839 --> 01:10:43,671
I've got a split view.          

1573
01:10:43,673 --> 01:10:45,940
And in my calculator            
there in the upper right        

1574
01:10:45,942 --> 01:10:48,643
I have a button it's            
very hard to see but            

1575
01:10:48,645 --> 01:10:50,144
it's a little                   
picture of a graph.             

1576
01:10:50,146 --> 01:10:51,579
So that's the button            
that when I press it,           

1577
01:10:51,581 --> 01:10:54,582
it's gonna take whatever's in   
my calculator and graph it.     

1578
01:10:54,584 --> 01:10:57,752
So if I've typed in for         
example m cosine,               

1579
01:10:57,754 --> 01:11:03,091
it's gonna draw a cosine wave,  
that's what that button does.   

1580
01:11:03,093 --> 01:11:06,594
So I just go into interface     
builder here, control drag      

1581
01:11:06,596 --> 01:11:10,131
from that button down to        
the detail right there.         

1582
01:11:10,133 --> 01:11:10,465
When I let go,                  

1583
01:11:10,467 --> 01:11:12,700
it's going to put up just       
a little black window,          

1584
01:11:12,702 --> 01:11:14,969
which I'll show you             
a little detail of.             

1585
01:11:14,971 --> 01:11:15,136
It looks like that.             

1586
01:11:15,138 --> 01:11:17,105
And I'm gonna pick              
the segue I want.               

1587
01:11:17,107 --> 01:11:21,042
Well, since this is             
a Split view, if I can,         

1588
01:11:21,044 --> 01:11:22,176
I'm going to show detail.       

1589
01:11:22,178 --> 01:11:24,112
Put it on the right             
side of the split view.         

1590
01:11:24,114 --> 01:11:26,681
Now, if I were in this          
same storyboard, but            

1591
01:11:26,683 --> 01:11:28,549
I was on an iPhone non-plus,    

1592
01:11:28,551 --> 01:11:30,084
then even though I'm            
picking show detail here,       

1593
01:11:30,086 --> 01:11:32,487
it's still going to do the      
navigation controller show,     

1594
01:11:32,489 --> 01:11:36,291
because there is no split view  
side, when I'm on the iPhone.   

1595
01:11:36,825 --> 01:11:39,327
So I pick the segue             
type I want, and                

1596
01:11:39,329 --> 01:11:40,395
it creates the segue.           

1597
01:11:40,397 --> 01:11:42,630
And it appears in               
your storyboard,                

1598
01:11:42,632 --> 01:11:44,165
it can even be clicked on and   
inspected.                      

1599
01:11:44,167 --> 01:11:46,834
And in fact you're gonna        
always want to click on         

1600
01:11:46,836 --> 01:11:48,036
that thing and inspect it.      

1601
01:11:48,038 --> 01:11:51,673
Cuz you don't wanna set         
this thing right here which     

1602
01:11:51,675 --> 01:11:52,674
is the identifier.              

1603
01:11:52,676 --> 01:11:55,476
Every segue has an identifier,  
it's just the string and        

1604
01:11:55,478 --> 01:11:59,380
that identifier is what's       
you're gonna use in your code   

1605
01:11:59,382 --> 01:12:01,849
to talk about this segue.       

1606
01:12:01,851 --> 01:12:03,151
And I'll talk                   
about what you've               

1607
01:12:03,153 --> 01:12:06,587
been talk about regarding       
segues, any moment here.        

1608
01:12:06,589 --> 01:12:07,822
So always set that.             

1609
01:12:07,824 --> 01:12:08,022
And you wanna set it,           

1610
01:12:08,024 --> 01:12:11,659
the identifier to be something  
that kind of says what is       

1611
01:12:11,661 --> 01:12:11,793
segue does.                     

1612
01:12:11,795 --> 01:12:14,395
So in this case it              
shows a graph, so               

1613
01:12:14,397 --> 01:12:16,764
I call this show graph.         

1614
01:12:18,934 --> 01:12:21,135
That's how you set              
up your segue.                  

1615
01:12:21,137 --> 01:12:23,304
And that's true for             
navigation controller as well.  

1616
01:12:23,306 --> 01:12:24,439
If you have a navigation        
controller and                  

1617
01:12:24,441 --> 01:12:27,075
you have a button that causes   
another card to slide on you    

1618
01:12:27,077 --> 01:12:29,344
just control drag from that     
button to the other MVC.        

1619
01:12:29,346 --> 01:12:33,348
And then you use a show segue,  
and it'll just work.            

1620
01:12:33,350 --> 01:12:34,048
Has to be all inside,           

1621
01:12:34,050 --> 01:12:36,784
embedded in navigation          
controller, of course.          

1622
01:12:36,786 --> 01:12:38,553
So what can you do              
with these identifiers?         

1623
01:12:38,555 --> 01:12:41,456
It is actually possible to      
cause a segue to happen from    

1624
01:12:41,458 --> 01:12:44,158
code, with performSegue         
withIdentifier, but             

1625
01:12:44,160 --> 01:12:47,261
I'm not gonna talk about that,  
cuz we're never gonna do that.  

1626
01:12:47,263 --> 01:12:48,262
We always gonna have buttons,   

1627
01:12:48,264 --> 01:12:49,630
well I'm not gonna say          
we're never gonna do that,      

1628
01:12:49,632 --> 01:12:52,300
but we won't be doing that      
in your assignment three,       

1629
01:12:52,302 --> 01:12:52,767
that's for sure.                

1630
01:12:52,769 --> 01:12:53,434
It's pretty rare.               

1631
01:12:53,436 --> 01:12:55,036
But you can do it               
with performSegue.              

1632
01:12:55,038 --> 01:12:58,072
But the more important use of   
the identifier is not causing   

1633
01:12:58,074 --> 01:12:59,807
segues to happen cuz            
segues kinda happen             

1634
01:12:59,809 --> 01:13:01,976
automatically when              
the buttons are pressed.        

1635
01:13:01,978 --> 01:13:03,678
It's to prepare for a segue.    

1636
01:13:03,680 --> 01:13:07,014
This is the most important      
method in all of                

1637
01:13:07,016 --> 01:13:10,351
multiple MVC programming        
is this preparing for segue     

1638
01:13:10,353 --> 01:13:14,455
method which I'm gonna show     
you in a moment here, okay.     

1639
01:13:14,457 --> 01:13:17,191
And remember, we're all         
segueing to a new MVC           

1640
01:13:17,193 --> 01:13:19,060
freshly created, so             
it's always raw.                

1641
01:13:19,062 --> 01:13:22,830
So we have to prepare it to     
do what it's going to do.       

1642
01:13:24,133 --> 01:13:24,632
Here is the method.             

1643
01:13:24,634 --> 01:13:26,367
It's called prepare for         
segue, and                      

1644
01:13:26,369 --> 01:13:29,871
it also has a sender            
argument right there.           

1645
01:13:29,873 --> 01:13:33,241
The segue that's passed         
along that first argument       

1646
01:13:33,243 --> 01:13:36,944
is just a little container      
that contains interesting       

1647
01:13:36,946 --> 01:13:38,679
information about the segue.    

1648
01:13:38,681 --> 01:13:42,049
For example,                    
the identifier, Show Graph.     

1649
01:13:42,317 --> 01:13:46,320
And very importantly, the       
controller that you're seguing  

1650
01:13:46,322 --> 01:13:47,288
too, because the whole          
point is here,                  

1651
01:13:47,290 --> 01:13:50,825
you're suppose to be preparing  
this MVC that's going to        

1652
01:13:50,827 --> 01:13:52,126
come on screen.                 

1653
01:13:52,128 --> 01:13:52,693
To do its job so                

1654
01:13:52,695 --> 01:13:56,597
you get that thing from         
this little segue object.       

1655
01:13:56,599 --> 01:13:59,267
The sender is kinda             
like buttons,                   

1656
01:13:59,269 --> 01:14:01,669
the button sender when          
we had the action there.        

1657
01:14:01,671 --> 01:14:04,338
It's just what object           
is instigating this.            

1658
01:14:04,340 --> 01:14:06,941
So in the calculator example    
you're gonna have a button      

1659
01:14:06,943 --> 01:14:10,077
clicking causing this segue,    
it's gonna be that button.      

1660
01:14:10,079 --> 01:14:11,479
Okay, the button that's         
causing the segue.              

1661
01:14:11,481 --> 01:14:15,683
But it's Any because anything,  
when we saw the example         

1662
01:14:15,685 --> 01:14:18,986
of the all settings, we were    
clicking on table view cells    

1663
01:14:18,988 --> 01:14:22,256
there not buttons but cells in  
what's called a table view,     

1664
01:14:22,258 --> 01:14:24,892
which we're gonna talk          
about week after next.          

1665
01:14:24,894 --> 01:14:26,327
And so                          
that could be the sender.       

1666
01:14:26,329 --> 01:14:29,430
Or you might have done perform  
segue on the previous slide,    

1667
01:14:29,432 --> 01:14:30,865
that actually let you           
set the sender so               

1668
01:14:30,867 --> 01:14:35,136
you've tell it anything you     
want, it could be nil also.     

1669
01:14:35,138 --> 01:14:36,971
We don't use it that much.      

1670
01:14:37,706 --> 01:14:39,874
The first thing I'm             

1671
01:14:39,876 --> 01:14:41,609
do is going to be               
get the identifier.             

1672
01:14:41,611 --> 01:14:42,210
Note that it can be nil so      

1673
01:14:42,212 --> 01:14:46,180
I'm gonna say if let to get it  
out of that segue right there.  

1674
01:14:46,182 --> 01:14:49,016
And I need that identifier cuz  
I need to know which segue I'm  

1675
01:14:49,018 --> 01:14:51,319
doing because I might           
have three buttons              

1676
01:14:51,321 --> 01:14:54,121
on my calculator that segued    
to three different things.      

1677
01:14:54,123 --> 01:14:56,290
Now you're not gonna have in    
assignment three but you could  

1678
01:14:56,292 --> 01:14:58,025
have multiple buttons           
segueing to different things.   

1679
01:14:58,027 --> 01:15:00,995
So you need to know which       
segue you're talking about.     

1680
01:15:00,997 --> 01:15:04,332
So you switch on it and         
then you check the case.        

1681
01:15:04,334 --> 01:15:06,334
And in the case of Show Graph,  

1682
01:15:06,336 --> 01:15:09,003
which is the one we're          
gonna do right here,            

1683
01:15:09,005 --> 01:15:15,009
we're going to prepare that     
graphing MVC to do its job.     

1684
01:15:15,011 --> 01:15:19,380
Now, in order to talk           
to that graphing MVC,           

1685
01:15:19,382 --> 01:15:21,916
we have to get it as            
a graph controller.             

1686
01:15:21,918 --> 01:15:24,519
Now the type of that            
destination view controller     

1687
01:15:24,521 --> 01:15:28,489
that's in the segue object      
is just UIViewController,       

1688
01:15:28,491 --> 01:15:31,592
it doesn't know that it's       
a graph view controller or      

1689
01:15:31,594 --> 01:15:34,695
something like that it's        
just UIViewController.          

1690
01:15:34,697 --> 01:15:35,897
So we have to use as,           

1691
01:15:35,899 --> 01:15:39,500
remember the "as?" I told       
you you could cast anything.    

1692
01:15:39,502 --> 01:15:43,371
Not just any object, you can    
cast a UIViewController to try  

1693
01:15:43,373 --> 01:15:45,840
and down cast it to             
a specific view controller.     

1694
01:15:45,842 --> 01:15:49,043
So here I'm going to try and    
cast the destination view       

1695
01:15:49,045 --> 01:15:50,311
controller to be                
a graph controller.             

1696
01:15:50,313 --> 01:15:53,247
I'm gonna assume the graph      
controller is the type of       

1697
01:15:53,249 --> 01:15:55,850
the controller                  
of my graph MVC.                

1698
01:15:55,852 --> 01:15:57,785
And if I'm able to do that,     
which I should be,              

1699
01:15:57,787 --> 01:16:01,088
because I know this is          
the show graph segue, so        

1700
01:16:01,090 --> 01:16:02,023
I better be, if,                

1701
01:16:02,025 --> 01:16:04,892
if I'm not then probably I      
wanna raise an exception here.  

1702
01:16:04,894 --> 01:16:06,794
Because I'm really expecting    
to be able to do it.            

1703
01:16:06,796 --> 01:16:09,163
Maybe I use as exclamation      
point right there instead of    

1704
01:16:09,165 --> 01:16:13,267
as question mark as it'd be     
bad if I was doing this and     

1705
01:16:13,269 --> 01:16:14,902
it wasn't actually              
graphcontroller.                

1706
01:16:14,904 --> 01:16:16,304
But anyway,                     
I get the graphcontroller so    

1707
01:16:16,306 --> 01:16:21,609
now VC, this variable VC is     
of type graphcontroller, so     

1708
01:16:21,611 --> 01:16:23,344
I can start setting             
vars in it,                     

1709
01:16:23,346 --> 01:16:27,181
calling methods, whatever I     
need to do to prepare that      

1710
01:16:27,183 --> 01:16:29,750
graph controller                
to do its job.                  

1711
01:16:29,752 --> 01:16:29,884
Now in the Calculator case,     

1712
01:16:29,886 --> 01:16:33,020
what I'm doing is I'm           
going to somehow have to        

1713
01:16:33,022 --> 01:16:35,523
set the model of                
the graph you control or        

1714
01:16:35,525 --> 01:16:38,426
something to show               
the graph I want.               

1715
01:16:38,428 --> 01:16:40,161
Based on what 's                
in my calculator.               

1716
01:16:40,163 --> 01:16:41,929
So, I'm preparing it            
to do what it does.             

1717
01:16:41,931 --> 01:16:44,799
I'm pretty much never going     
to talk to this thing again.    

1718
01:16:44,801 --> 01:16:49,403
So I'm gonna give it all the    
information it needs to do to   

1719
01:16:49,405 --> 01:16:50,705
go to a job.                    

1720
01:16:50,707 --> 01:16:54,008
This is kind of one             
time set up and                 

1721
01:16:54,010 --> 01:16:56,177
that's the way MVCs need to     
work through, object oriented.  

1722
01:16:56,179 --> 01:16:59,013
They get set up once and then   
they just live on their own,    

1723
01:16:59,015 --> 01:16:59,180
they do their own job.          

1724
01:16:59,182 --> 01:17:02,917
They don't talk back to the     
person who brought them up or   

1725
01:17:02,919 --> 01:17:03,985
to anyone else.                 

1726
01:17:03,987 --> 01:17:05,453
They live on their own.         

1727
01:17:05,721 --> 01:17:09,023
So you can do anything you      
want to here, to try to do it.  

1728
01:17:09,025 --> 01:17:11,492
One thing to warn               
you here though and             

1729
01:17:11,494 --> 01:17:13,461
half of you will                
trip over this.                 

1730
01:17:13,463 --> 01:17:15,429
When you're doing               
this preparation                

1731
01:17:15,431 --> 01:17:16,731
of that graph controller,       

1732
01:17:16,733 --> 01:17:22,269
that graph controller's         
outlets have not been set.      

1733
01:17:22,838 --> 01:17:25,606
I told you that IOS hooks up    
those outlets to really really  

1734
01:17:25,608 --> 01:17:28,909
quickly, but this is one case   
where it doesn't quite hook     

1735
01:17:28,911 --> 01:17:29,777
them up fast enough.            

1736
01:17:29,779 --> 01:17:33,547
When you're doing               
vc.property1 = whatever,        

1737
01:17:33,549 --> 01:17:36,951
vc.callMethodToSetItUp, at      
that time,                      

1738
01:17:36,953 --> 01:17:39,086
none of vc's outlets are set.   

1739
01:17:39,088 --> 01:17:40,521
So you can't do                 
anything in the UI.             

1740
01:17:40,523 --> 01:17:43,591
So if you're collecting         
information for what to,        

1741
01:17:43,593 --> 01:17:43,658
to do in the UI,                

1742
01:17:43,660 --> 01:17:46,460
you're gonna have to store it   
in some vars or something.      

1743
01:17:46,462 --> 01:17:48,262
And then later,                 
either in the did set           

1744
01:17:48,264 --> 01:17:51,365
of those outlet centers, or     
I'm gonna teach you about view  

1745
01:17:51,367 --> 01:17:52,767
controller life                 
cycle next week.                

1746
01:17:52,769 --> 01:17:54,635
There's other methods           
that happen later,              

1747
01:17:54,637 --> 01:17:57,171
that you can be sure            
that the outlets are set.       

1748
01:17:57,173 --> 01:18:00,241
So this is in red, any time I   
put something with red inside,  

1749
01:18:00,243 --> 01:18:01,308
you really wanna                
pay attention.                  

1750
01:18:01,310 --> 01:18:03,711
So the outlets are not          
set in graph control or         

1751
01:18:03,713 --> 01:18:07,715
when you're preparing,          
the process of preparing.       

1752
01:18:08,350 --> 01:18:10,451
You can also prevent            
a segue from happening,         

1753
01:18:10,453 --> 01:18:13,487
let's say if the calculator     
and you try to hit graph and    

1754
01:18:13,489 --> 01:18:15,656
you're on the middle            
of a binary operation,          

1755
01:18:15,658 --> 01:18:16,991
pending binary operation.       

1756
01:18:16,993 --> 01:18:18,693
Well you can't graph that.      

1757
01:18:18,695 --> 01:18:20,861
There's no way to graph         
a pending binary operation.     

1758
01:18:20,863 --> 01:18:24,198
Three times, what's             
the graph of three times?       

1759
01:18:24,200 --> 01:18:24,899
It's nothing.                   

1760
01:18:24,901 --> 01:18:25,800
So, you wanna prevent it.       

1761
01:18:25,802 --> 01:18:28,035
So, in your assignment three    
you're gonna wanna use this     

1762
01:18:28,037 --> 01:18:30,438
method and be able to control   
a shared perform segue,         

1763
01:18:30,440 --> 01:18:31,472
you're gonna return false.      

1764
01:18:31,474 --> 01:18:36,277
When you're in the middle of    
a pending operation, okay?      

1765
01:18:36,745 --> 01:18:38,913
And so that's it for today.     

1766
01:18:38,915 --> 01:18:40,147
There's no Friday               
section this week.              

1767
01:18:40,149 --> 01:18:43,784
Next Friday section is going    
to be on performance analysis   

1768
01:18:43,786 --> 01:18:45,586
cuz there's going to be         
an extra credit item            

1769
01:18:45,588 --> 01:18:47,421
in assignment three             
that does that.                 

1770
01:18:47,423 --> 01:18:49,356
You'll see that                 
when it goes out.               

1771
01:18:49,358 --> 01:18:49,857
Next week I'm gonna do          

1772
01:18:49,859 --> 01:18:51,625
a demo about all this           
multiple MVC stuff.             

1773
01:18:51,627 --> 01:18:54,128
I'm gonna start talking about   
the View Controller Lifecycle.  

1774
01:18:54,130 --> 01:18:57,164
And then the super important    
topic, Protocols and            

1775
01:18:57,166 --> 01:19:01,435
Delegation.                     

1776
01:19:01,437 --> 01:19:03,270
UI things like scroll           
views and table views.          

1777
01:19:03,272 --> 01:19:06,741
We'll start that next week cuz  
all you're learning up till     

1778
01:19:06,743 --> 01:19:07,441
now is kinda the basics.        

1779
01:19:07,443 --> 01:19:09,610
Swift and views and             
multiple MVCs.                  

1780
01:19:09,612 --> 01:19:12,379
One you got that basics in      
now you can start doing these   

1781
01:19:12,381 --> 01:19:13,581
more powerful objects.          

1782
01:19:13,583 --> 01:19:18,018
Now, assignment three is        
already on the class forums.    

1783
01:19:18,020 --> 01:19:19,220
You can start it right now.     

1784
01:19:19,222 --> 01:19:21,188
It's got really two             
major points to it.             

1785
01:19:21,190 --> 01:19:24,825
One is a custom UI view         
that does graphing.             

1786
01:19:24,827 --> 01:19:27,394
A truly a custom MVC            
that does graphing.             

1787
01:19:27,396 --> 01:19:29,864
And that thing is completely    
independent of your             

1788
01:19:29,866 --> 01:19:30,698
calculator.                     

1789
01:19:30,700 --> 01:19:33,334
In fact I would recommend       
you create a new app            

1790
01:19:33,336 --> 01:19:34,502
to create that MVC.             

1791
01:19:34,504 --> 01:19:36,837
Because if you don't wanna be   
polluted by you calculator,     

1792
01:19:36,839 --> 01:19:39,774
it's just a generic             
graphing MVC.                   

1793
01:19:39,776 --> 01:19:40,274
Once you've got that,           

1794
01:19:40,276 --> 01:19:43,043
you're gonna combine it         
with your calculator            

1795
01:19:43,045 --> 01:19:43,477
like I'm talking about here,    

1796
01:19:43,479 --> 01:19:44,979
where you're going to           
click a button, and             

1797
01:19:44,981 --> 01:19:47,248
it's going to graph what's      
in your calculator.             

1798
01:19:47,250 --> 01:19:49,416
So you can get started on that  
today because you already       

1799
01:19:49,418 --> 01:19:51,652
know everything you need        
to know about UI view and       

1800
01:19:51,654 --> 01:19:52,720
doing a custom draw method.     

1801
01:19:52,722 --> 01:19:54,588
So you could start              
drawing your graph and          

1802
01:19:54,590 --> 01:19:56,357
building that custom            
graphing view.                  

1803
01:19:56,359 --> 01:19:59,493
You could even build            
the custom MVC because you're   

1804
01:19:59,495 --> 01:20:02,163
building it as                  
a single MVC to start.          

1805
01:20:02,165 --> 01:20:04,532
But you're gonna wanna          
wait til Monday to try and      

1806
01:20:04,534 --> 01:20:06,233
hook it up to your              
calculator because you're       

1807
01:20:06,235 --> 01:20:09,136
gonna wanna see me do           
the demo of a split view and    

1808
01:20:09,138 --> 01:20:10,538
all that stuff and              
see that happening.             

1809
01:20:10,540 --> 01:20:12,406
It'll help you when you         
start hooking your two          

1810
01:20:12,408 --> 01:20:15,709
MVC's the graphing one and      
the calculator one together.    

1811
01:20:15,711 --> 01:20:17,044
And because you                 
need next Monday                

1812
01:20:17,046 --> 01:20:20,347
this assignment's not gonna     
be due until the next Monday.   

1813
01:20:20,349 --> 01:20:23,184
Okay, so you got a nice 10 or   
11 days to get it done.         

1814
01:20:23,186 --> 01:20:26,020
But I strongly recommend you    
use the next few days to go     

1815
01:20:26,022 --> 01:20:27,955
ahead and get started           
on the view part of it.         

1816
01:20:27,957 --> 01:20:31,258
Because that's more than        
half of the assignment and      

1817
01:20:31,260 --> 01:20:33,627
you can make a big              
head start into it.             

1818
01:20:33,629 --> 01:20:36,030
The last thing is the last      
reading assignment              

1819
01:20:36,032 --> 01:20:36,664
also went out today.            

1820
01:20:36,666 --> 01:20:40,334
The due date is pretty          
much next Wednesday.            

1821
01:20:40,602 --> 01:20:42,503
But that is going               
to make it so                   

1822
01:20:42,505 --> 01:20:44,538
you've read the entire          
Swift document.                 

1823
01:20:44,540 --> 01:20:45,873
So by the end of                
this assignment,                

1824
01:20:45,875 --> 01:20:48,409
you should feel like you know   
everything that's in there.     

1825
01:20:48,411 --> 01:20:50,211
Now of course, I don't          
expect you to know every        

1826
01:20:50,213 --> 01:20:52,813
single detail about             
every single thing.             

1827
01:20:52,815 --> 01:20:53,547
But I expect you                

1828
01:20:53,549 --> 01:20:56,150
if you like want to do          
a nested function I expect you  

1829
01:20:56,152 --> 01:20:58,252
to be able to know where to     
go look to find that out.       

1830
01:20:58,254 --> 01:21:01,689
Or you wanna do                 
optional chaining and           

1831
01:21:01,691 --> 01:21:04,925
you can't quite remember you    
know where to go look it up.    

1832
01:21:04,927 --> 01:21:05,826
That's a reference document.    

1833
01:21:05,828 --> 01:21:07,528
So you wanna know               
what's in there.                

1834
01:21:07,530 --> 01:21:11,265
Even if you don't               
memorize at all.                

1835
01:21:11,267 --> 01:21:12,199
That's it.                      

1836
01:21:12,201 --> 01:21:13,167
See you next time.              

1837
01:21:13,169 --> 01:21:13,200
>> For more, please visit       
us at stanford.edu.             

