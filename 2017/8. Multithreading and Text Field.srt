1
00:00:00,001 --> 00:00:05,938
>> Stanford University.         

2
00:00:05,940 --> 00:00:11,810
>> Welcome to Stanford CS193,   
winter quarter of 2017.         

3
00:00:11,812 --> 00:00:16,615
Today I'm going to continue     
that demo that we started last  

4
00:00:16,617 --> 00:00:16,949
I'm really just going to        
enhance it to be multiple MVC   

5
00:00:16,951 --> 00:00:19,818
time.                           

6
00:00:19,820 --> 00:00:23,522
again, it gives you a chance    
to see it all happen again.     

7
00:00:23,524 --> 00:00:24,957
And I'm gonna be going          
very quickly for                

8
00:00:24,959 --> 00:00:28,093
doing that because we already   
did that in the last demo, so   

9
00:00:28,095 --> 00:00:29,294
and you did it on               
your homework,                  

10
00:00:29,296 --> 00:00:31,630
so hopefully it's really,       
really comfortable.             

11
00:00:31,632 --> 00:00:34,466
Now we're going to dive         
back into the slides and        

12
00:00:34,468 --> 00:00:38,137
solve a problem that we're      
going to have with our app,     

13
00:00:38,139 --> 00:00:40,139
which is that                   
it's really slow.               

14
00:00:40,141 --> 00:00:43,175
And not only really slow, but   
it blocks our user interface    

15
00:00:43,177 --> 00:00:46,912
so that the user thinks         
the app is probably dead and    

16
00:00:46,914 --> 00:00:48,447
needs to be killed or           
something.                      

17
00:00:48,449 --> 00:00:51,116
And we're gonna fix that        
with multithreading, so         

18
00:00:51,118 --> 00:00:54,653
I'm gonna talk a little about   
how we do multithreading.       

19
00:00:54,655 --> 00:00:55,421
I'll go back to the demo,       

20
00:00:55,423 --> 00:00:56,989
we'll fix it with               
multithreading.                 

21
00:00:56,991 --> 00:00:59,858
I'm gonna show you a couple     
other cool things to do.        

22
00:00:59,860 --> 00:01:02,361
And then we're gonna come       
back to the slides and          

23
00:01:02,363 --> 00:01:05,030
I'm gonna talk about text       
field, which is a little bit    

24
00:01:05,032 --> 00:01:08,400
of a random topic, but          
I have to fit it in somewhere.  

25
00:01:08,402 --> 00:01:11,203
And if I have a little time at  
the end, which I doubt I will,  

26
00:01:11,205 --> 00:01:13,939
but if I have time at the end,  
I'll actually get started on    

27
00:01:13,941 --> 00:01:17,342
table view, which is gonna be   
our big topic for Wednesday.    

28
00:01:17,344 --> 00:01:18,077
A very important topic, and     

29
00:01:18,079 --> 00:01:20,079
it's what your next             
assignment is gonna be about.   

30
00:01:20,081 --> 00:01:22,915
Sorry, your next assignment     
has multi-threading as well,    

31
00:01:22,917 --> 00:01:26,018
of course, but it's mostly      
a table view assignment, so     

32
00:01:26,020 --> 00:01:27,352
that's what we're               
gonna do today.                 

33
00:01:27,354 --> 00:01:32,424
So let's jump right back into   
our demo from last time.        

34
00:01:32,426 --> 00:01:35,427
You remember that it            
looked like this, so            

35
00:01:35,429 --> 00:01:35,861
here it is running.             

36
00:01:35,863 --> 00:01:41,033
And this was a nice little      
image viewing application so    

37
00:01:41,035 --> 00:01:45,971
far, and we can zoom in and     
out, and pan around, and        

38
00:01:45,973 --> 00:01:46,171
all that.                       

39
00:01:46,173 --> 00:01:49,241
And in fact,                    
in building this application,   

40
00:01:49,243 --> 00:01:53,645
I've built this nice generic    
ImageViewController.            

41
00:01:53,647 --> 00:01:56,915
It's a reusable MVC,            
just like in your assignment,   

42
00:01:56,917 --> 00:02:00,352
you built a reusable graphing   
view controller, well,          

43
00:02:00,354 --> 00:02:03,355
I've built a generic MVC        
that will show an image and     

44
00:02:03,357 --> 00:02:07,459
let you zoom in on it and pan   
around, so, that's kinda cool.  

45
00:02:07,461 --> 00:02:13,332
Hopefully you're gaining        
an appreciation for             

46
00:02:13,334 --> 00:02:16,368
good API design, and how        
important good API design and   

47
00:02:16,370 --> 00:02:19,872
reusable componentry is to      
building good architecture in   

48
00:02:19,874 --> 00:02:23,041
general, so hopefully,          
you're seeing that.             

49
00:02:23,043 --> 00:02:25,777
I mean, these are very simple   
applications that we're         

50
00:02:25,779 --> 00:02:26,612
writing, so it's hard to see.   

51
00:02:26,614 --> 00:02:29,148
But when you start building     
a huge app and have these       

52
00:02:29,150 --> 00:02:31,884
reuseable components and        
really strong public APIs that  

53
00:02:31,886 --> 00:02:35,287
you're willing to support, and  
things like that, then you'll   

54
00:02:35,289 --> 00:02:38,056
find that your application      
is gonna have less bugs,        

55
00:02:38,058 --> 00:02:39,958
and it's gonna be able          
to grow over time.              

56
00:02:39,960 --> 00:02:42,995
And you're gonna be able        
to work in teams better, so     

57
00:02:42,997 --> 00:02:45,130
it's just good all around.      

58
00:02:45,532 --> 00:02:49,735
In my viewDidLoad, I put        
that little imageURL equals     

59
00:02:49,737 --> 00:02:53,138
DemoURL.stanford that           
was just for testing.           

60
00:02:53,140 --> 00:02:54,840
Now that we know                
that it works,                  

61
00:02:54,842 --> 00:02:56,308
I'm just gonna delete that so   

62
00:02:56,310 --> 00:02:59,645
that my ImageViewController     
again can be reusable.          

63
00:02:59,647 --> 00:03:03,315
This is its public API,         
which happens to be its model.  

64
00:03:03,317 --> 00:03:03,649
It's not that unusual,          

65
00:03:03,651 --> 00:03:07,386
by the way, for the public      
API of a view controller        

66
00:03:07,388 --> 00:03:11,223
to be to set the model,         
that's quite actually common.   

67
00:03:11,225 --> 00:03:12,791
So that's our model,            
it's the URL for                

68
00:03:12,793 --> 00:03:14,560
the image you wanna show,       
and it's public.                

69
00:03:14,562 --> 00:03:18,197
So we're gonna be using that    
when we build the rest of       

70
00:03:18,199 --> 00:03:18,463
So our storyboard so far        
just has this one image view    

71
00:03:18,465 --> 00:03:21,133
our app.                        

72
00:03:21,135 --> 00:03:25,470
controller right here, and I'm  
just gonna rapidly go through   

73
00:03:25,472 --> 00:03:26,905
and build a multiple MVC app.   

74
00:03:26,907 --> 00:03:30,642
What we're gonna do is          
just use our generic image      

75
00:03:30,644 --> 00:03:34,513
controller MVC here to          
view images related to          

76
00:03:34,515 --> 00:03:35,614
the Cassini project,            

77
00:03:35,616 --> 00:03:40,118
which is a space probe that     
was sent out to Saturn.         

78
00:03:40,120 --> 00:03:44,756
To do that, it's gonna be       
all the things you know.        

79
00:03:44,758 --> 00:03:47,392
I'm going to get it             
build another MVC, so           

80
00:03:47,394 --> 00:03:50,395
here let's drag                 
out another MVC.                

81
00:03:50,397 --> 00:03:52,164
Let's create a class for it.    

82
00:03:52,166 --> 00:03:54,166
It's a Cocoa Touch Class,       
of course,                      

83
00:03:54,168 --> 00:03:58,804
I'm gonna call it Cassini,      
my CassiniViewController.       

84
00:03:58,806 --> 00:04:01,473
I'm gonna put it in the same    
place that I put all my other   

85
00:04:01,475 --> 00:04:04,843
files here, and here's my       
CassiniViewController.          

86
00:04:04,845 --> 00:04:07,646
I'm gonna remove my             
ViewController lifecycle but    

87
00:04:07,648 --> 00:04:11,950
I'm gonna leave my prepare for  
segue, without the comments,    

88
00:04:11,952 --> 00:04:15,153
because I am going to           
be segueing from this           

89
00:04:15,155 --> 00:04:19,992
CassiniViewController to        
my ImageViewController.         

90
00:04:19,994 --> 00:04:23,195
So the way this UI is gonna     
work is I'm just gonna have     

91
00:04:23,197 --> 00:04:24,429
three buttons here in Cassini,  

92
00:04:24,431 --> 00:04:27,466
similar to how we had with      
the emotions application.       

93
00:04:27,468 --> 00:04:32,204
And these three buttons are     
going to pick these three URLs  

94
00:04:32,206 --> 00:04:36,608
right here that are from        
NASA here, jpl.nasa.gov.        

95
00:04:36,610 --> 00:04:39,411
One's of Cassini itself,        
one's of the Earth and          

96
00:04:39,413 --> 00:04:43,115
one is of Saturn, so we're      
just gonna have three buttons   

97
00:04:43,117 --> 00:04:46,418
that let you pick               
those three images.             

98
00:04:46,819 --> 00:04:48,420
So let's build that UI.         

99
00:04:48,988 --> 00:04:51,456
First of all, let's make        
sure we set our identity.       

100
00:04:51,458 --> 00:04:53,892
We just dragged out             
a generic ViewController,       

101
00:04:53,894 --> 00:04:57,362
we obviously want its identity  
to be a specific subclass,      

102
00:04:57,364 --> 00:04:59,731
in this case,                   
the CassiniViewController,      

103
00:04:59,733 --> 00:05:02,834
just like this one is           
an ImageViewController.         

104
00:05:02,836 --> 00:05:06,838
So let's drag this out to make  
the button a little bigger,     

105
00:05:06,840 --> 00:05:07,673
to get a bigger font.           

106
00:05:07,675 --> 00:05:13,879
Try a maybe 40 point,           
something like that.            

107
00:05:13,881 --> 00:05:17,549
The three buttons that I had,   
one was Earth, I'll just do     

108
00:05:17,551 --> 00:05:21,753
copy and paste, make a couple   
more buttons here, another one  

109
00:05:21,755 --> 00:05:24,523
was Cassini itself,             
another one was Saturn.         

110
00:05:24,525 --> 00:05:28,827
And we'll just select these     
and we'll put them in a stack   

111
00:05:28,829 --> 00:05:32,564
view, and we'll put some        
spacing between, and            

112
00:05:32,566 --> 00:05:34,633
we'll fill, and fill equally.   

113
00:05:34,635 --> 00:05:37,202
We'll take it and               
drag it to the middle here.     

114
00:05:37,204 --> 00:05:40,038
We'll use our blue lines        
to put it in the middle, so     

115
00:05:40,040 --> 00:05:41,239
that we can go down here, and   

116
00:05:41,241 --> 00:05:42,741
say Reset to                    
Suggested Constraints.          

117
00:05:42,743 --> 00:05:45,844
We can go to our Size           
Inspector here just to verify   

118
00:05:45,846 --> 00:05:49,948
that the constraints it added   
seem like the ones we want,     

119
00:05:49,950 --> 00:05:52,851
which definitely                
does seem like that.            

120
00:05:52,853 --> 00:05:53,385
Let's go ahead and,             

121
00:05:53,387 --> 00:05:55,821
one thing I wanna show you      
a little different this         

122
00:05:55,823 --> 00:05:58,990
time is before we started with  
a SplitViewController and       

123
00:05:58,992 --> 00:06:01,259
then I added the navigation     
controller in.                  

124
00:06:01,261 --> 00:06:03,628
In other words,                 
I started with an iPad UI,      

125
00:06:03,630 --> 00:06:07,699
building an iPad UI, and then   
I made it also work on iPhone.  

126
00:06:07,701 --> 00:06:09,434
We can do the other             
way around as well.             

127
00:06:09,436 --> 00:06:13,505
So we could take this view      
controller, which is the one,   

128
00:06:13,507 --> 00:06:15,807
the base one that we            
want to show, and               

129
00:06:15,809 --> 00:06:19,578
we can say embed it in          
a Navigation Controller.        

130
00:06:19,580 --> 00:06:21,079
And then, obviously,            
we want to make this            

131
00:06:21,081 --> 00:06:23,181
navigation controller be        
the entry point of our app.     

132
00:06:23,183 --> 00:06:26,184
I don't want to forget that,    
so I'm just gonna throw that    

133
00:06:26,186 --> 00:06:28,019
little arrow over               
here onto the left.             

134
00:06:28,021 --> 00:06:30,622
And then when we do             
our segues here,                

135
00:06:30,624 --> 00:06:34,259
like from Earth over to here,   
and from Cassini.               

136
00:06:34,261 --> 00:06:37,329
And I'm going to Show Detail    
because I know eventually I'm   

137
00:06:37,331 --> 00:06:39,798
also going to support           
the iPad, instead of Show,      

138
00:06:39,800 --> 00:06:42,334
which would only really         
support the iPhone.             

139
00:06:42,336 --> 00:06:44,536
Because Show, remember,         
if you do a Show and            

140
00:06:44,538 --> 00:06:47,105
you're in the master of         
an iPad, it'll actually,        

141
00:06:47,107 --> 00:06:49,641
if you're in Navigation         
Controller in the master of     

142
00:06:49,643 --> 00:06:52,911
the iPad and you do Show, it's  
going to replace the mster,     

143
00:06:52,913 --> 00:06:56,181
whereas Show Detail             
replaces the detail.            

144
00:06:56,549 --> 00:06:58,150
So here I have                  
these three segues.             

145
00:06:58,152 --> 00:07:00,285
I'm gonna kinda cheat           
a little bit and                

146
00:07:00,287 --> 00:07:05,257
have my segue identifiers       
just be the names of these      

147
00:07:05,259 --> 00:07:08,193
URLs right here, so             
Cassini, Earth, and Saturn,     

148
00:07:08,195 --> 00:07:10,595
that's gonna be my              
segue identifiers.              

149
00:07:10,597 --> 00:07:14,132
I say it's cheating because     
normally your identifier would  

150
00:07:14,134 --> 00:07:15,167
just identify the segue, and    

151
00:07:15,169 --> 00:07:17,736
then you would get the          
information somewhere else,     

152
00:07:17,738 --> 00:07:20,305
but just to make our code       
really, really simple.          

153
00:07:20,307 --> 00:07:22,307
Oops, that's not Earth,         
that one's Saturn.              

154
00:07:22,309 --> 00:07:26,578
And then let's go to this one,  
wait, where's our Earth?        

155
00:07:26,580 --> 00:07:31,283
And we go to this one,          
oops, this one rather,          

156
00:07:31,285 --> 00:07:32,684
that is Cassini.                

157
00:07:32,686 --> 00:07:36,354
Okay, so we built our UI here.  

158
00:07:36,356 --> 00:07:41,460
Now, this would be really only  
an iPhone appropriate UI.       

159
00:07:41,462 --> 00:07:45,630
If we run this on iPhone,       
it actually would look fine,    

160
00:07:45,632 --> 00:07:47,032
you'll see.                     

161
00:07:47,233 --> 00:07:48,834
Now why doesn't                 
this work as is?                

162
00:07:48,836 --> 00:07:52,704
You see I had this right here,  
and I get this modal view,      

163
00:07:52,706 --> 00:07:53,238
it kinda came up.               

164
00:07:53,240 --> 00:07:55,340
Obviously, we have no           
image selected yet,             

165
00:07:55,342 --> 00:07:57,709
we haven't written              
any prepare code.               

166
00:07:57,711 --> 00:07:58,777
But there's no back here.       

167
00:07:58,779 --> 00:07:59,478
Why is there no back?           

168
00:07:59,480 --> 00:08:02,414
That's because of this          
things being show detail.       

169
00:08:02,416 --> 00:08:05,417
Because show detail only works  
in the iPad configuration.      

170
00:08:05,419 --> 00:08:08,320
So like, if I change            
this to being a show.           

171
00:08:08,322 --> 00:08:12,290
Well, actually,                 
I'm not sure, someone was       

172
00:08:12,292 --> 00:08:16,828
saying that to we have to       
remake that one to be a show.   

173
00:08:16,830 --> 00:08:19,798
Let's see if that works.        

174
00:08:19,800 --> 00:08:24,836
And this is where               
it goes Saturn.                 

175
00:08:25,104 --> 00:08:26,404
Cuz we're not being prepared.   

176
00:08:26,406 --> 00:08:30,141
All right, see?                 

177
00:08:30,143 --> 00:08:33,812
So now it pushes, we're inside  
the navigation controller.      

178
00:08:33,814 --> 00:08:34,646
We can go back.                 

179
00:08:34,648 --> 00:08:38,783
But this is an iPhone only and  
we don't want that.             

180
00:08:38,785 --> 00:08:40,585
We want to work on              
both platforms.                 

181
00:08:40,587 --> 00:08:41,920
So I am gonna take              
that out again,                 

182
00:08:41,922 --> 00:08:43,722
and put this back to            
be showed detail.               

183
00:08:43,724 --> 00:08:46,892
Anyway, so I have this nice     
iPhone API, or UI rather.       

184
00:08:46,894 --> 00:08:48,393
And I wanna turn into           
split view if, so               

185
00:08:48,395 --> 00:08:50,729
I am going the other way and    
terms of preparing it.          

186
00:08:50,731 --> 00:08:53,665
So lets go down here and        
grab a split view.              

187
00:08:53,667 --> 00:08:54,132
I drag it out here,             

188
00:08:54,134 --> 00:08:56,868
remember it brings all          
this other junk with it.        

189
00:08:56,870 --> 00:08:58,303
We close our document outline,  

190
00:08:58,305 --> 00:09:02,007
you can delete these            
things that came with it.       

191
00:09:03,276 --> 00:09:07,646
Now we have our Split View      
Controller right here, and      

192
00:09:07,648 --> 00:09:12,284
we can just use Ctrl+Drag       
to make this be our master.     

193
00:09:12,286 --> 00:09:14,786
And we can put this down here,  
let's say,                      

194
00:09:14,788 --> 00:09:17,255
in control drag to make         
this be our detail.             

195
00:09:17,257 --> 00:09:22,694
And let's make our entry        
point the display view and      

196
00:09:22,696 --> 00:09:23,762
just like that now,             

197
00:09:23,764 --> 00:09:27,766
we turn this into something     
that can work on iPad.          

198
00:09:27,768 --> 00:09:31,002
But having these segues we      
show versus show detail is      

199
00:09:31,004 --> 00:09:35,073
kind of an annoying little      
difference between the two      

200
00:09:35,075 --> 00:09:35,173
platforms.                      

201
00:09:35,175 --> 00:09:37,642
So you kinda have to know       
whether you're gonna put        

202
00:09:37,644 --> 00:09:39,878
it into split view or           
not unfortunately,              

203
00:09:39,880 --> 00:09:40,779
when you build your app.        

204
00:09:40,781 --> 00:09:48,086
Now, this will still            
work on iPhone.                 

205
00:09:48,088 --> 00:09:50,522
Just begins on                  
the detail to start and         

206
00:09:50,524 --> 00:09:54,025
we can navigate here into       
these various things.           

207
00:09:54,027 --> 00:09:58,129
And it will also work on iPad,  

208
00:09:58,131 --> 00:10:06,237
lets see iPad.                  

209
00:10:06,239 --> 00:10:08,540
Here is the thing we can        
slide out our master,           

210
00:10:08,542 --> 00:10:11,042
I click on these things or      
we can go to landscape.         

211
00:10:11,044 --> 00:10:15,080
And again, it's not showing     
anything cuz I haven't yet.     

212
00:10:15,082 --> 00:10:15,113
on iPad maybe we want to        
put this in a navigation        

213
00:10:15,115 --> 00:10:17,015
Now, again,                     

214
00:10:17,017 --> 00:10:19,718
controller right here so,       
we get a nice title over here.  

215
00:10:19,720 --> 00:10:22,621
So I can do that as well,       
just go down here and           

216
00:10:22,623 --> 00:10:25,290
select this new                 
controller down here and        

217
00:10:25,292 --> 00:10:27,692
do embed in                     
navigation control.             

218
00:10:27,694 --> 00:10:28,059
Now if we do that,              

219
00:10:28,061 --> 00:10:30,729
we're gonna be want to be       
careful in our prepare.         

220
00:10:30,731 --> 00:10:33,465
That when we prepare for        
this segue, we account for      

221
00:10:33,467 --> 00:10:36,167
this navigation controller      
perhaps being there.            

222
00:10:36,169 --> 00:10:38,670
And I'm gonna show you          
how to do that as well.         

223
00:10:39,205 --> 00:10:41,306
Let's do our prepare.           

224
00:10:41,308 --> 00:10:41,506
We've got our UI,               

225
00:10:41,508 --> 00:10:44,409
same kinda UI as we did in      
emotions, exactly the same.     

226
00:10:44,411 --> 00:10:48,580
But obviously nothing works     
in these segues unless we       

227
00:10:48,582 --> 00:10:48,813
So, let's go to our prepare     
for segue here and type it in.  

228
00:10:48,815 --> 00:10:51,983
prepare.                        

229
00:10:51,985 --> 00:10:54,786
It's gonna be a really          
simple prepare for segue,       

230
00:10:54,788 --> 00:10:57,856
cuz I made the segue            
identifier be the thing I'm     

231
00:10:57,858 --> 00:10:59,090
gonna look up in the table.     

232
00:10:59,092 --> 00:11:02,694
So I'm just gonna say           
if I can let the URL,           

233
00:11:02,696 --> 00:11:07,399
that I want the NASA URL,       
equal DemoURL.NASA.             

234
00:11:07,401 --> 00:11:11,603
And I'm gonna look it up, by    
taking the segue identifier,    

235
00:11:11,605 --> 00:11:16,374
but if that segue identified    
with nil, this won't work.      

236
00:11:16,376 --> 00:11:16,675
In other words,                 

237
00:11:16,677 --> 00:11:19,611
you can't look up something     
that's an optional,             

238
00:11:19,613 --> 00:11:21,913
like the identifier is,         
in a dictionary.                

239
00:11:21,915 --> 00:11:23,782
This dictionary is looking for  
a string here.                  

240
00:11:23,784 --> 00:11:28,386
So, I'm just gonna say          
defaulting to nothing.          

241
00:11:28,388 --> 00:11:31,523
And of course, looking this     
up in this dictionary,          

242
00:11:31,525 --> 00:11:32,257
it's gonna return nil.          

243
00:11:32,259 --> 00:11:35,326
But I'm doing if let right      
here, so that's okay.           

244
00:11:35,328 --> 00:11:39,097
Now I'm getting the URL if      
possible, so that segue,        

245
00:11:39,099 --> 00:11:41,666
if it's possible to             
get that URL out of             

246
00:11:41,668 --> 00:11:45,070
the NASA dictionary,            
then I will do that.            

247
00:11:45,072 --> 00:11:45,203
Now, of course,                 

248
00:11:45,205 --> 00:11:47,872
I need the view controller      
that I'm segueing to.           

249
00:11:47,874 --> 00:11:49,507
So I'm gonna say,               

250
00:11:49,509 --> 00:11:55,613
if I can let imageVC =          
(segue.destination as?          

251
00:11:55,615 --> 00:11:57,248
ImageViewController.            

252
00:11:57,250 --> 00:12:02,854
That's that view controller     
that we're segueing to.         

253
00:12:04,190 --> 00:12:06,791
If I can do that,               
then I can prepare.             

254
00:12:06,793 --> 00:12:09,761
But of course, here we've       
got the problem where this      

255
00:12:09,763 --> 00:12:12,097
destination on an iPad          
might be, what?                 

256
00:12:12,099 --> 00:12:13,631
A navigation controller.        

257
00:12:13,633 --> 00:12:16,468
So normally, we would           
put a little if in here,        

258
00:12:16,470 --> 00:12:19,370
we say if the thing is          
a navigation controller,        

259
00:12:19,372 --> 00:12:22,407
then we would get               
the visible view controller.    

260
00:12:22,409 --> 00:12:23,875
Remember that code              
that we put in there?           

261
00:12:23,877 --> 00:12:25,910
You probably put that           
in your homework,               

262
00:12:25,912 --> 00:12:29,013
if you used navigation          
control for your detail.        

263
00:12:29,015 --> 00:12:31,216
Instead, I'm gonna put          
that in an extension,           

264
00:12:31,218 --> 00:12:33,618
remember we learned about       
extensions last time?           

265
00:12:33,620 --> 00:12:37,455
So I'm going to extend          
UI view controller, and         

266
00:12:37,457 --> 00:12:39,958
just add a var to               
UIViewController.               

267
00:12:39,960 --> 00:12:44,162
Now this var I'm gonna add,     
I'm gonna call it contents,     

268
00:12:44,164 --> 00:12:48,733
and it's going to be of         
type UIViewController.          

269
00:12:48,834 --> 00:12:50,168
And since it's in               
the extension,                  

270
00:12:50,170 --> 00:12:52,504
it can't be a var               
that has any storage.           

271
00:12:52,506 --> 00:12:53,905
Extensions have no storage.     

272
00:12:53,907 --> 00:12:57,909
So it can only be a computed    
var so I'm gonna compute it.    

273
00:12:57,911 --> 00:13:00,545
And what is contents gonna be,  
what is this var?               

274
00:13:00,547 --> 00:13:03,681
Well, I'm defining contents     
to be the contents of this      

275
00:13:03,683 --> 00:13:06,684
view controller, what this      
view controller holds?          

276
00:13:06,686 --> 00:13:09,721
Well, if this view controller   
is a navigation controller,     

277
00:13:09,723 --> 00:13:11,856
then tha's the visible          
view controller.                

278
00:13:11,858 --> 00:13:14,359
If it's not,                    
then it's just itself,          

279
00:13:14,361 --> 00:13:17,195
a view controller's             
contents are itself.            

280
00:13:17,197 --> 00:13:19,197
Unless, it happens to be        
a navigation controller and     

281
00:13:19,199 --> 00:13:21,332
then it returns to              
visible view controller.        

282
00:13:21,334 --> 00:13:23,902
I could also,                   

283
00:13:23,904 --> 00:13:26,104
And if I am,                    
show the visible tab, too.      

284
00:13:26,106 --> 00:13:28,306
But for interest of             
time I won't do that,           

285
00:13:28,308 --> 00:13:30,141
you can do that if you want.    

286
00:13:30,143 --> 00:13:36,114
I'm just gonna say here if      
I can let navcon = self as?     

287
00:13:36,116 --> 00:13:38,249
a UINavigationController.       

288
00:13:38,251 --> 00:13:41,052
In other words, if I'm a        
navigation controller then I'm  

289
00:13:41,054 --> 00:13:44,022
just going to return            
the navcon's visible.           

290
00:13:44,024 --> 00:13:44,222
Navcon is myself,               

291
00:13:44,224 --> 00:13:46,891
it's just that it's myself      
as a navigation controller.     

292
00:13:46,893 --> 00:13:50,895
So I can send this var,         
I can get this var from it.     

293
00:13:50,897 --> 00:13:53,832
Of course, this visible         
view controller is optional     

294
00:13:53,834 --> 00:13:56,734
because the navigation          
controller might not have any   

295
00:13:56,736 --> 00:13:58,336
view controller in              
it at the moment.               

296
00:13:58,338 --> 00:14:02,040
So, I better have a default     
there which I'll just           

297
00:14:02,042 --> 00:14:02,740
return self.                    

298
00:14:02,742 --> 00:14:05,610
And then if I'm not in          
navigation controller,          

299
00:14:05,612 --> 00:14:10,014
then I'm just                   
gonna return self.              

300
00:14:10,016 --> 00:14:12,650
So you see how content, it's    
showing the contents of our     

301
00:14:12,652 --> 00:14:15,520
navigation folder, otherwise,   
it's returning myself.          

302
00:14:15,522 --> 00:14:17,455
Which is kind of cool for       
this situation.                 

303
00:14:17,457 --> 00:14:20,024
And it allows me to go up       
here, instead of saying segue   

304
00:14:20,026 --> 00:14:23,027
destination, I can just say     
sequedestination.content.       

305
00:14:23,029 --> 00:14:28,266
And then I don't need           
this little if up there.        

306
00:14:28,634 --> 00:14:31,669
Now, is this a reasonable       
thing to do in extension?       

307
00:14:31,671 --> 00:14:35,206
Absolutely it is, because       
this var has complete and       

308
00:14:35,208 --> 00:14:39,010
utter understandable semantics  
that only have to do            

309
00:14:39,012 --> 00:14:40,612
with the UI view                
controller and                  

310
00:14:40,614 --> 00:14:45,116
nothing to do with Casini view  
controller or anything else.    

311
00:14:45,118 --> 00:14:46,885
Because when you                
do an extension,                

312
00:14:46,887 --> 00:14:48,119
you want that to be the case.   

313
00:14:48,121 --> 00:14:50,855
You don't wanna generally put   
extensions on other classes     

314
00:14:50,857 --> 00:14:52,924
that have to do with            
other classes, generally.       

315
00:14:52,926 --> 00:14:56,294
Unless they're kind of          
like standard types, or         

316
00:14:56,296 --> 00:14:57,428
something like that.            

317
00:14:57,430 --> 00:14:59,530
Maybe converting from           
a string to a date,             

318
00:14:59,532 --> 00:15:00,265
or something like that.         

319
00:15:00,267 --> 00:15:02,467
In some way might               
make some sense, but            

320
00:15:02,469 --> 00:15:05,536
you wouldn't want to put        
extensions on other classes     

321
00:15:05,538 --> 00:15:08,606
that are specific to things     
that other classes need.        

322
00:15:08,608 --> 00:15:12,644
In that case, just put          
a function in your own class    

323
00:15:12,646 --> 00:15:14,245
that does that thing.           

324
00:15:14,247 --> 00:15:17,548
So does everyone see what       
I'm saying about this?          

325
00:15:17,550 --> 00:15:18,683
This makes perfect sense,       

326
00:15:18,685 --> 00:15:20,718
this would be usable            
in any environment,             

327
00:15:20,720 --> 00:15:24,555
it's a sensible var to          
have on a view controller.      

328
00:15:26,325 --> 00:15:28,760
Now that I have my              
image view controller,          

329
00:15:28,762 --> 00:15:29,127
either by getting it or         

330
00:15:29,129 --> 00:15:32,230
going through the navigation    
controller, I can prepare it.   

331
00:15:32,232 --> 00:15:34,165
And so                          
preparing it is really easy,    

332
00:15:34,167 --> 00:15:37,335
I just wanna set the URL        
equal to that URL, okay,        

333
00:15:37,337 --> 00:15:39,237
the URL that I got              
out of the demo URL.            

334
00:15:39,239 --> 00:15:43,708
This is just public API, okay,  
this happens to be its model,   

335
00:15:43,710 --> 00:15:45,343
let's also set its title.       

336
00:15:45,345 --> 00:15:46,477
We can set the title equal to,  

337
00:15:46,479 --> 00:15:48,246
we could do the same            
thing we did before.            

338
00:15:48,248 --> 00:15:50,982
Take the sender interpret       
it as a UI button and           

339
00:15:50,984 --> 00:15:56,187
if we're able to do that then   
we'll get the current title.    

340
00:15:56,956 --> 00:15:57,989
Which might be nil, but         

341
00:15:57,991 --> 00:16:00,058
that's okay because this        
is also an optional.            

342
00:16:00,060 --> 00:16:03,561
This is optional so can take    
a nil even though this is nil.  

343
00:16:03,563 --> 00:16:06,798
And of course it might be nil   
because this turns out to not   

344
00:16:06,800 --> 00:16:08,866
be true, and that's fine, too.  

345
00:16:09,168 --> 00:16:12,537
See how these optionals play    
out nicely because you have     

346
00:16:12,539 --> 00:16:14,605
vars that are optional and      
things are optional?            

347
00:16:14,607 --> 00:16:16,474
So you can set things           
equal to each other and         

348
00:16:16,476 --> 00:16:20,211
it kind of just all plays out   
kind of beautifully there.      

349
00:16:20,213 --> 00:16:22,380
So that's it, let's run here.   

350
00:16:22,382 --> 00:16:26,551
Let's see                       

351
00:16:26,553 --> 00:16:31,889
what we got.                    

352
00:16:31,891 --> 00:16:32,123
Here we go.                     
So                              

353
00:16:32,125 --> 00:16:34,025
let's take a look at Cassini,   
for                             

354
00:16:34,027 --> 00:16:38,396
example, look, it's broken.     

355
00:16:38,398 --> 00:16:38,796
Whoa, what's going on?          

356
00:16:38,798 --> 00:16:46,170
I clicked there to get Cassini  
which, look, there's Cassini.   

357
00:16:46,172 --> 00:16:49,907
Let's zoom in on Cassini.       

358
00:16:49,909 --> 00:16:49,974
There it is.                    

359
00:16:49,976 --> 00:16:54,779
So this is the Cassini space    
probe right here by Saturn.     

360
00:16:54,781 --> 00:16:57,782
But when I clicked on it,       
it seemed like my UI froze.     

361
00:16:57,784 --> 00:16:58,916
And if I click on these         
other ones, look,               

362
00:16:58,918 --> 00:17:01,519
I'm clicking Saturn, Saturn,    
Saturn, nothing's happening.    

363
00:17:01,521 --> 00:17:04,555
Because it,                     
now something came up.          

364
00:17:05,024 --> 00:17:06,858
So this UI seems broken.        

365
00:17:06,860 --> 00:17:09,861
Now we're on ultra              
fast network here.              

366
00:17:09,863 --> 00:17:10,428
This is Stanford's network.     

367
00:17:10,430 --> 00:17:13,131
We have like gigabyte           
connections to everywhere and   

368
00:17:13,133 --> 00:17:16,100
it still took a while cuz       
it's a very large file.         

369
00:17:16,102 --> 00:17:19,504
Imagine I was on cellular.      

370
00:17:19,638 --> 00:17:23,441
That image might take           
a minute to download.           

371
00:17:23,443 --> 00:17:25,476
And meanwhile my app            
is completely stuck,            

372
00:17:25,478 --> 00:17:27,612
I can't click on                
any other button.               

373
00:17:27,614 --> 00:17:27,779
If I'm on iPhone,               

374
00:17:27,781 --> 00:17:31,349
lets see what he looks like     
on iPhone, it's even worse.     

375
00:17:32,618 --> 00:17:34,552
If I'm on iPhone,               
I'm gonna click that.           

376
00:17:34,554 --> 00:17:36,854
I'm gonna think,                
" my app is broken".            

377
00:17:36,856 --> 00:17:38,890
So I'm in                       
a NavigationController,         

378
00:17:38,892 --> 00:17:40,858
no problem,                     
I'll just hit back.             

379
00:17:40,860 --> 00:17:45,997
But even the back button's      

380
00:17:45,999 --> 00:17:52,437
not gonna work, as you'll see.  

381
00:17:52,439 --> 00:17:56,774
All right, so here we are.      

382
00:17:57,242 --> 00:17:58,076
Got the detailed view there.    

383
00:17:58,078 --> 00:18:01,279
Now I'm gonna hit Earth,        
it's stuck.                     

384
00:18:01,281 --> 00:18:02,780
And again,                      
I can't do anything.            

385
00:18:02,782 --> 00:18:03,748
Finally comes back.             

386
00:18:03,750 --> 00:18:07,919
So this kinda UI is horrible    
because, especially on          

387
00:18:07,921 --> 00:18:10,188
cellular or something           
where it's really slow,         

388
00:18:10,190 --> 00:18:11,489
users are like,                 
this app is broken.             

389
00:18:11,491 --> 00:18:14,725
They're literally going         
to double-click the Home        

390
00:18:14,727 --> 00:18:18,262
button and flip your app off,   
to use an analogy there.        

391
00:18:18,264 --> 00:18:21,365
They're gonna flip your app     
and kill it because their,      

392
00:18:21,367 --> 00:18:22,533
they think it's broken.         

393
00:18:22,535 --> 00:18:25,369
So we're gonna fix              
that with multitasking.         

394
00:18:25,371 --> 00:18:30,908
So first, let me show           

395
00:18:30,910 --> 00:18:35,947
you how that works.             

396
00:18:35,949 --> 00:18:39,817
All right, so, multithreading.  

397
00:18:39,819 --> 00:18:42,320
There's two reasons generally,  

398
00:18:42,322 --> 00:18:44,455
that you wanna do               
multithreading.                 

399
00:18:44,457 --> 00:18:47,658
One reason is, you have         
a mathematical problem, or      

400
00:18:47,660 --> 00:18:51,629
some image processing problem,  
that is best solved             

401
00:18:51,631 --> 00:18:55,266
using some kind of parallel     
processing algorithm where you  

402
00:18:55,268 --> 00:18:58,936
wanna go off and do 1000        
things or 100 things at once.   

403
00:18:58,938 --> 00:19:01,672
And then and when they're all   
done together you're gonna      

404
00:19:01,674 --> 00:19:03,841
combine the result, or          
something like that.            

405
00:19:03,843 --> 00:19:07,612
So that's an obvious need       
to do multithreading.           

406
00:19:07,614 --> 00:19:09,714
That's not the multithreading   
I'm gonna be                    

407
00:19:09,716 --> 00:19:10,348
talking to you about.           

408
00:19:10,350 --> 00:19:12,583
That, that's a perfectly        
valid use of multithreading,    

409
00:19:12,585 --> 00:19:14,819
iOS has some great API for      
doing that kind of design.      

410
00:19:14,821 --> 00:19:17,255
But that's not what             
I'm talking about.              

411
00:19:17,257 --> 00:19:20,992
The second reason that you      
might wanna do multithreading   

412
00:19:20,994 --> 00:19:22,894
is because you                  
have one thread.                

413
00:19:22,896 --> 00:19:24,729
By the way, does everyone       
know what a thread is?          

414
00:19:24,731 --> 00:19:27,598
Raise your hand if you          
know what a thread is.          

415
00:19:27,600 --> 00:19:30,201
Okay, I see some people         
saying, yeah, remind me.        

416
00:19:30,203 --> 00:19:34,939
A thread just means, thread is  
short for thread of execution.  

417
00:19:34,941 --> 00:19:39,410
And it just is kind of a,       
the process,                    

418
00:19:39,412 --> 00:19:42,313
through which code              
is executing.                   

419
00:19:42,315 --> 00:19:45,917
That could conceivably be       
separated where you have        

420
00:19:45,919 --> 00:19:47,018
multiple of them.               

421
00:19:47,020 --> 00:19:47,351
in the iOS, you've got a very   
important kind of main thread   

422
00:19:47,353 --> 00:19:50,721
For example,                    

423
00:19:50,723 --> 00:19:50,888
That's the thread of execution  
that is listening to gestures   

424
00:19:50,890 --> 00:19:54,358
of execution.                   

425
00:19:54,360 --> 00:19:57,061
and doing drawing,              
things like that.               

426
00:19:57,063 --> 00:19:59,063
Then you can have other         
threads of execution that       

427
00:19:59,065 --> 00:20:01,566
might be doing background       
things, like going out onto     

428
00:20:01,568 --> 00:20:04,669
the network and getting data,   
or something like that.         

429
00:20:04,671 --> 00:20:08,239
Most of our devices aren't      
multiprocessor, per se, so      

430
00:20:08,241 --> 00:20:11,943
these threads, although they    
have multiple cores, so         

431
00:20:11,945 --> 00:20:14,879
they can actually do            
two things at once.             

432
00:20:14,881 --> 00:20:15,413
They literally can.             

433
00:20:15,415 --> 00:20:17,682
But in this case where I'm      
talking about multithreading    

434
00:20:17,684 --> 00:20:22,587
to solve this problem of        
keeping the UI responsive,      

435
00:20:22,589 --> 00:20:23,721
we don't even care about that.  

436
00:20:23,723 --> 00:20:27,558
And so here's the thing with    
multithreading and the UI.      

437
00:20:27,560 --> 00:20:30,528
We want the thread of           
execution which is listening    

438
00:20:30,530 --> 00:20:34,432
to the user to be super         
responsive, always working,     

439
00:20:34,434 --> 00:20:35,132
never blocked.                  

440
00:20:35,134 --> 00:20:38,502
And we don't really care        
about other threads too much,   

441
00:20:38,504 --> 00:20:42,240
but we really want that one     
to be unblocked at all time.    

442
00:20:42,242 --> 00:20:45,309
So if we're ever going to do    
anything that would block,      

443
00:20:45,311 --> 00:20:48,846
like either block because it's  
doing so much computation       

444
00:20:48,848 --> 00:20:52,750
that it's not getting back      
to the rest of the code.        

445
00:20:52,752 --> 00:20:55,453
Or in this case, with our       
Cassini, it's gonna block       

446
00:20:55,455 --> 00:20:58,656
because it's waiting on some    
resource like the network.      

447
00:20:58,658 --> 00:21:01,859
Okay, I make a request for      
a URL.                          

448
00:21:01,861 --> 00:21:04,295
It doesn't respond              
immediately, I have to wait.    

449
00:21:04,297 --> 00:21:07,164
Any time I have to wait, I      
can't be waiting in the middle  

450
00:21:07,166 --> 00:21:09,700
of that UI cuz now no           
one can do a gesture or         

451
00:21:09,702 --> 00:21:12,570
click on the back button or     
do anything else.               

452
00:21:12,572 --> 00:21:14,305
So that's the kind of           
multithreading that I'm         

453
00:21:14,307 --> 00:21:15,773
talking about here that         
we're gonna try and             

454
00:21:15,775 --> 00:21:19,610
solve, is keep the UI thread    
responsive and active           

455
00:21:19,612 --> 00:21:23,247
by pushing everything else      
that could be slow or blocked,  

456
00:21:23,249 --> 00:21:27,018
waiting on a resource,          
off to a different thread.      

457
00:21:27,020 --> 00:21:27,852
Now in iOS,                     

458
00:21:27,854 --> 00:21:30,921
we don't actually even really   
talk about threads much.        

459
00:21:30,923 --> 00:21:31,922
I've been using                 
this word thread,               

460
00:21:31,924 --> 00:21:33,858
because that's what's going     
on underneath the covers.       

461
00:21:33,860 --> 00:21:36,994
We're talking about             
threads of execution here.      

462
00:21:36,996 --> 00:21:40,031
But really,                     
what we talk about is queues.   

463
00:21:40,732 --> 00:21:44,535
So multithreading is            
really about queues.            

464
00:21:44,537 --> 00:21:45,169
Now what's a queue?             

465
00:21:45,171 --> 00:21:47,905
Queue is an English word,       
actually.                       

466
00:21:47,907 --> 00:21:50,308
We don't use it in              
the United States much, but     

467
00:21:50,310 --> 00:21:52,009
a queue just means a line.      

468
00:21:52,011 --> 00:21:54,845
Like if you go to the movies,   
you might say, I'm queueing up  

469
00:21:54,847 --> 00:21:56,914
to see this movie, especially   
if you were in London,          

470
00:21:56,916 --> 00:22:00,318
you would say let's go          
queue for the movie.            

471
00:22:00,619 --> 00:22:03,354
So that's all a queue is,       
it's a line.                    

472
00:22:03,356 --> 00:22:05,056
And what are we gonna           
put in this line?               

473
00:22:05,058 --> 00:22:05,856
Instead of people waiting for   

474
00:22:05,858 --> 00:22:09,360
the movie, we're gonna          
put blocks of code.             

475
00:22:10,162 --> 00:22:12,930
And we know a great way to      
make a block of code that we    

476
00:22:12,932 --> 00:22:14,732
can put in a line               
which is a closure.             

477
00:22:14,734 --> 00:22:16,567
So we're almost always          
doing this with closure.        

478
00:22:16,569 --> 00:22:19,537
So putting these closures,      
it could be any blocking code,  

479
00:22:19,539 --> 00:22:22,173
but we're putting these         
closures basically,             

480
00:22:22,175 --> 00:22:24,308
usually into a queue.           

481
00:22:24,310 --> 00:22:26,777
And so what's happening         
then is the system              

482
00:22:26,779 --> 00:22:30,081
is creating threads as          
necessary to grab those         

483
00:22:30,083 --> 00:22:33,117
blocks off that queue, off the  
front of the line, who's ever   

484
00:22:33,119 --> 00:22:37,321
in the front of the queue and   
executing on a thread.          

485
00:22:37,823 --> 00:22:39,590
That's how multitasking or      

486
00:22:39,592 --> 00:22:41,759
multithreading really           
works in iOS.                   

487
00:22:41,761 --> 00:22:46,130
We don't really care how        
the system assigns threads to   

488
00:22:46,132 --> 00:22:47,765
these lines, these queues.      

489
00:22:47,767 --> 00:22:49,133
All we care about               
is the queues.                  

490
00:22:49,135 --> 00:22:52,303
And when we wanna express       
to the system where we want     

491
00:22:52,305 --> 00:22:55,139
things to run, you know,        
where the UI runs or            

492
00:22:55,141 --> 00:22:57,174
in background process or        
whatever,                       

493
00:22:57,176 --> 00:23:00,077
we specify it by what           
queue we put code on.           

494
00:23:00,079 --> 00:23:03,047
Does that make sense?           

495
00:23:03,615 --> 00:23:07,685
Let's talk about the queues     
that we can have.               

496
00:23:07,687 --> 00:23:10,788
One important queue,            
of course, is the main queue.   

497
00:23:10,790 --> 00:23:14,225
So this is the queue            
on which all the UI             

498
00:23:14,227 --> 00:23:14,992
activity is happening.          

499
00:23:14,994 --> 00:23:19,530
It's not only the queue that    
all UI activity is happening    

500
00:23:20,098 --> 00:23:20,297
But it's the only queue that    
UI activity can happen on.      

501
00:23:20,299 --> 00:23:24,602
in general.                     

502
00:23:24,970 --> 00:23:28,305
And that's because              
it's a serial queue.            

503
00:23:28,307 --> 00:23:30,808
A serial queue is               
a queue where everyone,         

504
00:23:30,810 --> 00:23:32,910
the blocks in code              
are waiting in line to run,     

505
00:23:32,912 --> 00:23:36,180
and there's only one            
thread to run them.             

506
00:23:36,182 --> 00:23:40,551
So when the system comes along  
to grab the next guy in line,   

507
00:23:40,553 --> 00:23:44,488
he runs him to completion and   
then goes back for              

508
00:23:44,490 --> 00:23:45,423
the next one.                   

509
00:23:45,425 --> 00:23:47,291
So you see how they're serial.  

510
00:23:47,293 --> 00:23:47,625
They happen in order.           

511
00:23:47,627 --> 00:23:50,795
The entire line of closures     
waiting to run, or code         

512
00:23:50,797 --> 00:23:55,166
waiting to run, is processed    
in order, one at a time.        

513
00:23:55,168 --> 00:23:58,469
What's really great about       
the UI side of that is it       

514
00:23:58,471 --> 00:23:59,537
makes it very predictable.      

515
00:23:59,539 --> 00:24:02,206
You really don't have to get    
into a lot of the mind games    

516
00:24:02,208 --> 00:24:05,776
of multithreading, where it's   
like, is this thing waiting on  

517
00:24:05,778 --> 00:24:09,046
this, do I have to have a lock  
on this data resource bug?      

518
00:24:09,048 --> 00:24:11,882
Because all the UI stuff        
is all happening in             

519
00:24:11,884 --> 00:24:12,450
the main queue.                 

520
00:24:12,452 --> 00:24:13,784
This is all                     
happening serially,             

521
00:24:13,786 --> 00:24:16,687
you never have to worry about   
two UI things accessing         

522
00:24:16,689 --> 00:24:18,522
the same data structure         
at the same time,               

523
00:24:18,524 --> 00:24:22,092
cuz they're all just marching   
in line, down this main queue.  

524
00:24:22,094 --> 00:24:26,864
So, all UI activity and only    
UI activity, no other stuff,    

525
00:24:26,866 --> 00:24:30,134
generally, runs in the UI,      
the main queue.                 

526
00:24:30,136 --> 00:24:32,470
And the reason we don't want    
other stuff running in the      

527
00:24:32,472 --> 00:24:35,439
main queue, is we never want    
the main queue to be blocked.   

528
00:24:35,441 --> 00:24:38,876
We never want it to be off      
doing some computation or,      

529
00:24:38,878 --> 00:24:40,511
certainly, never                
blocked waiting for             

530
00:24:40,513 --> 00:24:42,413
the network or something.       

531
00:24:42,415 --> 00:24:42,847
So that's the main queue,       

532
00:24:42,849 --> 00:24:44,982
that's the most important       
queue, and then,                

533
00:24:44,984 --> 00:24:46,383
there are these other queues.   

534
00:24:46,385 --> 00:24:48,919
I'm gonna talk first            
about the global queues.        

535
00:24:48,921 --> 00:24:52,056
The global queues               
are different kind of queues.   

536
00:24:52,058 --> 00:24:55,860
These global queues, people     
wait in line to go onto those,  

537
00:24:55,862 --> 00:24:59,063
and at the other end of the     
line the system has multiple    

538
00:24:59,065 --> 00:24:59,964
threads ready to go.            

539
00:24:59,966 --> 00:25:03,133
And it can pull a closure off   
the line, give it a thread,     

540
00:25:03,135 --> 00:25:05,202
it starts running,              
pulls another one off,          

541
00:25:05,204 --> 00:25:08,172
it starts running before        
the first one's even done.      

542
00:25:08,174 --> 00:25:10,975
So those are called             
concurrent queues.              

543
00:25:10,977 --> 00:25:13,878
The queues where you could be   
pulling people off the line     

544
00:25:13,880 --> 00:25:18,415
cuz you got multiple threads    
to assign to the task.          

545
00:25:18,583 --> 00:25:19,984
So, things we do                
outside the UI,                 

546
00:25:19,986 --> 00:25:23,587
like network things and things  
that block, we're generally     

547
00:25:23,589 --> 00:25:27,358
gonna do those in these         
global concurrent queues.       

548
00:25:27,360 --> 00:25:30,594
You can also create your        
own serial queues and           

549
00:25:30,596 --> 00:25:32,196
your own concurrent queues.     

550
00:25:32,198 --> 00:25:33,564
We'll talk about that           
in a couple slides.             

551
00:25:33,566 --> 00:25:35,466
You're not going to need        
to do that in this class.       

552
00:25:35,468 --> 00:25:38,669
90% of the time you're either   
using the main queue, or        

553
00:25:38,671 --> 00:25:41,605
you're using one of these       
global concurrent queues.       

554
00:25:41,607 --> 00:25:43,774
So let's talk about the code,   
how do you get a queue?         

555
00:25:43,776 --> 00:25:46,877
I need a queue because I wanna  
put a block of code on this     

556
00:25:46,879 --> 00:25:50,047
queue, I want it to             
get in line to go run.          

557
00:25:50,049 --> 00:25:50,981
Well, the main queue,           

558
00:25:50,983 --> 00:25:54,084
you just use this bar           
DispatchQueue.main.             

559
00:25:54,086 --> 00:25:55,653
It's a static bar,              
a class bar,                    

560
00:25:55,655 --> 00:25:58,022
on the class dispatch queue,    
and that's it,                  

561
00:25:58,024 --> 00:26:01,191
you have your main queue,       
it couldn't be easier.          

562
00:26:01,193 --> 00:26:04,562
Now, getting one of these       
global concurrent queues,       

563
00:26:04,564 --> 00:26:05,796
a little bit more work.         

564
00:26:05,798 --> 00:26:08,365
You're going to use             
DispatchQueue.global instead    

565
00:26:08,367 --> 00:26:12,570
of DispatchQueue.main, and it   
takes an argument there, QoS.   

566
00:26:12,572 --> 00:26:17,441
QoS stands for                  
Quality of Service.             

567
00:26:17,443 --> 00:26:19,910
So this is talking about how,   
what                            

568
00:26:19,912 --> 00:26:23,514
the quality of the service      
that the line is getting.       

569
00:26:23,516 --> 00:26:26,183
So, high quality service means  
things are being pulled off     

570
00:26:26,185 --> 00:26:28,986
the line really fast and the    
threads that are being used to  

571
00:26:28,988 --> 00:26:32,957
execute them are high priority  
threads that get to run a lot.  

572
00:26:32,959 --> 00:26:35,225
Cuz remember there's            
only one processor, so          

573
00:26:35,227 --> 00:26:36,961
they often kinda                
share the processor.            

574
00:26:36,963 --> 00:26:39,396
So, high quality service        
means you get a lot.            

575
00:26:39,398 --> 00:26:42,266
Low quality services, well,     
the system will pull your       

576
00:26:42,268 --> 00:26:45,402
thing off when it feels like    
it, like maybe the phone is,    

577
00:26:45,404 --> 00:26:47,771
is well, got woken up for       
some other reason,              

578
00:26:47,773 --> 00:26:49,840
it's not gonna wake             
your phone up to do it.         

579
00:26:49,842 --> 00:26:53,911
And it's certainly not going    
to block any high priority      

580
00:26:53,913 --> 00:26:55,312
thing, that kind of thing.      

581
00:26:55,314 --> 00:26:59,249
So, but the quality of service  
is not like a number, 0,        

582
00:26:59,251 --> 00:27:02,152
low quality, 10,                
high quality, instead,          

583
00:27:02,154 --> 00:27:04,288
it's kind of                    
a flavor of usage.              

584
00:27:04,290 --> 00:27:06,023
These are the four              
qualities of services here.     

585
00:27:06,025 --> 00:27:10,794
So user interactive is, means   
the user is interacting with    

586
00:27:10,796 --> 00:27:14,031
the UI right now,               
usually with a gesture.         

587
00:27:14,033 --> 00:27:17,434
They are panning around, or     
pinching, and your forking off  

588
00:27:17,436 --> 00:27:19,737
something into a thread         
to go do something.             

589
00:27:19,739 --> 00:27:22,940
Now, this is usually not a      
case of the thing you're gonna  

590
00:27:22,942 --> 00:27:25,509
be doing is so intensive        
that it would block the main    

591
00:27:25,511 --> 00:27:28,512
thread, because the person      
is panning right now.           

592
00:27:28,514 --> 00:27:31,582
But it might be something       
that can't quite keep up        

593
00:27:31,584 --> 00:27:34,918
with the finger, and you're     
going to deal with that by,     

594
00:27:34,920 --> 00:27:37,955
in this other thread, trying    
to keep up as best you can and  

595
00:27:37,957 --> 00:27:40,190
just updating the main          
thread as fast as you can,      

596
00:27:40,192 --> 00:27:42,693
which might be a little slower  
than the fingers going.         

597
00:27:42,695 --> 00:27:44,028
So, you know,                   
the finger dragging around,     

598
00:27:44,030 --> 00:27:47,197
maybe it's jumping a little     
bit because it can't calculate  

599
00:27:47,199 --> 00:27:48,565
its new position fast enough.   

600
00:27:48,567 --> 00:27:51,235
But the point is, this          
queue really needs to run,      

601
00:27:51,237 --> 00:27:54,438
almost as bad, it's almost      
as high priority as the main    

602
00:27:54,440 --> 00:27:57,708
queue because you're doing      
something interactive.          

603
00:27:57,710 --> 00:27:59,643
Okay, the next one              
is user initiated.              

604
00:27:59,645 --> 00:28:03,347
What this means is this, the    
user currently did something    

605
00:28:03,349 --> 00:28:06,250
to initiate this activity,      
this can be done in             

606
00:28:06,252 --> 00:28:08,819
this queue, so                  
it's pretty high priority.      

607
00:28:08,821 --> 00:28:12,222
Okay, the user did something    
and they're waiting for         

608
00:28:12,224 --> 00:28:12,923
a response presumably.          

609
00:28:12,925 --> 00:28:17,361
So that would be the category   
for our Cassini project.        

610
00:28:17,363 --> 00:28:21,799
We clicked Earth, or Saturn,    
we want that image now, and     

611
00:28:21,801 --> 00:28:22,766
we're waiting for it.           

612
00:28:22,768 --> 00:28:25,402
So we are gonna use,            
user initiated.                 

613
00:28:25,404 --> 00:28:27,638
Cuz the user initiated          
a request for it.               

614
00:28:27,640 --> 00:28:28,272
But it's gonna take a while,    

615
00:28:28,274 --> 00:28:30,607
and the user's not              
interacting, we're not          

616
00:28:30,609 --> 00:28:33,210
making it doing something       
different every time it moves.  

617
00:28:33,212 --> 00:28:35,512
We were just, it's, but         
it was user initiated, so       

618
00:28:35,514 --> 00:28:37,781
user initiated is               
pretty high priority.           

619
00:28:37,783 --> 00:28:39,983
Then there's background and     
utility.                        

620
00:28:39,985 --> 00:28:40,818
These are somewhat similar.     

621
00:28:40,820 --> 00:28:44,855
Utility is truly the deepest    
of background processes.        

622
00:28:44,857 --> 00:28:47,591
This might be something you     
run once a week in your app.    

623
00:28:47,593 --> 00:28:50,761
Maybe it cleans up              
the database by removing old    

624
00:28:50,763 --> 00:28:50,994
crufty stuff,                   

625
00:28:50,996 --> 00:28:54,298
something the user doesn't      
even know is going on.          

626
00:28:54,300 --> 00:28:54,765
It's so low priority,           

627
00:28:54,767 --> 00:28:56,266
it just kind of happens         
in the background.              

628
00:28:56,268 --> 00:28:58,569
Background might be             
something that you, you,        

629
00:28:58,571 --> 00:29:01,305
like maybe you're thinking      
ahead a little bit about        

630
00:29:01,307 --> 00:29:03,340
the way the user might          
want to use your app.           

631
00:29:03,342 --> 00:29:05,809
And so you fork something       
off in the background to go     

632
00:29:05,811 --> 00:29:06,543
fetch some stuff or whatever.   

633
00:29:06,545 --> 00:29:09,279
The user didn't ask you to do   
it, but you kind of do it.      

634
00:29:09,281 --> 00:29:11,582
And you kind of                 
want it nowish but              

635
00:29:11,584 --> 00:29:14,651
it's okay if it takes           
a little while.                 

636
00:29:14,653 --> 00:29:15,652
So you see what that one is.    

637
00:29:15,654 --> 00:29:17,788
So these are the four           
qualities of service and        

638
00:29:17,790 --> 00:29:21,091
you just need to pick which     
quality of service you want     

639
00:29:21,093 --> 00:29:21,792
for your global queue.          

640
00:29:21,794 --> 00:29:24,495
And then remember that          
the things you put on there     

641
00:29:24,497 --> 00:29:26,363
are going to be run             
concurrently, so                

642
00:29:26,365 --> 00:29:28,532
they can really                 
depend on each other.           

643
00:29:28,534 --> 00:29:31,869
I'll talk about things          
depending on each other in      

644
00:29:31,871 --> 00:29:32,069
But this, you wanna think       
about the things you put on     

645
00:29:32,071 --> 00:29:34,571
a second.                       

646
00:29:34,573 --> 00:29:35,873
these global queues             
as being these                  

647
00:29:35,875 --> 00:29:38,408
independent little things,      
like go fetch this file,        

648
00:29:38,410 --> 00:29:41,078
it's all self contained,        
just give me this file.         

649
00:29:41,080 --> 00:29:43,781
Not blocks that are gonna       
be somehow depending on         

650
00:29:43,783 --> 00:29:46,049
each other's results because    
this is all concurrent,         

651
00:29:46,051 --> 00:29:47,651
these things can be happening   
at exactly the same time, so    

652
00:29:47,653 --> 00:29:51,688
they can't really, it's not     
serial like the main queue.     

653
00:29:52,123 --> 00:29:54,658
Now, like I said,               
you've got this queue,          

654
00:29:54,660 --> 00:29:58,328
and all we're gonna do          
is put blocks on it and         

655
00:29:58,330 --> 00:30:03,834
we do that with these two       
functions, async and sync.      

656
00:30:03,968 --> 00:30:06,970
These two functions take one    
argument, which is a closure,   

657
00:30:06,972 --> 00:30:10,774
a function but usually it's     
a closure, that closure         

658
00:30:10,776 --> 00:30:14,645
function takes no arguments     
and returns no arguments.       

659
00:30:14,913 --> 00:30:17,848
And you can put anything        
you want in that closure.       

660
00:30:18,750 --> 00:30:21,552
So, async means put this        
closure on the queue,           

661
00:30:21,554 --> 00:30:25,389
put it in the line to execute,  
and return immediately.         

662
00:30:25,391 --> 00:30:26,924
So async does                   
nothing except for              

663
00:30:26,926 --> 00:30:32,029
put that block into the queue,  
whatever queue you send it to.  

664
00:30:32,031 --> 00:30:34,765
Sync, same thing,               
puts it in the queue and        

665
00:30:34,767 --> 00:30:39,236
then it says block this thread  
until that closure finishes     

666
00:30:39,238 --> 00:30:42,439
executing on whatever           
queue it's on.                  

667
00:30:42,441 --> 00:30:43,774
Which could be a totally        
different queue.                

668
00:30:43,776 --> 00:30:48,745
So basically, the sync is       
block me until this closure     

669
00:30:48,747 --> 00:30:52,916
finishes executing              
wherever you put it.            

670
00:30:52,918 --> 00:30:56,053
So, you would never do          
sync on the main queue,         

671
00:30:56,055 --> 00:30:57,988
cuz we never want to            
block the main queue.           

672
00:30:57,990 --> 00:31:01,658
So, you would never say         
main queue.sync anything.       

673
00:31:01,660 --> 00:31:04,528
But you might have              
other queues and say,           

674
00:31:04,530 --> 00:31:09,700
you know, sorry, you would say  
main queue, you could say main  

675
00:31:09,702 --> 00:31:12,936
queue.sync, but you would       
say it on another thread.       

676
00:31:12,938 --> 00:31:14,605
You fire off some               
of the thread,                  

677
00:31:14,607 --> 00:31:16,139
it's running along              
in the background.              

678
00:31:16,141 --> 00:31:19,109
It could say main queue.sync,   
this code.                      

679
00:31:19,111 --> 00:31:21,311
Now that code would be          
put on the main queue.          

680
00:31:21,313 --> 00:31:22,946
Sometime later,                 
we don't know when,             

681
00:31:22,948 --> 00:31:24,147
it would run on                 
the main queue.                 

682
00:31:24,149 --> 00:31:27,351
Once it's done,                 
then your thread,               

683
00:31:27,353 --> 00:31:32,155
your queue that issued this,    
would continue.                 

684
00:31:33,658 --> 00:31:37,160
So sync, we would only do the   
sync from code that is not on   

685
00:31:37,162 --> 00:31:40,030
the main queue, cuz we never    
wanna block the main queue.     

686
00:31:40,032 --> 00:31:40,464
Question.                       

687
00:31:40,466 --> 00:31:43,700
Yeah, so the question is,       
when I say sync, am I saying,   

688
00:31:43,702 --> 00:31:47,204
let this block, this closure    
go first or something?          

689
00:31:47,206 --> 00:31:49,606
No, okay, this has nothing      
to do with priority.            

690
00:31:49,608 --> 00:31:51,909
The priority is                 
the quality of service.         

691
00:31:51,911 --> 00:31:53,277
I'm just saying                 
put this queue,                 

692
00:31:53,279 --> 00:31:56,813
this closure onto               
the end of that queue.          

693
00:31:57,482 --> 00:31:58,682
Now, whatever queue it is,      

694
00:31:58,684 --> 00:32:00,284
we'll have some                 
quality of service and          

695
00:32:00,286 --> 00:32:02,019
it will eventually              
get to this thing.              

696
00:32:02,021 --> 00:32:04,087
In the meantime,                
while all that's happening,     

697
00:32:04,089 --> 00:32:10,027
this queue that this code is    
in is waiting, it's blocked.    

698
00:32:10,029 --> 00:32:13,163
It's just blocked, waiting for  
that closure to finish.         

699
00:32:13,165 --> 00:32:15,165
How that closure finishes       
depends totally on what queue   

700
00:32:15,167 --> 00:32:17,701
you put it on, and how much     
other stuff is in that queue,   

701
00:32:17,703 --> 00:32:21,905
and whether it's a concurrent   
queue, all those things.        

702
00:32:22,941 --> 00:32:27,010
But this sync just means block  
me until that thing's done.     

703
00:32:28,179 --> 00:32:28,512
Question.                       

704
00:32:28,514 --> 00:32:31,048
So the question is,             
does running multiple threads,  

705
00:32:31,050 --> 00:32:33,617
having multiple things          
going in multiple threads,      

706
00:32:33,619 --> 00:32:35,452
does it slow down               
the main queue thread,          

707
00:32:35,454 --> 00:32:37,854
the thread that is              
running the main queue?         

708
00:32:37,856 --> 00:32:39,589
And the answer is no.           

709
00:32:39,591 --> 00:32:43,093
It does not usually, because    
the main queue is getting       

710
00:32:43,095 --> 00:32:44,361
a lot of high priority.         

711
00:32:44,363 --> 00:32:46,897
So it's pretty much             
interrupting anything those     

712
00:32:46,899 --> 00:32:50,267
other guys are doing whenever   
it wants to run, okay?          

713
00:32:50,269 --> 00:32:51,034
So if it wants to run,          

714
00:32:51,036 --> 00:32:52,369
it pretty much gets             
the processor.                  

715
00:32:52,371 --> 00:32:57,107
The main queue is the highest   
priority thread that exist on   

716
00:32:57,109 --> 00:32:58,141
the device.                     

717
00:32:58,143 --> 00:33:01,078
So it's rarely gonna            
be slowed down.                 

718
00:33:01,080 --> 00:33:04,481
Now, I'm not gonna talk         
about this, but yes,            

719
00:33:04,483 --> 00:33:06,016
threads have overhead.          

720
00:33:06,018 --> 00:33:07,484
If you created                  
thousands of threads,           

721
00:33:07,486 --> 00:33:08,952
that would start slowing        
down your computer.             

722
00:33:08,954 --> 00:33:11,855
But again, that's why we don't  
really talk about threads.      

723
00:33:11,857 --> 00:33:12,289
We talk about queues and        

724
00:33:12,291 --> 00:33:14,992
we let the iOS manage the       
threads cuz it knows how to     

725
00:33:14,994 --> 00:33:18,895
efficiently manage thread       
pools and things like that.     

726
00:33:21,032 --> 00:33:24,901
You can create your             
own queues just using           

727
00:33:24,903 --> 00:33:26,870
a normal initializer            
of DispatchQueue.               

728
00:33:26,872 --> 00:33:28,672
Instead of saying               
DispatchQueue.main or           

729
00:33:28,674 --> 00:33:31,541
DispatchQueue.global, you       
say DispatchQueue               

730
00:33:31,543 --> 00:33:34,745
with the initializer that       
takes a label that makes        

731
00:33:34,747 --> 00:33:35,812
a serial queue.                 

732
00:33:35,814 --> 00:33:39,116
And that label,                 
it shows up in the debugger.    

733
00:33:39,118 --> 00:33:41,184
So in the debugger              
if you pause and                

734
00:33:41,186 --> 00:33:42,686
that queue is                   
running a thread,               

735
00:33:42,688 --> 00:33:44,955
you'll see that thread in       
the little debugger window on   

736
00:33:44,957 --> 00:33:47,724
the left in the navigator       
with this name, this label,     

737
00:33:47,726 --> 00:33:50,394
so it's just purely for         
seeing it in the debugger.      

738
00:33:50,396 --> 00:33:52,462
And if you wanna make your      
own concurrent queue.           

739
00:33:52,464 --> 00:33:55,866
A queue that has multiple       
threads that can be working     

740
00:33:55,868 --> 00:33:55,899
on things.                      

741
00:33:55,901 --> 00:34:00,303
Then same thing, except you     
put attributes.concurrent,      

742
00:34:00,305 --> 00:34:02,039
in the initializer there.       

743
00:34:02,840 --> 00:34:04,608
You won't need to do            
that in this class and          

744
00:34:04,610 --> 00:34:05,208
rarely do we do this.           

745
00:34:05,210 --> 00:34:07,577
It's usually main queue and     

746
00:34:07,579 --> 00:34:10,747
the global queues               
90% of the time.                

747
00:34:10,749 --> 00:34:13,750
All right, I'm only showing     
you the absolute tip            

748
00:34:13,752 --> 00:34:15,485
of the iceberg for              
multithreading.                 

749
00:34:15,487 --> 00:34:18,021
I'm showing you the basic       
stuff you need to get stuff     

750
00:34:18,023 --> 00:34:20,590
off of the main thread but      
there is a lot more.            

751
00:34:20,592 --> 00:34:23,693
You're gonna wanna familiarize  
yourself eventually with        

752
00:34:23,695 --> 00:34:26,363
DispatchQueue and               
all the things that it can do.  

753
00:34:26,365 --> 00:34:28,498
This stuff is all               
based on something              

754
00:34:28,500 --> 00:34:30,133
called Grand Central Dispatch.  

755
00:34:30,135 --> 00:34:33,236
Because when we put             
a closure onto a queue,         

756
00:34:33,238 --> 00:34:38,175
we call that dispatching        
the closure onto that queue.    

757
00:34:39,877 --> 00:34:42,612
For those of you who do         
know about multithreading,      

758
00:34:42,614 --> 00:34:44,381
you can do all the things       
you can expect,                 

759
00:34:44,383 --> 00:34:48,218
protecting critical sections,   
readers and writers, you know,  

760
00:34:48,220 --> 00:34:49,686
single writer                   
multiple readers.               

761
00:34:49,688 --> 00:34:51,922
You can do synchronous          
dispatch, you can do locking,   

762
00:34:51,924 --> 00:34:53,090
all the things you              
need to do you can do.          

763
00:34:53,092 --> 00:34:57,561
I'm not gonna talk about any    
of that, but it's all there.    

764
00:35:00,164 --> 00:35:03,266
There is another API for        
doing multithreading,           

765
00:35:03,268 --> 00:35:07,404
OperationQueue and Operation,   
these are classes.              

766
00:35:07,406 --> 00:35:09,372
Classes or structs,             
I guess they're classes.        

767
00:35:09,374 --> 00:35:12,609
And you'll see those            
occasionally in iOS API,        

768
00:35:12,611 --> 00:35:14,010
kinda older iOS API.            

769
00:35:14,012 --> 00:35:15,846
But for the program             
you're gonna do, again,         

770
00:35:15,848 --> 00:35:18,348
unless you got the kind of      
multithreading problem, which   

771
00:35:18,350 --> 00:35:21,718
is doing a parallel processing  
thing, not the kind of problem  

772
00:35:21,720 --> 00:35:24,254
where you're getting            
something off the main queue.   

773
00:35:24,256 --> 00:35:28,191
Operation and OperationQueue    
are nice because it makes easy  

774
00:35:28,193 --> 00:35:29,526
to make dependencies.           

775
00:35:29,528 --> 00:35:30,827
Where you say this              
block of code                   

776
00:35:30,829 --> 00:35:32,462
depends on this                 
one running first,              

777
00:35:32,464 --> 00:35:35,732
I need the result from this     
one before I can do this one.   

778
00:35:35,734 --> 00:35:37,367
So you can set up               
those relationships,            

779
00:35:37,369 --> 00:35:40,270
then you can say,               
now I just start running them.  

780
00:35:40,272 --> 00:35:40,437
And the system                  

781
00:35:40,439 --> 00:35:43,874
will make sure this one gets    
run before this one, etc.       

782
00:35:43,876 --> 00:35:44,441
All those dependencies.         

783
00:35:44,443 --> 00:35:48,545
So that's Operation and         
OperationQueue.                 

784
00:35:52,917 --> 00:35:52,983
you'll see certain methods      
that are multithreaded.         

785
00:35:52,985 --> 00:35:58,255
In iOS,                         

786
00:35:58,257 --> 00:36:00,056
And you'll see that             
in the documentation,           

787
00:36:00,058 --> 00:36:01,224
you'll read in                  
the documentation.              

788
00:36:01,226 --> 00:36:03,994
And the way it works is you're  
gonna see a method that takes   

789
00:36:03,996 --> 00:36:06,963
a closure as an argument, and   
it'll say in the documentation  

790
00:36:06,965 --> 00:36:10,300
this closure is run on another  
thread off the main queue.      

791
00:36:10,302 --> 00:36:10,901
And when you see that,          

792
00:36:10,903 --> 00:36:14,771
you have to go, uh-oh, because  
any code I put in that closure  

793
00:36:14,773 --> 00:36:18,208
that I'm passing to this        
function can't be doing any     

794
00:36:18,210 --> 00:36:21,444
UI stuff because that only      
can happen on the main queue.   

795
00:36:21,446 --> 00:36:24,514
And this happens quite a lot,   
that we have a closure that     

796
00:36:24,516 --> 00:36:27,050
we're putting on some           
background queue, or            

797
00:36:27,052 --> 00:36:28,185
passing to some iOS function,   

798
00:36:28,187 --> 00:36:31,054
that says it's not gonna        
put it on the main queue.       

799
00:36:31,056 --> 00:36:34,691
But we still wanna do UI        
stuff, so how do we do that?    

800
00:36:34,693 --> 00:36:37,961
We just dispatch it             
back to the main queue.         

801
00:36:37,963 --> 00:36:40,330
And this is what                
that looks like.                

802
00:36:40,332 --> 00:36:45,735
Here is an iOS API that takes   
a closure as an argument and    

803
00:36:45,737 --> 00:36:48,672
it runs that closure            
off the main queue.             

804
00:36:48,674 --> 00:36:51,841
I's called NSURLSession,        
i's used for                    

805
00:36:51,843 --> 00:36:53,276
getting the contents of URLs.   

806
00:36:53,278 --> 00:36:57,380
Now, you saw in our image       
view controller demo, so far,   

807
00:36:57,382 --> 00:37:00,317
that we already know how to     
get the contents of URLs,       

808
00:37:00,319 --> 00:37:02,552
we just use data contents of.   

809
00:37:02,554 --> 00:37:04,721
Remember, we said try           
data contents of.               

810
00:37:04,723 --> 00:37:08,692
And it blocked, blocked the     
main queue while it went and    

811
00:37:08,694 --> 00:37:09,459
got that URL.                   

812
00:37:09,461 --> 00:37:10,627
So that's one way to do it.     

813
00:37:10,629 --> 00:37:13,797
But it kind of                  
non-configurable.               

814
00:37:13,799 --> 00:37:15,832
What's cool about               
NSURLSession is,                

815
00:37:15,834 --> 00:37:19,102
you see that argument there     
configuration.default?          

816
00:37:19,104 --> 00:37:20,370
Well, you can change            
that configuration.             

817
00:37:20,372 --> 00:37:23,206
For example, you could say,     
I'm gonna fetch this URL,       

818
00:37:23,208 --> 00:37:25,909
but don't fetch                 
it over cellular.               

819
00:37:25,911 --> 00:37:28,044
Only fetch it if I              
happen to be on a Wi-Fi         

820
00:37:28,046 --> 00:37:29,746
network, for example.           

821
00:37:29,748 --> 00:37:31,615
So you can configure how you    
want this fetching to happen.   

822
00:37:31,617 --> 00:37:35,185
So it's kind of a more          
powerful way of fetching than   

823
00:37:35,187 --> 00:37:36,620
just saying data contents of.   

824
00:37:36,622 --> 00:37:40,924
And the way it works is you     
create an NSURLSession with a,  

825
00:37:40,926 --> 00:37:45,695
(this is an old slide, so it's  
just called URLSession and URL  

826
00:37:45,697 --> 00:37:50,634
not NSURL), but you create it   
with a certain configuration,   

827
00:37:50,636 --> 00:37:54,571
then you get the URL you        
want and then you call this     

828
00:37:54,573 --> 00:37:57,941
method dataTask(with: url) and  
closure.                        

829
00:37:57,943 --> 00:38:02,445
And what this does is it        
creates a dataTask object.      

830
00:38:02,447 --> 00:38:05,015
With that URL that you          
want to get, and when, and      

831
00:38:05,017 --> 00:38:07,817
it goes off to fetch it,        
or it will in a minute.         

832
00:38:07,819 --> 00:38:09,319
And when you send               
it off to fetch it,             

833
00:38:09,321 --> 00:38:12,255
when it comes back it will      
call this closure and           

834
00:38:12,257 --> 00:38:13,623
this closure has                
three arguments.                

835
00:38:13,625 --> 00:38:16,593
The data it got from the URL,   
the NSURL or                    

836
00:38:16,595 --> 00:38:19,996
the URL response,               
and then some error,            

837
00:38:19,998 --> 00:38:23,133
if some error happened          
trying to get it.               

838
00:38:23,135 --> 00:38:26,870
So the, that closure, so this   
closure is interesting cuz it,  

839
00:38:26,872 --> 00:38:28,338
the documentation               
will tell you,                  

840
00:38:28,340 --> 00:38:31,041
this closure does not           
run on the main queue.          

841
00:38:31,043 --> 00:38:35,245
So, that's a problem because    
if, (by the way, that resume,   

842
00:38:35,247 --> 00:38:36,379
task.resume at the bottom,      

843
00:38:36,381 --> 00:38:39,482
that's what actually causes     
it to go do the fetch),         

844
00:38:39,484 --> 00:38:41,951
so the dataTask really          
doesn't do anything but         

845
00:38:41,953 --> 00:38:45,388
create the task, and then when  
you say task.resume it goes     

846
00:38:45,390 --> 00:38:48,758
off to fetch it on some         
other thread, doesn't block.    

847
00:38:48,760 --> 00:38:51,661
task.resume does not            
block obviously.                

848
00:38:51,996 --> 00:38:52,962
So when the closure,            

849
00:38:52,964 --> 00:38:56,032
when the data is gotten and     
that closure is finally called  

850
00:38:56,034 --> 00:38:58,268
on some other queue             
besides the main queue.         

851
00:38:58,270 --> 00:39:01,504
You wanna do some UI in there   
like you wanna show the image   

852
00:39:01,506 --> 00:39:02,939
that you just fetched or        
whatever.                       

853
00:39:02,941 --> 00:39:06,943
And you can't do it because     
you're not on the main queue.   

854
00:39:07,244 --> 00:39:08,578
So, how do you fix that?        

855
00:39:08,580 --> 00:39:11,981
You just put inside of this     

856
00:39:11,983 --> 00:39:16,186
closure that you put right      
here, another dispatch.         

857
00:39:16,520 --> 00:39:18,788
Back to the main queue.         

858
00:39:19,156 --> 00:39:23,993
DispatchQueue.main.async with   
a closure.                      

859
00:39:23,995 --> 00:39:25,028
And you put your                
UI stuff in there,              

860
00:39:25,030 --> 00:39:29,399
now it's gonna happen back on   
the other, on the main queue.   

861
00:39:30,067 --> 00:39:33,370
So let's go through,            
I wanna show you the timing     

862
00:39:33,372 --> 00:39:36,005
of each of the steps of         
this code right here.           

863
00:39:36,007 --> 00:39:38,842
So you can see what's           
happening, when.                

864
00:39:38,844 --> 00:39:42,178
Because multithreading is       
really a lot about when, and    

865
00:39:42,180 --> 00:39:44,180
it's the when that can          
confuse people when             

866
00:39:44,182 --> 00:39:45,315
they're doing multithreading.   

867
00:39:45,317 --> 00:39:48,985
So obviously, the first line    
of code is that let url,        

868
00:39:48,987 --> 00:39:51,221
get the url, so                 
now I have the url.             

869
00:39:51,223 --> 00:39:52,722
Next, we're gonna               
create this dataTask.           

870
00:39:52,724 --> 00:39:55,091
This line of code, line B       
there, returns immediately.     

871
00:39:55,093 --> 00:39:57,227
Because all it does is          
create the dataTask,            

872
00:39:57,229 --> 00:39:58,461
it doesn't actually             
do anything.                    

873
00:39:58,463 --> 00:40:01,398
You pass the closure to it,     
but it's a non-escaping         

874
00:40:01,400 --> 00:40:05,402
Closure, hold onto it, this     
data task thing holds onto it.  

875
00:40:05,404 --> 00:40:09,172
Then you do task resume,        
that also returns immediately.  

876
00:40:09,174 --> 00:40:11,708
But on a different queue,       
it starts doing the fetch.      

877
00:40:11,710 --> 00:40:15,345
It starts trying to get         
the contents of that URL.       

878
00:40:15,347 --> 00:40:15,745
But on some other queue, so     

879
00:40:15,747 --> 00:40:19,482
that's why on this queue, this  
is the main queue presumably.   

880
00:40:19,484 --> 00:40:20,650
It is returning immediately,    

881
00:40:20,652 --> 00:40:21,951
task.resume returns             
immediately.                    

882
00:40:21,953 --> 00:40:25,555
So that means that line H       
happens immediately right       

883
00:40:25,557 --> 00:40:28,758
after task resume,              
boom the print firing,          

884
00:40:28,760 --> 00:40:30,927
done firing off the request.    

885
00:40:30,929 --> 00:40:32,195
But that's all                  
we've done is fired             

886
00:40:32,197 --> 00:40:34,097
off the request at this point.  

887
00:40:34,899 --> 00:40:38,501
The next line of code that's    
gonna happen after this one     

888
00:40:38,503 --> 00:40:39,569
is this one.                    

889
00:40:39,571 --> 00:40:42,238
So after the URL                
contents come back,             

890
00:40:42,240 --> 00:40:44,274
now this closure                
is gonna execute.               

891
00:40:44,276 --> 00:40:47,076
And so we're gonna have         
line c be executed.             

892
00:40:47,078 --> 00:40:50,780
So a, b, g, and h, they         
executed boom, boom, boom,      

893
00:40:50,782 --> 00:40:53,616
boom, run right after           
each other, no delay.           

894
00:40:53,618 --> 00:40:56,886
Then there was a delay          
while we went and               

895
00:40:56,888 --> 00:40:58,388
got the URL content.            

896
00:40:58,390 --> 00:40:59,756
That could be a long delay.     

897
00:40:59,758 --> 00:41:03,059
That could be minute or         
more if it was a big file over  

898
00:41:03,061 --> 00:41:04,160
cellular or                     
something like that.            

899
00:41:04,162 --> 00:41:07,130
So this line of code, c,        
you have to be careful.         

900
00:41:07,132 --> 00:41:10,500
It could happen much later,     
and by the time it happens,     

901
00:41:10,502 --> 00:41:12,402
you might not even              
care anymore.                   

902
00:41:12,404 --> 00:41:14,537
If you had a really slow        
network and a big file,         

903
00:41:14,539 --> 00:41:17,674
by the time it came back,       
the user, they're like,         

904
00:41:17,676 --> 00:41:19,409
I don't even care about it.     

905
00:41:19,411 --> 00:41:21,311
So you, when you come back      
to line c right there,          

906
00:41:21,313 --> 00:41:25,014
you better check and make sure  
that you still even care.       

907
00:41:26,784 --> 00:41:27,917
Make sense?                     

908
00:41:27,919 --> 00:41:30,954
All right, next thing that      
happens is we wanna do some UI  

909
00:41:30,956 --> 00:41:33,723
stuff with the data             
we got back.                    

910
00:41:33,725 --> 00:41:34,624
But of course to do that,       

911
00:41:34,626 --> 00:41:37,360
we have to dispatch             
to the main queue.              

912
00:41:37,362 --> 00:41:38,928
This line of code, line d,      

913
00:41:38,930 --> 00:41:43,800
also returns immediately        
because it's async dispatch.    

914
00:41:43,802 --> 00:41:47,770
All it's doing is putting that  
closure onto the main queue.    

915
00:41:47,772 --> 00:41:50,206
So this is the next line        
of code that executes.          

916
00:41:50,208 --> 00:41:53,510
Notice line e has               
not executed yet.               

917
00:41:53,512 --> 00:41:56,179
Line f executes and it just     
says I did some stuff with      

918
00:41:56,181 --> 00:41:58,281
the data, but the UI            
part hasn't happened yet.       

919
00:41:58,283 --> 00:42:02,819
I put it on the queue, but      
it hasn't been executed yet     

920
00:42:02,821 --> 00:42:04,854
by the main queue.              

921
00:42:05,022 --> 00:42:10,226
And then finally the UI         
stuff gets pulled off           

922
00:42:10,228 --> 00:42:13,263
the main queue and executed.    

923
00:42:13,265 --> 00:42:16,299
Did everyone understand         
that process?                   

924
00:42:16,301 --> 00:42:20,270
So to summarize, its a,         
b, g, h, c, d, f, e.            

925
00:42:20,272 --> 00:42:22,872
Now this thing about this,      

926
00:42:22,874 --> 00:42:26,743
there's actually not            
necessarily exactly this way.   

927
00:42:26,745 --> 00:42:30,947
Because when you dispatch       
things to the main queue from   

928
00:42:30,949 --> 00:42:34,617
the main queue,                 
they could run right away.      

929
00:42:34,619 --> 00:42:37,820
So it is possible that e        
could happen before f.          

930
00:42:37,822 --> 00:42:40,356
But if this was on some other   
queue besides the main queue,   

931
00:42:40,358 --> 00:42:42,525
it's very unlikely that         
e could happen before f.        

932
00:42:42,527 --> 00:42:44,561
But it even could then          
because the main queue has so   

933
00:42:44,563 --> 00:42:47,196
much priority that when you     
dispatch something onto it,     

934
00:42:47,198 --> 00:42:50,567
the system might immediately    
go and try and process it.      

935
00:42:50,569 --> 00:42:52,235
That's how high priority        
the main queue is.              

936
00:42:52,237 --> 00:42:54,504
So it's possible that e         
could happen before f.          

937
00:42:54,506 --> 00:42:57,473
But I just want you to think    
conceptually that when you put  

938
00:42:57,475 --> 00:43:00,677
something on the queue, you     
kind of put it on the queue,    

939
00:43:00,679 --> 00:43:00,743
There might be other things on  
the main queue ahead of you.    

940
00:43:00,745 --> 00:43:04,347
could happen later.             

941
00:43:04,582 --> 00:43:07,650
So definitely wouldn't          
run right away then.            

942
00:43:08,852 --> 00:43:09,953
So that's the timing            
of multithreaded.               

943
00:43:09,955 --> 00:43:13,389
So let's go back to our         
Cassini code and make it so     

944
00:43:13,391 --> 00:43:17,927
that it uses these queues to    
stop blocking the main thread   

945
00:43:17,929 --> 00:43:21,464
and stop being all              
stuck like that.                

946
00:43:21,632 --> 00:43:26,169
To do this is actually          
remarkably simple.              

947
00:43:26,171 --> 00:43:28,871
We're just gonna go back        
to our imageViewController,     

948
00:43:28,873 --> 00:43:31,207
this is the deadly              
line of code.                   

949
00:43:31,209 --> 00:43:31,975
I even put a comment in for     

950
00:43:31,977 --> 00:43:34,978
this line of code when I        
posted this last time so        

951
00:43:34,980 --> 00:43:37,046
that you realize this is        
a terrible line of code.        

952
00:43:37,048 --> 00:43:39,182
This line of code,              
if this is in, from now on,     

953
00:43:39,184 --> 00:43:42,218
if you turn in homework with    
a line of code like this,       

954
00:43:42,220 --> 00:43:43,286
you're gonna get major dings.   

955
00:43:43,288 --> 00:43:46,956
Because one of the evaluation   
criteria now is gonna be no     

956
00:43:46,958 --> 00:43:48,758
more blocking the main queue.   

957
00:43:48,760 --> 00:43:49,759
You cannot block                
the main queue.                 

958
00:43:49,761 --> 00:43:53,096
That's, that's an evaluation    
criteria of all the homework    

959
00:43:53,098 --> 00:43:55,398
going forward and               
of your final project.          

960
00:43:55,400 --> 00:43:59,569
All right, so we have this      
terrible thing, and we can't    

961
00:43:59,571 --> 00:44:02,672
do this line of code like this  
cuz it blocks the main queue,   

962
00:44:02,674 --> 00:44:03,106
so what are we gonna do?        

963
00:44:03,108 --> 00:44:07,744
We're just simply gonna put     
this call on some other queue.  

964
00:44:07,746 --> 00:44:12,582
And I'm gonna do that by just   
saying DispatchQueue.global,    

965
00:44:12,584 --> 00:44:13,850
I'm gonna get a global,         

966
00:44:13,852 --> 00:44:16,819
one of these global             
concurrent queues.              

967
00:44:16,821 --> 00:44:21,290
And it's asking me for          
the quality of service.         

968
00:44:21,292 --> 00:44:23,760
And the user initiated          
this request, but               

969
00:44:23,762 --> 00:44:28,231
it's not interactive, so        
I'm gonna say userInitiated,    

970
00:44:28,233 --> 00:44:29,432
the choices there.              

971
00:44:29,434 --> 00:44:33,202
Now I've got the queue I want,  
and I'm just gonna              

972
00:44:33,204 --> 00:44:36,773
asynchronously post this        
code that I wanna do,           

973
00:44:36,775 --> 00:44:40,243
this code that blocks,          
onto that global queue.         

974
00:44:40,245 --> 00:44:43,246
And at some point, that global  
queue is going to allocate      

975
00:44:43,248 --> 00:44:47,183
a thread and grab this closure  
off it and start running.       

976
00:44:47,551 --> 00:44:49,986
Now that's gonna happen         
pretty darn quick, but          

977
00:44:49,988 --> 00:44:51,988
not necessarily instantly.      

978
00:44:52,156 --> 00:44:53,489
So now I've solved              
the problem,                    

979
00:44:53,491 --> 00:44:54,857
woo hoo,                        
it's off the main queue.        

980
00:44:54,859 --> 00:44:56,693
No longer blocking the main     
queue because this,             

981
00:44:56,695 --> 00:44:57,727
which is executed               
on the main queue,              

982
00:44:57,729 --> 00:44:59,262
because all of this code        
is on the main queue.           

983
00:44:59,264 --> 00:45:02,465
We're executing all of          
our codes generally on          

984
00:45:02,467 --> 00:45:06,569
the main queue.                 

985
00:45:06,571 --> 00:45:08,237
This returns immediately.       

986
00:45:08,239 --> 00:45:12,842
It's async, so it immediately   
returns, it just puts that      

987
00:45:13,010 --> 00:45:15,244
closure on the queue and        
returns immediately.            

988
00:45:15,246 --> 00:45:17,380
So no blocking the main queue,  
excellent.                      

989
00:45:17,382 --> 00:45:20,083
But you notice I got            
this little error here.         

990
00:45:20,085 --> 00:45:22,318
Let's take a look at it,        
what's that thing?              

991
00:45:22,320 --> 00:45:26,389
Yeah, reference to              
self inside a closure.          

992
00:45:26,391 --> 00:45:28,424
You have to                     
explicitly put self so          

993
00:45:28,426 --> 00:45:31,627
that you think about            
memory cycles.                  

994
00:45:31,862 --> 00:45:36,032
And indeed, there is            
a bad memory cycle here.        

995
00:45:36,034 --> 00:45:39,702
Because this closure, if you    
remember, this is happening     

996
00:45:39,704 --> 00:45:42,505
because I clicked on Saturn or  
Cassini or Earth.               

997
00:45:42,507 --> 00:45:45,742
And it went off, created        
an ImageViewController for me,  

998
00:45:45,744 --> 00:45:49,178
and that ImageView Controller   
is being put on screen and      

999
00:45:49,180 --> 00:45:51,314
it's going off to               
fetch this thing.               

1000
00:45:51,316 --> 00:45:53,950
Now what if the user is like,   
I'm tired of waiting for        

1001
00:45:53,952 --> 00:45:59,122
that Earth image, and they hit  
back, and go click on Saturn.   

1002
00:46:00,457 --> 00:46:00,823
When they hit back,             

1003
00:46:00,825 --> 00:46:05,161
what's supposed to happen to    
that ImageViewController?       

1004
00:46:07,397 --> 00:46:08,364
Anyone?                         

1005
00:46:08,366 --> 00:46:10,600
>> It's supposed to             
leave the heap, okay.           

1006
00:46:10,602 --> 00:46:12,602
Because it was under            
navigation controllers on       

1007
00:46:12,604 --> 00:46:13,402
the top and I hit back.         

1008
00:46:13,404 --> 00:46:16,873
Whoo, toss it out,              
but can it leave?               

1009
00:46:16,875 --> 00:46:19,742
No, because this closure        
is keeping it in                

1010
00:46:19,744 --> 00:46:23,746
the heap even though I          
don't want this any more.       

1011
00:46:23,748 --> 00:46:26,149
I went back because I'm         
now I'm going over to see       

1012
00:46:26,151 --> 00:46:26,949
Saturn instead of Earth, so     

1013
00:46:26,951 --> 00:46:28,951
I don't even want this          
Earth thing any more.           

1014
00:46:28,953 --> 00:46:30,953
So this is a bad kind of        
memory cycle cuz this is gonna  

1015
00:46:30,955 --> 00:46:36,092
keep that ImageViewController   
in memory, so that's bad.       

1016
00:46:36,094 --> 00:46:37,460
So this doesn't                 
want to do this, so             

1017
00:46:37,462 --> 00:46:41,297
we're gonna fix this            
one using weak self.            

1018
00:46:41,431 --> 00:46:44,300
By the way, you know,           
I showed that you can do,       

1019
00:46:44,302 --> 00:46:45,601
weak weak self equals self.     

1020
00:46:45,603 --> 00:46:48,805
But I'm a personally a fan      
of when you're using weak on    

1021
00:46:48,807 --> 00:46:49,672
self to just say weak self.     

1022
00:46:49,674 --> 00:46:53,309
And all that does is inside     
of this closure, it make        

1023
00:46:53,311 --> 00:46:58,214
self be an optional version     
of itself, cuz it's weak now.   

1024
00:46:58,216 --> 00:47:01,317
So that means I have to do      
this because if I do finally    

1025
00:47:01,319 --> 00:47:04,720
come back from this closure     
and the person has hit back,    

1026
00:47:04,722 --> 00:47:08,391
then the ImageViewController    
is gonna have left the heap.    

1027
00:47:08,393 --> 00:47:13,296
And so self with be nil,        
perfect, exactly what I want.   

1028
00:47:13,298 --> 00:47:16,866
And if self is nil and I do     
this little optional chaining,  

1029
00:47:16,868 --> 00:47:19,602
then this whole line of         
code is not gonna happen,       

1030
00:47:19,604 --> 00:47:20,703
exactly what I want.            

1031
00:47:20,705 --> 00:47:22,905
I do not want to create         
an image out of that            

1032
00:47:22,907 --> 00:47:24,273
information that came back.     

1033
00:47:24,275 --> 00:47:26,475
Because that                    
ImageViewController has         

1034
00:47:26,477 --> 00:47:27,476
left the heap.                  

1035
00:47:27,478 --> 00:47:30,813
So here I've broken this        
memory cycle beautifully here.  

1036
00:47:30,815 --> 00:47:32,815
Now, this does                  
beg the question,               

1037
00:47:32,817 --> 00:47:36,319
surprised no one has            
raised their hand.              

1038
00:47:36,453 --> 00:47:37,787
How do I interrupt              
this closure?                   

1039
00:47:37,789 --> 00:47:41,357
When I hit back, and that       
ImageViewController goes away,  

1040
00:47:41,359 --> 00:47:43,426
and I'm not interested          
in Earth any more,              

1041
00:47:43,428 --> 00:47:47,630
I'm still finishing the fetch,  
of Earth.                       

1042
00:47:47,632 --> 00:47:50,766
And the answer is,              
you can't stop a closure        

1043
00:47:50,768 --> 00:47:53,669
that's been put on a queue,     
you cannot stop it.             

1044
00:47:53,671 --> 00:47:56,939
The only way it can stop        
is if it quits itself.          

1045
00:47:56,941 --> 00:48:00,376
So it could be looking at some  
global state to see if it's     

1046
00:48:00,378 --> 00:48:01,010
still relevant.                 

1047
00:48:01,012 --> 00:48:03,412
And if it sees,                 
I'm not relevant anymore,       

1048
00:48:03,414 --> 00:48:04,080
it could return.                

1049
00:48:04,082 --> 00:48:06,782
So if it was doing some         
long running thing.             

1050
00:48:06,784 --> 00:48:07,450
Could do that.                  

1051
00:48:07,452 --> 00:48:10,086
Or you can use something        
like NSUrlSession               

1052
00:48:10,088 --> 00:48:13,189
which is really smart about     
going and getting URLs.         

1053
00:48:13,191 --> 00:48:16,058
And it knows how to             
be interrupted and              

1054
00:48:16,060 --> 00:48:16,359
all the things like that.       

1055
00:48:16,361 --> 00:48:19,562
So you could do something a     
little smarter than just this   

1056
00:48:19,564 --> 00:48:19,962
one line of code.               

1057
00:48:19,964 --> 00:48:24,300
But once this goes on           
the queue, it, it's gonna run.  

1058
00:48:25,435 --> 00:48:30,039
So it's up to it to             
decide not to run.              

1059
00:48:30,240 --> 00:48:32,141
So we fix that problem of it,   
but                             

1060
00:48:32,143 --> 00:48:34,677
there's still more              
problems in here.               

1061
00:48:37,514 --> 00:48:40,216
What happens if this            
takes a minute,                 

1062
00:48:40,218 --> 00:48:44,186
or ten minutes because          
slow network or whatever.       

1063
00:48:44,188 --> 00:48:46,789
And we get back and             
in the meantime,                

1064
00:48:46,791 --> 00:48:50,693
someone called this on          
my ImageViewController.         

1065
00:48:50,695 --> 00:48:52,395
Now, our Cassini                
can't do that, but              

1066
00:48:52,397 --> 00:48:53,095
you could imagine an app that   

1067
00:48:53,097 --> 00:48:55,798
would be showing something      
in the ImageViewController.     

1068
00:48:55,800 --> 00:48:57,166
And then you click              
on something in                 

1069
00:48:57,168 --> 00:49:02,004
the ImageViewController itself  
and it shows a different URL.   

1070
00:49:02,572 --> 00:49:03,506
So someone calls this.          

1071
00:49:03,508 --> 00:49:06,609
If I call this again,           
it's gonna go down here and     

1072
00:49:06,611 --> 00:49:10,379
fetchImage again, which is      
here, and it's gonna dispatch   

1073
00:49:10,381 --> 00:49:14,350
another closure off to          
go get the new image.           

1074
00:49:15,052 --> 00:49:17,720
So now there's two closures     
out there fetching.             

1075
00:49:17,722 --> 00:49:20,389
Now what happen when            
the first one comes back?       

1076
00:49:20,391 --> 00:49:22,458
What do I wanna do              
with that image?                

1077
00:49:23,527 --> 00:49:23,759
Ignore it.                      

1078
00:49:23,761 --> 00:49:25,861
Because the person said         
they want a new one.            

1079
00:49:25,863 --> 00:49:29,432
So I better put something in    
here after this comes back to   

1080
00:49:29,434 --> 00:49:32,768
see if I even care about        
that anymore, which is easy.    

1081
00:49:32,770 --> 00:49:40,076
I could just say for example    
image == self?.imageURL.        

1082
00:49:40,078 --> 00:49:43,879
So I'm sorry url                
== self?.imageURL.              

1083
00:49:43,881 --> 00:49:47,216
So I'm just gonna look at this  
url, which is right here,       

1084
00:49:47,218 --> 00:49:48,985
got captured by this closure.   

1085
00:49:48,987 --> 00:49:51,387
This closure has                
captured this url.              

1086
00:49:51,389 --> 00:49:56,292
I'm just gonna check if         
that url equals whatever        

1087
00:49:56,294 --> 00:49:57,660
our current url is.             

1088
00:49:57,662 --> 00:50:00,463
And if, if I'm not there,       
then it's okay.                 

1089
00:50:00,465 --> 00:50:02,999
It's gonna be nil.              
So if I can equal nil, and      

1090
00:50:03,001 --> 00:50:03,432
there we go.                    

1091
00:50:03,434 --> 00:50:05,501
So here I just put a little     
test in there to make           

1092
00:50:05,503 --> 00:50:08,771
sure that I'm still             
interested in that URL.         

1093
00:50:08,939 --> 00:50:11,107
Can everyone understand         
what's going on here,           

1094
00:50:11,109 --> 00:50:12,341
where url = imageURL,           

1095
00:50:12,343 --> 00:50:17,146
this is a constant, a constant  
that got captured here.         

1096
00:50:17,148 --> 00:50:20,850
So i's always gonna be          
the URL that we went and        

1097
00:50:20,852 --> 00:50:22,952
got the contents of.            

1098
00:50:23,420 --> 00:50:27,023
Ther's yet                      
another problem here.           

1099
00:50:27,025 --> 00:50:29,759
Can anyone tell me another      
problem with this code,         

1100
00:50:29,761 --> 00:50:31,127
obvious problem?                

1101
00:50:33,397 --> 00:50:34,697
I just showed you               
in the slides.                  

1102
00:50:34,699 --> 00:50:36,198
This right here,                

1103
00:50:36,200 --> 00:50:43,139
self?.image is gonna            
call this code down here.       

1104
00:50:43,306 --> 00:50:46,175
That's gonna do all             
kinds of UI stuff.              

1105
00:50:46,510 --> 00:50:48,210
It's gonna set                  
the scrollView's content size,  

1106
00:50:48,212 --> 00:50:50,913
size of the imageView,          
size of the imageView's image.  

1107
00:50:50,915 --> 00:50:52,681
This is all UI stuff.           

1108
00:50:52,683 --> 00:50:54,817
Where does that                 
need to happen?                 

1109
00:50:54,819 --> 00:50:56,185
On the main queue.              

1110
00:50:56,887 --> 00:50:59,221
And is this on the main         
queue right here?               

1111
00:50:59,223 --> 00:51:04,360
No, this is on this queue       
over here, this global queue,   

1112
00:51:04,362 --> 00:51:06,595
userInitiated global queue.     

1113
00:51:06,597 --> 00:51:09,398
That's where this is            
all happening, so               

1114
00:51:09,400 --> 00:51:11,467
that's not the main queue.      

1115
00:51:11,469 --> 00:51:12,068
So that is illegal.             

1116
00:51:12,070 --> 00:51:15,204
That's gonna cause all kinds    
of weird behavior in your app   

1117
00:51:15,206 --> 00:51:15,671
if you do that.                 

1118
00:51:15,673 --> 00:51:18,274
But easily fitched, fixed,      

1119
00:51:18,276 --> 00:51:23,679
we'll just ditch                
DispatchQueue.main.async and    

1120
00:51:23,681 --> 00:51:27,850
put this back on                
the main queue.                 

1121
00:51:29,553 --> 00:51:34,790
Now what's really cool          
about this syntax,              

1122
00:51:34,792 --> 00:51:39,862
I guess you would say,          
of doing these things is        

1123
00:51:39,864 --> 00:51:45,401
it looks very much              
logically like normal code.     

1124
00:51:45,403 --> 00:51:48,571
Right, it's almost just         
like if thens or whatever.      

1125
00:51:48,573 --> 00:51:51,474
However, you do have to         
understand that when you do     

1126
00:51:51,476 --> 00:51:54,677
a dispatch like this, that's    
gonna happen asynchronously.    

1127
00:51:54,679 --> 00:51:57,446
It's gonna happen               
in a different time             

1128
00:51:57,448 --> 00:51:59,849
than the rest of this code.     

1129
00:51:59,851 --> 00:52:00,583
Same thing with this one.       

1130
00:52:00,585 --> 00:52:01,784
This is gonna happen            
a little different time.        

1131
00:52:01,786 --> 00:52:02,118
Now of course, things           

1132
00:52:02,120 --> 00:52:04,453
that you put on the main queue  
tend to run pretty quick.       

1133
00:52:04,455 --> 00:52:09,725
But even so, you just have to   
be cognizant of the fact that   

1134
00:52:09,727 --> 00:52:12,428
even though it looks like this  
line of code is gonna happen,   

1135
00:52:12,430 --> 00:52:14,597
then this line, then this       
line, then this line,           

1136
00:52:14,599 --> 00:52:15,764
then this line,                 
it's not gonna happen.          

1137
00:52:15,766 --> 00:52:17,299
It's gonna happen more          
like the slides, right,         

1138
00:52:17,301 --> 00:52:20,269
where things happen a little    
bit out of order there          

1139
00:52:20,271 --> 00:52:22,271
because things are happening    
asynchronously.                 

1140
00:52:22,273 --> 00:52:24,540
Async means asynchronously,     
out of time,                    

1141
00:52:24,542 --> 00:52:29,545
right, different,               
not lined up in time.           

1142
00:52:29,547 --> 00:52:30,980
Everybody got that?             

1143
00:52:31,882 --> 00:52:34,316
Let's see if that fixes         
all our problems.               

1144
00:52:37,787 --> 00:52:39,922
So remember,                    
here we have no image.          

1145
00:52:39,924 --> 00:52:43,225
By the way, this is a terrible  
problem right here where this   

1146
00:52:43,227 --> 00:52:44,293
comes up blank.                 

1147
00:52:44,295 --> 00:52:46,629
And I actually mentioned        
last week that I was gonna      

1148
00:52:46,631 --> 00:52:48,764
make it extra credit for        
you to figure out how to not    

1149
00:52:48,766 --> 00:52:50,499
make this blank in your         
calculator, have it             

1150
00:52:50,501 --> 00:52:53,002
come up with the calculator     
instead of an empty graph.      

1151
00:52:53,004 --> 00:52:55,604
But I decided instead I'm       
gonna show you how to           

1152
00:52:55,606 --> 00:52:56,305
do it today.                    

1153
00:52:56,307 --> 00:52:56,872
That's why I didn't             

1154
00:52:56,874 --> 00:52:58,774
make it extra credit            
in the assignment.              

1155
00:52:58,776 --> 00:53:00,609
But anyway, so                  
here's the detail.              

1156
00:53:00,611 --> 00:53:02,144
We haven't picked an image so   
it's blank.                     

1157
00:53:02,146 --> 00:53:03,579
Now I'm gonna go back.          

1158
00:53:03,581 --> 00:53:04,213
Here's our Cassini              
viewController.                 

1159
00:53:04,215 --> 00:53:07,783
Now I'm gonna pick Earth,       
and it's loading up, but        

1160
00:53:07,785 --> 00:53:09,485
I changed my mind.              

1161
00:53:09,487 --> 00:53:11,387
Saturn, changed my mind.        

1162
00:53:11,389 --> 00:53:13,689
I can change my                 
mind now because                

1163
00:53:13,691 --> 00:53:15,758
those things are being          
fetched in some other thread.   

1164
00:53:15,760 --> 00:53:19,895
Now if I wait long enough,      
they get it and return it.      

1165
00:53:19,897 --> 00:53:20,529
So here I am.                   

1166
00:53:20,531 --> 00:53:24,266
I have Cassini here.            

1167
00:53:24,268 --> 00:53:27,770
If I go back and hit Earth,     
again, I give up.               

1168
00:53:27,772 --> 00:53:33,242
Saturn, I'll wait, and          
we'll see if we get Saturn.     

1169
00:53:33,244 --> 00:53:35,945
By the way, Saturn, this is     
kind of a weird, I don't think  

1170
00:53:35,947 --> 00:53:38,847
Cassini took this photo here,   
this picture of the people.     

1171
00:53:38,849 --> 00:53:43,986
But wait a minute,              
look at that, there's Saturn.   

1172
00:53:46,489 --> 00:53:49,191
One thing about this app,       
though, that's kind of bad      

1173
00:53:49,193 --> 00:53:52,228
is I click on this and          
I get this white screen.        

1174
00:53:52,230 --> 00:53:54,997
Especially on a big image like  
this one we get this white      

1175
00:53:54,999 --> 00:53:56,966
screen, it's white screen,      
it's white screen.              

1176
00:53:56,968 --> 00:53:58,400
It's like what's                
happening in this app?          

1177
00:53:58,402 --> 00:54:00,970
I don't even understand         
what's going on.                

1178
00:54:01,538 --> 00:54:03,806
It would be really cool if      
I could give the user some      

1179
00:54:03,808 --> 00:54:06,775
feedback about                  
what's happening.               

1180
00:54:06,777 --> 00:54:10,779
Now this feedback might be      
something that says loading     

1181
00:54:10,781 --> 00:54:12,147
dot dot dot dot or something.   

1182
00:54:12,149 --> 00:54:14,383
But a really cool feedback      
when you're waiting for         

1183
00:54:14,385 --> 00:54:16,485
something is a spinning,        
a little spinner.               

1184
00:54:16,487 --> 00:54:17,853
Have you seen those spinners?   

1185
00:54:17,855 --> 00:54:20,422
A lot of apps have this where   
there's a little spinner.       

1186
00:54:20,424 --> 00:54:21,790
So let's add a spinner          
to our app so                   

1187
00:54:21,792 --> 00:54:25,327
that when we click here,        
it's a little thing spinning    

1188
00:54:25,329 --> 00:54:28,564
until an image appears,         
and then it goes away.          

1189
00:54:28,566 --> 00:54:31,500
That turns out to be            
incredible easy to do,          

1190
00:54:31,502 --> 00:54:34,970
because that's a common thing   
to want to do is to give        

1191
00:54:34,972 --> 00:54:35,337
the user feedback.              

1192
00:54:35,339 --> 00:54:38,040
Yes, I heard you and            
I'm working on it, but          

1193
00:54:38,042 --> 00:54:39,475
I don't have it yet.            

1194
00:54:40,043 --> 00:54:40,342
How do we do that?              

1195
00:54:40,344 --> 00:54:42,678
Let's go back to                
our storyboard.                 

1196
00:54:42,680 --> 00:54:46,248
And this is where we're gonna   
wanna do that is on this        

1197
00:54:46,250 --> 00:54:47,583
viewController right here.      

1198
00:54:47,585 --> 00:54:51,086
This is where our scrollView    
is with our little              

1199
00:54:51,088 --> 00:54:51,954
imageView in there.             

1200
00:54:51,956 --> 00:54:55,024
And what we can do is just      
go over over here and           

1201
00:54:55,026 --> 00:54:55,257
get an object.                  

1202
00:54:55,259 --> 00:54:57,393
It's called                     
an Activity Indicator View.     

1203
00:54:57,395 --> 00:55:00,863
Here it is right here, view     
an Activity Indicator View.     

1204
00:55:00,865 --> 00:55:04,800
And I'm just gonna              
drag this into my UI,           

1205
00:55:04,802 --> 00:55:06,168
right in the middle.            

1206
00:55:06,170 --> 00:55:09,471
Now what I just did there       
was a very bad thing.           

1207
00:55:09,473 --> 00:55:13,442
It looked fine,                 
but it's very bad.              

1208
00:55:13,444 --> 00:55:15,511
And it's a little subtle        
as to why it's bad, so          

1209
00:55:15,513 --> 00:55:18,847
let's investigate this one in   
depth why this was bad that     

1210
00:55:18,849 --> 00:55:19,548
I dragged that in there.        

1211
00:55:19,550 --> 00:55:22,518
And the way we gonna see        
that it's bad is by bringing    

1212
00:55:22,520 --> 00:55:25,854
out for the first time          
this document outline.          

1213
00:55:25,856 --> 00:55:28,624
This little thing in the lower  
left which I told you we were   

1214
00:55:28,626 --> 00:55:31,193
gonna talk about and            
here we are talking about it.   

1215
00:55:31,195 --> 00:55:34,630
This is everything that's       
in our storyboard in            

1216
00:55:34,632 --> 00:55:39,034
outline form,                   
in kind of text form.           

1217
00:55:39,036 --> 00:55:40,202
And when we do this,            

1218
00:55:40,204 --> 00:55:43,205
we look down here at this       
Activity Indicator View.        

1219
00:55:43,207 --> 00:55:44,640
By the way,                     
if you select something here,   

1220
00:55:44,642 --> 00:55:46,475
it'll select it here and        
vice versa.                     

1221
00:55:46,477 --> 00:55:48,844
So this is selected, so         
it's showing it here.           

1222
00:55:48,846 --> 00:55:51,880
And you see how these things,   
this is all the views, this is  

1223
00:55:51,882 --> 00:55:56,418
the top level view, that's the  
view var in the controller.     

1224
00:55:56,420 --> 00:56:00,222
Then here is that scrollView    
that we made, and               

1225
00:56:00,224 --> 00:56:01,924
then here is                    
the indicator view.             

1226
00:56:01,926 --> 00:56:03,459
We see how these are indented,  

1227
00:56:03,461 --> 00:56:06,295
that means they                 
are subviews of each other.     

1228
00:56:06,763 --> 00:56:09,298
So we made the gray             
activity indicator              

1229
00:56:09,300 --> 00:56:13,802
a subview of our Scroll View,   
we do not want that here.       

1230
00:56:13,804 --> 00:56:16,238
We want our Scroll View         
scrolling around our image,     

1231
00:56:16,240 --> 00:56:19,074
we don't want it scrolling      
our indicator around.           

1232
00:56:19,076 --> 00:56:21,777
We want the indicator           
to stay in the middle.          

1233
00:56:22,712 --> 00:56:26,982
We don't want it to be          
a subview of Scroll View,       

1234
00:56:26,984 --> 00:56:28,384
we want it to be a sibling.     

1235
00:56:28,386 --> 00:56:30,719
We want them both to            
be at the same level,           

1236
00:56:30,721 --> 00:56:31,787
one in front of the other.      

1237
00:56:31,789 --> 00:56:35,224
And we can do that just by      
picking this up right here,     

1238
00:56:35,226 --> 00:56:37,960
and moving it to the same       
level as Scroll View.           

1239
00:56:37,962 --> 00:56:41,130
Now that's very hard to do in   
here because any time you try   

1240
00:56:41,132 --> 00:56:44,166
to pick this up and move it,    
it's always gonna wanna try     

1241
00:56:44,168 --> 00:56:47,503
and drop into a subview or      
a superview of something, so    

1242
00:56:47,505 --> 00:56:49,371
it's always gonna               
grab on to it.                  

1243
00:56:49,373 --> 00:56:51,573
But in this document            
outline it's very easy.         

1244
00:56:51,575 --> 00:56:55,110
You can just pick it up and     
move it there.                  

1245
00:56:55,112 --> 00:56:59,181
So when you do these activity   
indicator views in your future  

1246
00:56:59,183 --> 00:57:00,849
apps and                        
in your final project,          

1247
00:57:00,851 --> 00:57:03,018
make sure you don't             
accidentally make it a sub      

1248
00:57:03,020 --> 00:57:05,421
view of something that          
you drag it onto.               

1249
00:57:05,423 --> 00:57:06,221
If it what you intend.          

1250
00:57:06,223 --> 00:57:07,956
Notice also the order           
matters here.                   

1251
00:57:07,958 --> 00:57:10,058
This is the sub views           
in their, in order, and         

1252
00:57:10,060 --> 00:57:12,694
remember that sub view sub      
zero is in the back, and        

1253
00:57:12,696 --> 00:57:14,229
all the other ones              
are in the front.               

1254
00:57:14,231 --> 00:57:16,532
So we obviously want this       
activity indicator to           

1255
00:57:16,534 --> 00:57:19,535
be in the front,                
in front of everything.         

1256
00:57:20,270 --> 00:57:21,303
All right, so that was that.    

1257
00:57:21,305 --> 00:57:26,008
Now what we wanna do is we      
want to wire this activity      

1258
00:57:26,010 --> 00:57:29,011
indicator right here            
up to our code.                 

1259
00:57:29,013 --> 00:57:31,013
Why?                            
Because we have to tell it to   

1260
00:57:31,015 --> 00:57:31,380
start running.                  

1261
00:57:31,382 --> 00:57:32,848
Or actually even                
before we do that,              

1262
00:57:32,850 --> 00:57:34,183
let's configure                 
it a little bit.                

1263
00:57:34,185 --> 00:57:36,785
We've got it right here,        
we can inspect it.              

1264
00:57:36,787 --> 00:57:39,655
Here's the inspector of it,     
see Activity Indicator View.    

1265
00:57:39,657 --> 00:57:42,624
It looks kind of small          
to me for this big view.        

1266
00:57:42,626 --> 00:57:44,626
So I'm gonna switch             
to a different kind             

1267
00:57:44,628 --> 00:57:46,562
which is the Large White.       

1268
00:57:46,564 --> 00:57:48,630
But I don't actually            
want it to be white             

1269
00:57:48,632 --> 00:57:49,665
because the background          
is white.                       

1270
00:57:49,667 --> 00:57:53,802
So I'm gonna change its         
color to be, Iet's say blue.    

1271
00:57:53,804 --> 00:57:55,137
So this can be large and blue.  

1272
00:57:55,139 --> 00:57:58,607
Also, every time I stop         
animating it, I want it to      

1273
00:57:58,609 --> 00:58:01,343
hide itself, because I          
don't want it to be stopped     

1274
00:58:01,345 --> 00:58:02,845
spinning, sitting               
there showing.                  

1275
00:58:02,847 --> 00:58:05,481
Any time it stops I             
want it to disappear.           

1276
00:58:05,483 --> 00:58:07,216
Then if I start it again,       
it'll reappear.                 

1277
00:58:07,218 --> 00:58:08,150
So that's what this button is.  

1278
00:58:08,152 --> 00:58:11,620
This here animating would       
mean that it would come up      

1279
00:58:11,622 --> 00:58:11,687
animating, but                  

1280
00:58:11,689 --> 00:58:14,957
I'm gonna turn it on any time   
I go do a background fetch.     

1281
00:58:14,959 --> 00:58:19,394
So I don't want it to come      
up with this view animating     

1282
00:58:19,396 --> 00:58:20,028
already.                        

1283
00:58:20,030 --> 00:58:21,797
That's what those all mean.     

1284
00:58:22,031 --> 00:58:23,932
To turn it on I need            
to talk to it, so               

1285
00:58:23,934 --> 00:58:25,067
I need an outlet to it.         

1286
00:58:25,069 --> 00:58:28,270
So I'm just gonna control drag  
from it, just like any other    

1287
00:58:28,272 --> 00:58:31,306
outlet we would make to         
a button or whatever.           

1288
00:58:31,308 --> 00:58:31,507
Here it is.                     

1289
00:58:31,509 --> 00:58:34,510
I'm gonna call it a spinner,    
that's what I like to call      

1290
00:58:34,512 --> 00:58:37,513
my UI activity indicators,      
spinner.                        

1291
00:58:37,947 --> 00:58:39,815
There's my spinner              
outlet right there.             

1292
00:58:39,817 --> 00:58:43,285
All I need to do here is turn   
this thing on whenever I        

1293
00:58:43,287 --> 00:58:46,989
go off to another               
thread to do something.         

1294
00:58:46,991 --> 00:58:49,791
So here's where I go off        
to another thread to do         

1295
00:58:49,793 --> 00:58:54,663
something, so I'm just gonna    
say spinner.startAnimating.     

1296
00:58:54,665 --> 00:58:55,764
And that's gonna                
start it spinning.              

1297
00:58:55,766 --> 00:58:58,166
It's gonna unhide it,           
if it was hidden, and           

1298
00:58:58,168 --> 00:58:59,635
start it spinning.              

1299
00:59:00,470 --> 00:59:01,470
Question?                       

1300
00:59:03,506 --> 00:59:06,909
>> Animated just make           
thatlittle blue thing go round  

1301
00:59:06,911 --> 00:59:06,942
It just makes it spin           
just like all spinners.         

1302
00:59:06,944 --> 00:59:11,079
and round.                      

1303
00:59:11,381 --> 00:59:14,750
>> Yeah, well,                  
when I inspected it over here.  

1304
00:59:14,752 --> 00:59:17,953
And I did, and I didn't         
click this button Animating,    

1305
00:59:17,955 --> 00:59:20,689
that just means it doesn't      
start out animating.            

1306
00:59:20,691 --> 00:59:25,394
I have to start it in code,     
that's what this means.         

1307
00:59:25,396 --> 00:59:25,627
If I turn this on,              

1308
00:59:25,629 --> 00:59:28,430
then as soon as my app came     
up it would be animating,       

1309
00:59:28,432 --> 00:59:28,730
which I don't want that.        

1310
00:59:28,732 --> 00:59:31,900
I don't want it to start        
animating until I do this       

1311
00:59:31,902 --> 00:59:33,669
dispatch onto                   
some other queue,               

1312
00:59:33,671 --> 00:59:36,371
that's when I want it           
to start animating.             

1313
00:59:36,373 --> 00:59:40,442
Now, you might imagine that     
the place to stop animating it  

1314
00:59:40,444 --> 00:59:41,410
might be right here.            

1315
00:59:41,412 --> 00:59:46,014
spinner.stopAnimating, but and  
this would kinda make sense.    

1316
00:59:46,016 --> 00:59:49,585
Because you know, I went off    
to go get this image and        

1317
00:59:49,587 --> 00:59:51,987
it came back, and               
I set the image.                

1318
00:59:51,989 --> 00:59:53,989
Now I can stop animating.       

1319
00:59:53,991 --> 00:59:56,525
But actually I don't            
wanna do that here.             

1320
00:59:56,527 --> 01:00:00,262
And that is because I           
wanna stop animating            

1321
01:00:00,264 --> 01:00:01,763
anytime the image is set.       

1322
01:00:01,765 --> 01:00:04,866
If an image is set in my        
image view controller,          

1323
01:00:04,868 --> 01:00:06,234
I wanna stop animating.         

1324
01:00:06,236 --> 01:00:07,603
I don't care how it got set.    

1325
01:00:07,605 --> 01:00:10,639
If it got set from my thing     
coming back, that's good.       

1326
01:00:10,641 --> 01:00:11,940
If someone set it by saying,    

1327
01:00:11,942 --> 01:00:16,445
image URL equals like a local   
URL, I wanna stop then too.     

1328
01:00:16,447 --> 01:00:18,480
So I'm gonna put it             
down here an image.             

1329
01:00:18,482 --> 01:00:19,948
Here's where we set our image.  

1330
01:00:19,950 --> 01:00:21,383
This is the set part of it.     

1331
01:00:21,385 --> 01:00:25,220
And I'm just gonna say          
down here, stopAnimating.       

1332
01:00:25,222 --> 01:00:27,990
So, any time my image is set    
I'm gonna stop animating cuz    

1333
01:00:27,992 --> 01:00:30,459
it would make no sense if       
the image was there and         

1334
01:00:30,461 --> 01:00:31,960
the thing was animating.        

1335
01:00:31,962 --> 01:00:32,661
That would never                
make sense for                  

1336
01:00:32,663 --> 01:00:35,564
an image to be showing, and it  
to animate at the same time.    

1337
01:00:35,566 --> 01:00:36,398
Because animating               

1338
01:00:36,400 --> 01:00:39,034
this thing means I'm            
waiting for an image.           

1339
01:00:40,403 --> 01:00:40,602
Got it?                         

1340
01:00:40,604 --> 01:00:43,438
Touch it, that's all you have   
to do to do the spinners,       

1341
01:00:43,440 --> 01:00:44,172
they're super, super simple.    

1342
01:00:44,174 --> 01:00:47,709
They only makes sense when      
you're doing things in other    

1343
01:00:47,711 --> 01:00:48,944
threads with the spinner.       

1344
01:00:48,946 --> 01:00:52,981
Cuz if you're me, if you're     
not doing something in another  

1345
01:00:52,983 --> 01:00:54,883
thread then why would you?      

1346
01:00:54,885 --> 01:00:55,083
See, now look.                  

1347
01:00:55,085 --> 01:00:57,619
This came up, it's blank but    
it's not spinning               

1348
01:00:57,621 --> 01:00:59,421
because I haven't asked for     
anything yet.                   

1349
01:00:59,423 --> 01:01:02,290
So I'll go back here and        
I'll ask for Earth.             

1350
01:01:02,292 --> 01:01:05,427
It says nil while               
doing Optional value.           

1351
01:01:05,429 --> 01:01:06,094
That's not bad.                 

1352
01:01:06,096 --> 01:01:08,363
What happened here?             

1353
01:01:08,365 --> 01:01:10,632
Ahh, yeah, good one.            

1354
01:01:10,634 --> 01:01:11,900
All right, so this crashed.     

1355
01:01:11,902 --> 01:01:12,834
Why did this crash?             

1356
01:01:12,836 --> 01:01:14,870
Why did we have                 
a problem here?                 

1357
01:01:14,872 --> 01:01:20,142
And the answer here             
is that when I set              

1358
01:01:20,144 --> 01:01:25,747
this image I was in prepare.    

1359
01:01:26,883 --> 01:01:31,486
And when I'm in prepare,        
my outlets are not set.         

1360
01:01:31,821 --> 01:01:35,791
So I need to optional           
chain that right there.         

1361
01:01:35,793 --> 01:01:38,493
So this crash,                  
you'll get it yourself a lot,   

1362
01:01:38,495 --> 01:01:41,863
where you prepare               
something and crash.            

1363
01:01:41,865 --> 01:01:45,400
It crashes during prepare       
because you try to set          

1364
01:01:45,402 --> 01:01:45,434
your outlets.                   

1365
01:01:45,436 --> 01:01:48,270
Now, this is fine for           
the spinner not to be set, and  

1366
01:01:48,272 --> 01:01:52,374
I'm setting the image because   
I never would have started it   

1367
01:01:52,376 --> 01:01:53,408
in this condition anyway.       

1368
01:01:53,410 --> 01:01:58,880
So all is well just to ignore   
setting the image when I'm      

1369
01:01:58,882 --> 01:02:00,382
preparing.                      

1370
01:02:00,950 --> 01:02:02,184
Everybody got that one?         

1371
01:02:02,186 --> 01:02:06,388
You all have that, hundreds     
of times in your iOS careers    

1372
01:02:06,390 --> 01:02:09,791
where you have some code        
that you'll prepare,            

1373
01:02:09,793 --> 01:02:11,359
execute that uses an outlet.    

1374
01:02:11,361 --> 01:02:13,662
All right, so let's go          
back now, we hit Earth.         

1375
01:02:13,664 --> 01:02:14,029
See it's spinning.              

1376
01:02:14,031 --> 01:02:18,266
As soon as the image gets put   
in here, it stops spinning,     

1377
01:02:18,268 --> 01:02:19,768
all right, it's gone.           

1378
01:02:19,770 --> 01:02:21,937
Okay, back here, spinning.      

1379
01:02:21,939 --> 01:02:22,938
Yeah, we don't want it.         

1380
01:02:22,940 --> 01:02:27,642
Let's go here, skip it here.    

1381
01:02:31,247 --> 01:02:34,082
Now, the last thing I wanna     
do is this thing where,         

1382
01:02:34,084 --> 01:02:37,586
when the thing starts           
up it starts up blank.          

1383
01:02:39,922 --> 01:02:43,258
All right, it starts blank      
because it's on the detail.     

1384
01:02:43,260 --> 01:02:44,726
And I don't want                
it on the detail                

1385
01:02:44,728 --> 01:02:47,129
when there's no                 
image URL there.                

1386
01:02:47,131 --> 01:02:51,333
I want it to start up here if,  
when I first start.             

1387
01:02:51,335 --> 01:02:52,234
All right, so                   
how do I do that?               

1388
01:02:52,236 --> 01:02:56,905
I'm gonna do that using         
the split view controllers.     

1389
01:02:56,907 --> 01:02:59,641
If we go look at our            
storyboard here.                

1390
01:02:59,643 --> 01:03:02,644
I'm gonna use the delegate      
of this split                   

1391
01:03:02,646 --> 01:03:04,446
view controller right here.     

1392
01:03:04,448 --> 01:03:08,617
Because this split view         
controller asks the delegate,   

1393
01:03:08,619 --> 01:03:13,889
would you like to do the job    
of collapsing the primary       

1394
01:03:13,891 --> 01:03:15,557
view, the secondary             
view controller rather,         

1395
01:03:15,559 --> 01:03:18,493
you know the detail,            
on top of the master?           

1396
01:03:18,495 --> 01:03:21,530
Okay, so it's gonna give me     
the opportunity to do that.     

1397
01:03:21,532 --> 01:03:25,734
And what I'm gonna do is, if    
there's no image URL in there,  

1398
01:03:25,736 --> 01:03:28,970
I'm gonna say I did it but      
I'm not gonna do anything.      

1399
01:03:28,972 --> 01:03:32,207
And that's gonna cause it       
not to collapse the detail      

1400
01:03:32,209 --> 01:03:33,742
on top of the master.           

1401
01:03:33,910 --> 01:03:37,946
Now, I need to have one of my   
view controllers be the split   

1402
01:03:37,948 --> 01:03:39,381
view controller's delegate.     

1403
01:03:39,383 --> 01:03:42,884
And I can't really have         
it be this one right here       

1404
01:03:42,886 --> 01:03:44,619
because this one comes and      
goes.                           

1405
01:03:44,621 --> 01:03:45,787
This is the Image View          
Controller. It gets created     

1406
01:03:45,789 --> 01:03:49,224
when it's segued to and         
when you go away, it stops.     

1407
01:03:49,226 --> 01:03:50,125
You go throw it                 
out of the heap.                

1408
01:03:50,127 --> 01:03:53,862
So I can't have my split view   
controller's delegate thrown    

1409
01:03:53,864 --> 01:03:55,130
out of the heap all the time,   
so                              

1410
01:03:55,132 --> 01:03:58,867
instead I'm going to have this  
view controller be my split     

1411
01:03:58,869 --> 01:04:01,436
view controller's delegate.     

1412
01:04:02,371 --> 01:04:03,171
So here we go.                  

1413
01:04:03,173 --> 01:04:05,273
Here's my                       
CassiniViewController.          

1414
01:04:05,275 --> 01:04:08,810
Now where is a good place to    
set yourself as your own split  

1415
01:04:08,812 --> 01:04:10,912
view controller's delegate?     

1416
01:04:10,914 --> 01:04:12,581
You could probably              
do it in view and               

1417
01:04:12,583 --> 01:04:14,316
load and that would work.       

1418
01:04:14,318 --> 01:04:15,083
But I think a better,           

1419
01:04:15,085 --> 01:04:18,153
safer place to do               
it is awakeFromNib.             

1420
01:04:18,955 --> 01:04:20,388
Cuz awakeFromNib if             
you remember from from          

1421
01:04:20,390 --> 01:04:23,792
the ViewController life         
cycle is called really early    

1422
01:04:23,794 --> 01:04:24,192
in the game.                    

1423
01:04:24,194 --> 01:04:30,365
So if I wanna set my own        
splitViewController's           

1424
01:04:30,367 --> 01:04:34,236
delegate to myself, delegate.   

1425
01:04:35,571 --> 01:04:38,206
This is really early            
time to do it.                  

1426
01:04:38,208 --> 01:04:39,875
Now notice here                 
that I'm taking my              

1427
01:04:39,877 --> 01:04:43,044
own splitViewController         
which might be nil,             

1428
01:04:43,046 --> 01:04:45,046
because I might not be in       
a splitViewController.          

1429
01:04:45,048 --> 01:04:48,283
And I'm setting its             
delegate to myself.             

1430
01:04:48,718 --> 01:04:50,652
Remember, every                 
ViewController has this bar     

1431
01:04:50,654 --> 01:04:53,922
splitViewController which       
is the splitViewController,     

1432
01:04:53,924 --> 01:04:54,789
it's in if it is in one.        

1433
01:04:54,791 --> 01:04:57,492
And so                          
I'm getting an error here,      

1434
01:04:57,494 --> 01:05:00,428
anyone know what                
this error is?                  

1435
01:05:00,430 --> 01:05:02,731
Nobody?                         

1436
01:05:02,733 --> 01:05:06,935
It says that you can not        
assign a CassiniViewController  

1437
01:05:06,937 --> 01:05:10,639
to be a                         
UISplitViewControllerDelegate.  

1438
01:05:10,641 --> 01:05:13,642
You can't make this equal       
this, that's because this is    

1439
01:05:13,644 --> 01:05:17,012
CassiniViewController is        
not a UISplitViewDelegate.      

1440
01:05:17,014 --> 01:05:20,315
UISplitViewControllerDelegate.  

1441
01:05:20,317 --> 01:05:24,853
We have to say that it's a      
UISplitViewControllerDelegate.  

1442
01:05:25,621 --> 01:05:29,224
Okay, once we say that,         
that resolves this error.       

1443
01:05:29,226 --> 01:05:32,193
All the methods in that         
protocol are optional.          

1444
01:05:32,195 --> 01:05:34,329
So, we've satisfied             
the protocol,                   

1445
01:05:34,331 --> 01:05:35,897
which is kinda weird.           

1446
01:05:35,899 --> 01:05:38,233
But now we can implement        
any of the ones we want.        

1447
01:05:38,235 --> 01:05:38,867
Here's a trick for you.         

1448
01:05:38,869 --> 01:05:40,969
If you want,                    
if you're a delegate and        

1449
01:05:40,971 --> 01:05:42,938
you wanna find out              
what methods are,               

1450
01:05:42,940 --> 01:05:45,874
just start typing               
the name of the class.          

1451
01:05:45,876 --> 01:05:46,641
So here's splitView and         

1452
01:05:46,643 --> 01:05:49,144
here's all the                  
splitViewControllerDelegates.   

1453
01:05:49,146 --> 01:05:50,578
You have to have done           
this part first.                

1454
01:05:50,580 --> 01:05:52,414
You have to say you're          
a delegate first.               

1455
01:05:52,416 --> 01:05:54,649
Once you do that, it's gonna    
show all these, right,          

1456
01:05:54,651 --> 01:05:57,118
these are all the things        
splitViewDelegate can do.       

1457
01:05:57,120 --> 01:06:00,422
And we want this one            
right here at the top.          

1458
01:06:00,424 --> 01:06:02,223
CollapseSecondary onto          
primary.                        

1459
01:06:02,225 --> 01:06:03,291
So I'm gonna                    
double-click that.              

1460
01:06:03,293 --> 01:06:09,197
I'll show you these arguments   
a little easier to see if I do  

1461
01:06:09,199 --> 01:06:10,231
this.                           

1462
01:06:11,701 --> 01:06:19,274
That and then this one.         

1463
01:06:19,276 --> 01:06:21,142
So this                         
splitViewControllerDelegate     

1464
01:06:21,144 --> 01:06:23,745
method has three arguments,     
one is the sender,              

1465
01:06:23,747 --> 01:06:26,314
that's the splitViewController  
asking you.                     

1466
01:06:26,316 --> 01:06:28,750
Here, it's asking               
me please collapse              

1467
01:06:28,752 --> 01:06:32,887
this secondaryViewController,   
that's a detail onto            

1468
01:06:32,889 --> 01:06:35,590
this primaryViewController      
that's the master.              

1469
01:06:35,592 --> 01:06:39,394
So this what happens when we    
first start up, a blank detail  

1470
01:06:39,396 --> 01:06:43,331
gets put on top of the master,  
and we don't want that.         

1471
01:06:43,333 --> 01:06:47,569
But we only don't want that     
if that detail is blank.        

1472
01:06:47,571 --> 01:06:52,907
So I'm gonna go here and say    
if the PrimaryViewController    

1473
01:06:52,909 --> 01:06:56,111
is myself, because if the       
PrimaryViewController is not    

1474
01:06:56,113 --> 01:06:58,913
myself, then the things         
are gone weird here,            

1475
01:06:58,915 --> 01:06:59,080
but it should be.               

1476
01:06:59,082 --> 01:07:02,550
So I'm gonna say if the         
PrimaryViewController.conte-    

1477
01:07:02,552 --> 01:07:06,755
nts, because I might be in      
navigation controller equals    

1478
01:07:06,757 --> 01:07:10,425
myself, remember contents       
is this thing down here.        

1479
01:07:10,760 --> 01:07:11,693
So, I'm doing that there.       

1480
01:07:11,695 --> 01:07:15,463
Then I say if I can let         
the ImageViewController equal   

1481
01:07:15,465 --> 01:07:19,634
the secondaryViewController,    
that's the detail.              

1482
01:07:19,636 --> 01:07:21,136
It's this argument right here.  

1483
01:07:21,138 --> 01:07:21,569
It can pass to me,              

1484
01:07:21,571 --> 01:07:26,408
it's the thing that is asking   
me to collapse on top of it.    

1485
01:07:26,410 --> 01:07:30,678
SecondaryViewController as      
an ImageViewController.         

1486
01:07:30,680 --> 01:07:33,481
And again here,                 
I wanna do contents.            

1487
01:07:33,483 --> 01:07:36,518
So that's inside                
the NavigationController.       

1488
01:07:37,286 --> 01:07:37,719
But that's not all.             

1489
01:07:37,721 --> 01:07:40,688
It's not just if I have         
an ImageViewController being    

1490
01:07:40,690 --> 01:07:42,090
asked to collapse               
on top of me.                   

1491
01:07:42,092 --> 01:07:46,795
But I wanna make sure           
that that IVC's imageURL.       

1492
01:07:48,564 --> 01:07:50,298
Equals nil.                     

1493
01:07:50,300 --> 01:07:53,368
So if splitViewController's     
asking me to collapse           

1494
01:07:53,370 --> 01:07:56,504
an ImageViewController          
that has a blank image,         

1495
01:07:56,506 --> 01:08:01,076
I'm going to return true        
to say, yep, I did it.          

1496
01:08:01,078 --> 01:08:02,644
But I'm not actually            
going to do anything.           

1497
01:08:02,646 --> 01:08:04,546
Because I don't want            
that to happen.                 

1498
01:08:04,548 --> 01:08:08,149
So I'm kinda faking out this    
splitViewController there.      

1499
01:08:08,151 --> 01:08:10,452
Otherwise I'm gonna return      
false, which means, no,         

1500
01:08:10,454 --> 01:08:13,121
I couldn't do this collapse,    
so you do it.                   

1501
01:08:13,123 --> 01:08:17,892
Now the splitViewController     
will do it itself.              

1502
01:08:17,894 --> 01:08:22,230
So it's kinda funky, but I      
just wanted to show you this,   

1503
01:08:22,232 --> 01:08:25,867
to show you that there are a    
little more complicated ways    

1504
01:08:25,869 --> 01:08:27,869
to do things then               
I sometimes show.               

1505
01:08:27,871 --> 01:08:28,203
But look what happened.         

1506
01:08:28,205 --> 01:08:34,209
I ran and I did not get         
that blank VieController.       

1507
01:08:34,211 --> 01:08:35,477
Because I told                  
splitViewController             

1508
01:08:35,479 --> 01:08:39,013
that I collapsed it on there,   
but I didn't really so          

1509
01:08:39,015 --> 01:08:39,214
it did nothing.                 

1510
01:08:39,216 --> 01:08:42,550
But if I click on one now the   
image url is not nil and so     

1511
01:08:42,552 --> 01:08:45,019
it did do the collapse for me.  

1512
01:08:47,323 --> 01:08:50,458
All right, so that's it.        

1513
01:08:50,460 --> 01:08:56,498
Let's get back to our slides    
and do our last topic here.     

1514
01:08:58,901 --> 01:09:00,101
Which is our text field.        

1515
01:09:00,103 --> 01:09:01,402
So I'm just gonna throw         
in text field in here,          

1516
01:09:01,404 --> 01:09:05,273
cuz you're, it's going to be    
included in our next demo and   

1517
01:09:05,275 --> 01:09:09,677
in your next assignment, it's   
a pretty easy little class,     

1518
01:09:09,679 --> 01:09:10,578
UITextField.                    

1519
01:09:10,580 --> 01:09:12,313
It's very similar to UILabel.   

1520
01:09:12,315 --> 01:09:14,549
The difference is               
it's editable.                  

1521
01:09:14,683 --> 01:09:17,552
UILabel, if you touch on it,    
nothing happens.                

1522
01:09:17,554 --> 01:09:19,154
But you do UITextField,         
if you touch on it,             

1523
01:09:19,156 --> 01:09:22,657
a little blinking cursor        
happens and the keyboard will   

1524
01:09:22,659 --> 01:09:25,160
come up from the bottom, and    
you can use your thumbs and     

1525
01:09:25,162 --> 01:09:28,963
type, or, if you have an iPad   
with a physical keyboard,       

1526
01:09:28,965 --> 01:09:30,732
you could type or whatever.     

1527
01:09:31,734 --> 01:09:33,101
That's all the UITextField is.  

1528
01:09:33,103 --> 01:09:35,670
Now because it's editable,      
it's got some little            

1529
01:09:35,672 --> 01:09:38,473
intricacies that are quite      
a bit different than UILabel.   

1530
01:09:38,475 --> 01:09:41,009
It still has things             
like attributed text,           

1531
01:09:41,011 --> 01:09:43,211
and you can set the font,       
and all these things,           

1532
01:09:43,213 --> 01:09:46,781
because it's very much like     
a UILabel in that way.          

1533
01:09:46,783 --> 01:09:50,084
But there's this keyboard,      
okay, when you are in           

1534
01:09:50,086 --> 01:09:55,390
UITextField and you touch on    
it, it brings up a keyboard.    

1535
01:09:55,392 --> 01:09:58,293
So how does that keyboard       
show and not show?              

1536
01:09:58,295 --> 01:10:02,297
Well, the keyboard shows        
any time, any view,             

1537
01:10:02,299 --> 01:10:05,667
in the view hierarchy,          
becomes the first responder or  

1538
01:10:05,669 --> 01:10:06,434
what's called                   
the first responder.            

1539
01:10:06,436 --> 01:10:10,238
And the first responder means   
it wants to be the thing that   

1540
01:10:10,240 --> 01:10:11,873
gets key events                 
from the keyboard,              

1541
01:10:11,875 --> 01:10:15,109
it's the first responder for    
key events.                     

1542
01:10:15,111 --> 01:10:18,713
You can make your UITextField   
start it cursor blinking and    

1543
01:10:18,715 --> 01:10:22,217
make the keyboard come up by    
sending it the message become   

1544
01:10:22,219 --> 01:10:23,184
first responder.                

1545
01:10:23,186 --> 01:10:26,054
If you tell your UITextField    
to become the first responder,  

1546
01:10:26,056 --> 01:10:26,921
the keyboard will appear, so    

1547
01:10:26,923 --> 01:10:29,591
that's how you make             
the keyboard up here.           

1548
01:10:29,593 --> 01:10:32,327
And similarly if you want       
the keyboard to go away and     

1549
01:10:32,329 --> 01:10:35,363
the blinking caret to go away,  
say resignFirstResponder        

1550
01:10:35,365 --> 01:10:39,067
to the TextField that is the    
current first responder and     

1551
01:10:39,069 --> 01:10:39,500
it will go away.                

1552
01:10:39,502 --> 01:10:41,469
So that's how you               
control the keyboard.           

1553
01:10:41,471 --> 01:10:44,405
UITextField has a delegate.     

1554
01:10:44,407 --> 01:10:46,674
It has about actually           
ten delegate methods.           

1555
01:10:46,676 --> 01:10:48,509
Can do quite a lot of           
interesting things.             

1556
01:10:48,511 --> 01:10:52,146
For example, when the keyboard  
comes up, most keyboards,       

1557
01:10:52,148 --> 01:10:55,516
have a Return key in            
the lower right hand corner.    

1558
01:10:56,252 --> 01:10:58,219
And when you hit                
that Return key,                

1559
01:10:58,221 --> 01:10:59,520
you get this delegate method.   

1560
01:10:59,522 --> 01:11:02,156
Text field show return,         
it returns a bool.              

1561
01:11:02,158 --> 01:11:02,991
It's basically saying,          

1562
01:11:02,993 --> 01:11:06,194
should I do what I normally     
do when you press Return?       

1563
01:11:06,196 --> 01:11:08,529
Because text fields             
are also controls,              

1564
01:11:08,531 --> 01:11:10,398
they can do target action.      

1565
01:11:10,833 --> 01:11:12,233
So it's kind of                 
asking you here,                

1566
01:11:12,235 --> 01:11:13,568
should I do target              
action today?                   

1567
01:11:13,570 --> 01:11:16,671
You know, some control          
dragged to an IBaction,         

1568
01:11:16,673 --> 01:11:17,472
should I send that?             

1569
01:11:17,474 --> 01:11:19,674
It's what it's asking here      
what should I return.           

1570
01:11:19,676 --> 01:11:22,877
But one thing you can do and    
should return you might return  

1571
01:11:22,879 --> 01:11:26,114
yes, but you might also         
resignFirstResponder.           

1572
01:11:26,116 --> 01:11:27,181
Because when it hits Return,    

1573
01:11:27,183 --> 01:11:28,216
you want the keyboard           
to go away.                     

1574
01:11:28,218 --> 01:11:30,785
Because otherwise               
the keyboard will not go away   

1575
01:11:30,787 --> 01:11:31,786
when it hits Return.            

1576
01:11:31,788 --> 01:11:32,854
Even if you have                
target action,                  

1577
01:11:32,856 --> 01:11:35,223
it's not gonna make             
that keyboard go away.          

1578
01:11:35,225 --> 01:11:38,359
It's very common that you       
wanna implement a text          

1579
01:11:38,361 --> 01:11:38,559
field delegate,                 

1580
01:11:38,561 --> 01:11:42,630
just to make the keyboard go    
away when you hit Return.       

1581
01:11:43,299 --> 01:11:46,034
What other delegate methods     
does a TextField have?          

1582
01:11:46,036 --> 01:11:50,271
You can find out every time     
it resigns first responder.     

1583
01:11:50,273 --> 01:11:52,940
It will send its delegate       
the method didEndEditing.       

1584
01:11:52,942 --> 01:11:56,010
So this is a good way to find   
out, I'd better get the text    

1585
01:11:56,012 --> 01:11:58,413
out of there and                
go do something with it.        

1586
01:11:58,415 --> 01:12:00,248
Because someone hit Return, or  

1587
01:12:00,250 --> 01:12:03,985
did something that caused       
resignFirstResponder to happen  

1588
01:12:03,987 --> 01:12:05,753
so this method                  
gets sent to you.               

1589
01:12:05,755 --> 01:12:08,156
In fact, this is probably       
a more common way to            

1590
01:12:08,158 --> 01:12:09,457
get the text out                
of a text field                 

1591
01:12:09,459 --> 01:12:13,394
then target/action is to        
implement its delegate.         

1592
01:12:13,396 --> 01:12:17,632
And in end editing you get      
the text out of there.          

1593
01:12:17,634 --> 01:12:18,533
Or you could even grab it       

1594
01:12:18,535 --> 01:12:21,536
out of there in should          
return if you want.             

1595
01:12:22,137 --> 01:12:23,171
So text field is a control.     

1596
01:12:23,173 --> 01:12:25,940
You can do target action,       
just Ctrl drag.                 

1597
01:12:25,942 --> 01:12:28,843
It has certain events that can  
cause target action to happen   

1598
01:12:28,845 --> 01:12:29,377
just like a button actually.    

1599
01:12:29,379 --> 01:12:32,880
And you can right click on a    
text field in a storyboard to   

1600
01:12:32,882 --> 01:12:34,315
see what it can do there.       

1601
01:12:34,317 --> 01:12:37,985
The keyboard, you can change    
the kind of keyboard.           

1602
01:12:37,987 --> 01:12:40,922
The keyboard, for example,      
there's a keyboard for          

1603
01:12:40,924 --> 01:12:44,625
entering URLs, and it's got     
a button on there, .com.        

1604
01:12:44,627 --> 01:12:46,994
I think it even has a button,   
HTTP so                         

1605
01:12:46,996 --> 01:12:49,330
that you can quickly            
enter a URL.                    

1606
01:12:49,332 --> 01:12:51,632
There's another URL which       
is like a phone dialer,         

1607
01:12:51,634 --> 01:12:54,702
which is the keypad, or         
another, a keypad rather.       

1608
01:12:54,704 --> 01:12:55,837
It's like a phone dialer, so    

1609
01:12:55,839 --> 01:12:58,172
it just has the numbers or      
whatever.                       

1610
01:12:58,174 --> 01:12:59,173
So you can specify that.        

1611
01:12:59,175 --> 01:13:00,875
And the way you specify         
those things is you             

1612
01:13:00,877 --> 01:13:04,178
don't send any messages         
to any keyboard object.         

1613
01:13:04,180 --> 01:13:07,014
You send it to any object that  
is using the keyboard that      

1614
01:13:07,016 --> 01:13:09,650
implements the protocol         
UITextInputTraits.              

1615
01:13:09,652 --> 01:13:13,121
UITextInputTraits is            
a protocol that has             

1616
01:13:13,123 --> 01:13:15,857
all these things                
shown here in it and            

1617
01:13:15,859 --> 01:13:19,627
when you send it to             
something like a text field     

1618
01:13:19,629 --> 01:13:24,265
it configures its               
keyboard to match that.         

1619
01:13:24,867 --> 01:13:26,768
If you want auto correction     
in your text field,             

1620
01:13:26,770 --> 01:13:29,604
where you're typing and         
you're mistyping, and           

1621
01:13:29,606 --> 01:13:31,739
it's autocorrecting as you go,  
you can get that.               

1622
01:13:31,741 --> 01:13:36,210
Just set your auto correction   
type there to .yes in your      

1623
01:13:36,212 --> 01:13:36,310
text field.                     

1624
01:13:36,312 --> 01:13:38,880
So you're sending these,        
these vars are on text field.   

1625
01:13:38,882 --> 01:13:43,384
But they're on text field       
because text field implements   

1626
01:13:43,386 --> 01:13:46,854
the UITextInputTraits           
protocol.                       

1627
01:13:46,856 --> 01:13:48,456
And you can do secure text for  

1628
01:13:48,458 --> 01:13:50,958
passwords and                   
all that kind of stuff.         

1629
01:13:50,960 --> 01:13:52,560
In other words, if you're       
looking to control your         

1630
01:13:52,562 --> 01:13:54,796
keyboard, don't look            
in text field per se,           

1631
01:13:54,798 --> 01:13:56,964
go look at this                 
UITextInputTrait protocol, and  

1632
01:13:56,966 --> 01:14:00,501
you'll see what you can do for  
your keyboard.                  

1633
01:14:00,503 --> 01:14:02,937
You can also set an accessory   
view in your keyboard,          

1634
01:14:02,939 --> 01:14:07,575
a little view along the top of  
your keyboard that is just for  

1635
01:14:07,577 --> 01:14:08,476
your app.                       

1636
01:14:08,478 --> 01:14:09,210
That's kind of fun.             

1637
01:14:09,212 --> 01:14:09,944
You just, again,                

1638
01:14:09,946 --> 01:14:13,347
just TextInputTraits            
protocol thing.                 

1639
01:14:14,082 --> 01:14:14,582
One thing about the keyboard,   

1640
01:14:14,584 --> 01:14:18,119
I'm actually not gonna talk     
about this because of time.     

1641
01:14:18,121 --> 01:14:20,388
We'll talk about this           
in a later lecture.             

1642
01:14:20,390 --> 01:14:23,724
But the keyboard when it comes  
up it actually covers up        

1643
01:14:23,726 --> 01:14:24,225
your views.                     

1644
01:14:24,227 --> 01:14:27,728
So you better make sure that    
text field is not underneath    

1645
01:14:27,730 --> 01:14:28,396
the keyboard.                   

1646
01:14:28,398 --> 01:14:29,931
Otherwise keyboard              
will come up and                

1647
01:14:29,933 --> 01:14:31,466
people will not be able         
to type in your text.           

1648
01:14:31,468 --> 01:14:34,202
And I see a lot of final        
projects that do this,          

1649
01:14:34,204 --> 01:14:35,636
where you have                  
your nice UI and                

1650
01:14:35,638 --> 01:14:38,072
you've got a lot of             
text fields on there.           

1651
01:14:38,074 --> 01:14:40,808
And you've got some text        
fields towards the bottom of    

1652
01:14:40,810 --> 01:14:43,544
the screen and when I try to    
run your app and do it and      

1653
01:14:43,546 --> 01:14:45,713
I click it, I am running        
it on a real device,            

1654
01:14:45,715 --> 01:14:48,783
there's no keyboard I can't     
type in the simulator.          

1655
01:14:48,785 --> 01:14:51,419
One thing about when you're     
doing text field, be careful    

1656
01:14:51,421 --> 01:14:54,088
because in the simulator you    
can just type on the keyboard.  

1657
01:14:54,090 --> 01:14:57,425
But in the real world           
the keyboard's gonna slide out  

1658
01:14:57,427 --> 01:14:58,259
from the bottom.                

1659
01:14:58,261 --> 01:15:01,128
So students often will do       
their final projects do         

1660
01:15:01,130 --> 01:15:02,096
the whole thing                 
in the simulator.               

1661
01:15:02,098 --> 01:15:04,565
They only barely do it on       
the device even though that's   

1662
01:15:04,567 --> 01:15:06,400
absolutely required for         
your final project by the way.  

1663
01:15:06,402 --> 01:15:10,304
And they turn it in and bam     
they get dinged pretty hard     

1664
01:15:10,306 --> 01:15:12,340
because I can't use their app.  

1665
01:15:12,342 --> 01:15:15,209
Because this keyboard comes up  
and covers up the text fields   

1666
01:15:15,211 --> 01:15:18,312
that they're wanting            
me to enter text into.          

1667
01:15:18,314 --> 01:15:20,248
The way you find out            
about the keyboard and          

1668
01:15:20,250 --> 01:15:23,718
where it came over is           
using these observers.          

1669
01:15:23,720 --> 01:15:26,153
And you're basically gonna      
observe the window, and         

1670
01:15:26,155 --> 01:15:29,490
the window is gonna send you    
this little notification that   

1671
01:15:29,492 --> 01:15:32,460
says, hey, keyboard just came   
up, and in the notification     

1672
01:15:32,462 --> 01:15:33,761
that's sent to you,             
there's gonna be information    

1673
01:15:33,763 --> 01:15:37,031
about the rectangle that the    
keyboard used to cover you,     

1674
01:15:37,033 --> 01:15:40,268
and you have to move            
your UI out of the way.         

1675
01:15:40,270 --> 01:15:43,671
Hopefully you're in a           
scrollable thing like a table   

1676
01:15:43,673 --> 01:15:45,206
view or just a scroll view.     

1677
01:15:45,208 --> 01:15:48,609
But if not then you just gotta  
move, set the frame of your     

1678
01:15:48,611 --> 01:15:51,679
super view or something         
to move that thing up.          

1679
01:15:51,681 --> 01:15:53,447
Because it's your               
responsibility to make sure     

1680
01:15:53,449 --> 01:15:56,017
that the keyboard is not        
covering something that's       

1681
01:15:56,019 --> 01:15:56,651
necessarily to user UI.         

1682
01:15:56,653 --> 01:16:00,788
So when you're doing            
your final projects             

1683
01:16:00,790 --> 01:16:02,690
do it on a device.              

1684
01:16:02,692 --> 01:16:05,126
Otherwise you are very likely   
to run into this problem.       

1685
01:16:05,128 --> 01:16:06,561
So we'll talk about             
these observers,                

1686
01:16:06,563 --> 01:16:09,530
these notification sender and   
stuff in a future lecture.      

1687
01:16:09,532 --> 01:16:12,333
There's other text              
field properties not            

1688
01:16:12,335 --> 01:16:15,636
related to the keyboard, like   
it does the auto shrinking and  

1689
01:16:15,638 --> 01:16:17,438
all that stuff that we          
saw with UI labels so           

1690
01:16:17,440 --> 01:16:19,607
you can control that            
stuff with text field.          

1691
01:16:19,609 --> 01:16:23,945
I'll let you look at the doc    
to figure all that stuff out.   

1692
01:16:24,246 --> 01:16:27,882
Text fields also have a little  
right and left accessory view.  

1693
01:16:27,884 --> 01:16:30,618
These little overviews for      
like a search button.           

1694
01:16:30,620 --> 01:16:34,956
Or little, you can put little   
exclamation points in there,    

1695
01:16:34,958 --> 01:16:35,923
things like that.               

1696
01:16:35,925 --> 01:16:37,458
So you can look for             
that as well.                   

1697
01:16:37,460 --> 01:16:39,794
That's it.                      

1698
01:16:39,796 --> 01:16:41,996
On Wednesday I'm                
gonna do TableView.             

1699
01:16:41,998 --> 01:16:43,965
Big old lecture with            
a big old demo.                 

1700
01:16:43,967 --> 01:16:45,399
And that's what your            
homework's gonna be about.      

1701
01:16:45,401 --> 01:16:48,402
Friday, we have a section       
it's going to be on             

1702
01:16:48,404 --> 01:16:51,472
CollectionView which I'd love   
to teach in main lecture        

1703
01:16:51,474 --> 01:16:52,873
because it's really             
an important class.             

1704
01:16:52,875 --> 01:16:56,277
It's very much like             
TableView but more flexible,    

1705
01:16:56,279 --> 01:16:58,279
a little more powerful          
than TableView.                 

1706
01:16:58,281 --> 01:16:59,947
You kind of need to             
know TableView first,           

1707
01:16:59,949 --> 01:17:01,649
that's why we do TableView      
on Wednesday and                

1708
01:17:01,651 --> 01:17:03,184
then the CollectionView         
on Friday.                      

1709
01:17:03,186 --> 01:17:05,753
Then next week I'll be doing    
the object oriented database,   

1710
01:17:05,755 --> 01:17:08,656
called Core Data, and you'll    
be integrating that into your   

1711
01:17:08,658 --> 01:17:11,359
assignment 4 to make            
your assignment 5.              

1712
01:17:11,361 --> 01:17:13,594
That's it, see you then.        

1713
01:17:14,196 --> 01:17:14,228
>> For more please visit        
us at stanford.edu.             

