1
00:00:00,001 --> 00:00:03,902
翻译：默默熊                     

2
00:00:03,904 --> 00:00:06,538
Stanford University.            
斯坦福大学

3
00:00:06,540 --> 00:00:10,042
>> All right, well,             
welcome to Stanford CS193P,     
欢迎

4
00:00:10,044 --> 00:00:14,313
Developing Applications for     
iOS, winter of 2017.            

5
00:00:14,315 --> 00:00:17,049
This is Lecture number 9.       
这堂课是第九讲

6
00:00:17,051 --> 00:00:19,585
And today we have only one      
topic which is Table View.
今天我们只有一个主题，就是 Table View      

7
00:00:19,587 --> 00:00:22,654
And I'm gonna go through a      
bunch of slides to talk about
我们先过几页幻灯片   

8
00:00:22,656 --> 00:00:23,022
the concepts of it.             

9
00:00:23,024 --> 00:00:26,025
And then we're gonna            
have a humongous demo           
然后我们会有一个很长的演示

10
00:00:26,027 --> 00:00:28,660
that we're gonna build          
a Twitter client and
我们会使用Table View            

11
00:00:28,662 --> 00:00:30,129
it's gonna use Table View and   
来创建一个 Twitter 的客户端

12
00:00:30,131 --> 00:00:33,532
some other things that we've    
learned, like Text Field.  
我们还会学些别的，像 Text Field     

13
00:00:34,067 --> 00:00:35,734
And Table View, what is it?  
什么是 Table View?   

14
00:00:35,736 --> 00:00:39,638
You've seen a Table View        
in all sorts of iOS apps.
我们在许多iOS应用中都见过Table View       

15
00:00:39,640 --> 00:00:42,674
It's just this UI where         
there's a list of things.
就像这样，是一个事物的列表       

16
00:00:42,676 --> 00:00:46,045
There's really two different    
kinds of looks to Table View.
Table View 有两种样式   

17
00:00:46,047 --> 00:00:47,846
There's the kind                
on the left there,              
左边这种

18
00:00:47,848 --> 00:00:49,748
which we call plain style.      
我们称之为简单样式

19
00:00:49,750 --> 00:00:52,584
Plain style is just             
a list of things.
就是一个项目的列表               

20
00:00:52,586 --> 00:00:55,854
And it might be collected into  
groups like little sections.    
它还可能包含一些分组

21
00:00:55,856 --> 00:00:58,290
But it's mostly just            
a big long list.
但大部分时候就是一个长长的列表                

22
00:00:58,292 --> 00:01:01,860
On the right side,              
is called a grouped style.
右边我们称之为分组样式      

23
00:01:01,862 --> 00:01:04,096
Where the sections              
in the table,
表里的这些区段                   

24
00:01:04,098 --> 00:01:08,000
you're more obviously           
disconnected from each other.   
很显然，相互是分开的


25
00:01:08,002 --> 00:01:10,369
They have you know,             
big gaps in between.
相互之间有很大的缝隙            

26
00:01:10,371 --> 00:01:16,842
Normally the plain style        
we use for dynamic data.
通常，简单样式用于动态数据        

27
00:01:16,844 --> 00:01:19,378
Data that might have any        
number of items in there.       
就是其中可能包含任意的条目数

28
00:01:19,380 --> 00:01:21,413
The group style we tend         
to use for static data,
对于静态数据我们倾向于使用分组样式
         

29
00:01:21,415 --> 00:01:24,183
where we know exactly what      
rows are gonna be in there,
这种情况下，我们清楚地知道会包含多少行     

30
00:01:24,185 --> 00:01:27,019
and exactly what's              
gonna be in them.
以及每一行的具体内容               

31
00:01:27,021 --> 00:01:30,222
So let's talk about the names   
of all the parts of             
好，让我们谈谈Table View各个部分的名称

32
00:01:30,224 --> 00:01:32,691
a Table View, so that as        
I'm explaining all this,        
这样我讲解的时候

33
00:01:32,693 --> 00:01:35,461
you'll know what                
the terminology is.
你知道我在讲什么             

34
00:01:35,795 --> 00:01:37,763
First we have a table header.   
首先，我们有一个表头


35
00:01:37,765 --> 00:01:38,730
That's a UIView.
那是一个 UIView                

36
00:01:38,732 --> 00:01:40,099
There's only one of them. 
表头只有一个     

37
00:01:40,101 --> 00:01:42,201
It sits at the very             
top of the table. 
它位于Table的最顶端              

38
00:01:42,203 --> 00:01:43,735
This is where,                  
as you'll see in the demo,      

39
00:01:43,737 --> 00:01:47,906
you might put a search field    
or something that searches      

40
00:01:47,908 --> 00:01:50,142
to find what's in your table    
or something like that.         

41
00:01:50,144 --> 00:01:52,911
And similarly,                  
there's a footer view.
类似的，这儿还有一个 footer view          

42
00:01:52,913 --> 00:01:53,479
Rarely see this used.    
这个很少见到       

43
00:01:53,481 --> 00:01:56,548
But it's just a UIView          
that sits at the bottom
但这就是一个在底部的UIView         

44
00:01:56,550 --> 00:01:56,582
And in between, there are       
these things called sections. 
中间这些被称为表的区段
  
45
00:01:56,584 --> 00:01:59,685
of the table.                   

46
00:01:59,687 --> 00:02:03,055
So a section is just            
a combination of a header and   

47
00:02:03,057 --> 00:02:04,756
a footer,                       
which are usually strings, but  

48
00:02:04,758 --> 00:02:08,760
also could be UIViews, and      
then any number of rows.        

49
00:02:08,762 --> 00:02:09,928
That's what we call a section.  

50
00:02:09,930 --> 00:02:11,163
So that's a section             
right there.                    

51
00:02:11,165 --> 00:02:14,500
This is the section header for  
the two sections that I have    

52
00:02:14,502 --> 00:02:17,703
showing in this table, right,   
where it says Header 0.         

53
00:02:17,705 --> 00:02:20,005
And these are sections          
footers for                     

54
00:02:20,007 --> 00:02:21,206
the two sections that I have.   

55
00:02:21,208 --> 00:02:24,076
These two sections happen to    
both have the same numbers of   

56
00:02:24,078 --> 00:02:26,879
rows in each which is two but   
a section, one section have     

57
00:02:26,881 --> 00:02:31,583
a 100 rows, and one could have  
just 1, it's perfectly fine.    

58
00:02:31,751 --> 00:02:35,687
This right in here,             
we call a table cell.           

59
00:02:35,689 --> 00:02:38,390
C-E-L-L, cell, and              
it's the UIView,                

60
00:02:38,392 --> 00:02:39,658
actually UITableViewCell,       

61
00:02:39,660 --> 00:02:42,261
it's the name of the subclass   
that's in there.                

62
00:02:42,263 --> 00:02:46,231
And this is the thing that's    
gonna draw the data that's at   

63
00:02:46,233 --> 00:02:46,932
a particular row.               

64
00:02:46,934 --> 00:02:48,233
And we're gonna see             
how that works.                 

65
00:02:48,235 --> 00:02:51,303
By the way, along the bottom    
you're seeing source code that  

66
00:02:51,305 --> 00:02:52,738
kind of corresponds             
with these things.              

67
00:02:52,740 --> 00:02:56,608
Don't worry I'm gonna get back  
to showing you all that stuff   

68
00:02:56,610 --> 00:02:56,842
in later slides.                

69
00:02:56,844 --> 00:03:00,712
So this is the naming we use    
to name all the parts of        

70
00:03:00,714 --> 00:03:02,347
a table view.                   

71
00:03:02,349 --> 00:03:03,248
And this is in plain style.     

72
00:03:03,250 --> 00:03:05,551
All the same names              
work in group style.            

73
00:03:05,553 --> 00:03:07,619
Everything just kinda           
looks a little different.       

74
00:03:07,621 --> 00:03:09,488
All right,                      
still have a header, footer,    

75
00:03:09,490 --> 00:03:11,323
sections, all the same.         

76
00:03:11,325 --> 00:03:14,059
Just a little                   
different UI look.              

77
00:03:14,961 --> 00:03:17,996
Now, tables can have            
sections or not.                

78
00:03:17,998 --> 00:03:19,631
You don't have to               
have any sections, so           

79
00:03:19,633 --> 00:03:23,902
the table on the left is just   
a whole list of cities and      

80
00:03:23,904 --> 00:03:26,104
the countries they're in and    
just a big long list.           

81
00:03:26,106 --> 00:03:28,140
On the right is kind of         
the same kind of list but       

82
00:03:28,142 --> 00:03:31,476
you can see that they're        
grouped into sections there by  

83
00:03:31,478 --> 00:03:32,144
country, right.                 

84
00:03:32,146 --> 00:03:34,580
So Japan there, Mexico, etc.    

85
00:03:34,582 --> 00:03:36,281
So sections are optional,       

86
00:03:36,283 --> 00:03:39,084
not optional in the case        
of an option, but               

87
00:03:39,086 --> 00:03:44,856
sections you can have them or   
not, it's totally up to you.    

88
00:03:44,958 --> 00:03:49,895
The type of the cell,           
like each row, there are four   

89
00:03:49,897 --> 00:03:53,198
kinda pre-defined types and     
then there's a custom type.     

90
00:03:53,200 --> 00:03:57,502
The four pre-defined types are  
subtitle where you just got     

91
00:03:57,504 --> 00:03:57,803
like a title and                

92
00:03:57,805 --> 00:04:00,839
a little smaller text           
subtitle under it.              

93
00:04:00,841 --> 00:04:02,741
There's default which           
is the same except              

94
00:04:02,743 --> 00:04:04,443
there's no little               
subtitle thing.                 

95
00:04:04,445 --> 00:04:07,112
There's value 1 and value 2,    
which is just like subtitle,    

96
00:04:07,114 --> 00:04:09,815
it's just that the little       
thing underneath is in          

97
00:04:09,817 --> 00:04:11,984
a different spot,               
it's either blue and            

98
00:04:11,986 --> 00:04:16,321
to the left or it's kind of     
grayed off into the right but   

99
00:04:16,323 --> 00:04:20,392
i's just how its laying out     
the basic information there.    

100
00:04:20,394 --> 00:04:23,428
Now a custom cell can           
have arbitrary UI               

101
00:04:23,430 --> 00:04:25,130
in it as you will see.          

102
00:04:25,765 --> 00:04:29,434
So how do we use a table view?  

103
00:04:29,436 --> 00:04:30,936
Okay, a table                   
view is a UIView,               

104
00:04:30,938 --> 00:04:34,239
i's actually subclass           
UIScrollView because i's        

105
00:04:34,241 --> 00:04:37,009
scrolling through               
all those rows.                 

106
00:04:37,011 --> 00:04:37,075
Well 99% of the time, we use    
the special ViewController      

107
00:04:37,077 --> 00:04:41,847
So how do we do it?             

108
00:04:41,849 --> 00:04:44,683
called UITableViewController    
in UIKit.                       

109
00:04:44,685 --> 00:04:49,755
And UITableViewController is    
just a convenient package to    

110
00:04:49,757 --> 00:04:55,127
use UITableView in and its      
self.view is a UITableView.     

111
00:04:55,129 --> 00:04:57,996
Okay, so you would only use     
a UITableViewController         

112
00:04:57,998 --> 00:05:01,566
when your entire self.view      
is going to be filled           

113
00:05:01,568 --> 00:05:02,768
with a table view.              

114
00:05:02,770 --> 00:05:06,238
And you can add one into your   
storyboard just by dragging it  

115
00:05:06,240 --> 00:05:07,072
out as we always do.            

116
00:05:07,074 --> 00:05:09,174
There's a thing called          
Table View Controller and       

117
00:05:09,176 --> 00:05:09,641
it's just gonna drag it out.    

118
00:05:09,643 --> 00:05:12,311
Now it's a controller,          
so when you drag it out,        

119
00:05:12,313 --> 00:05:13,912
it looks like an MVC.           

120
00:05:13,914 --> 00:05:15,347
But inside of that MVC,         

121
00:05:15,349 --> 00:05:17,382
there is a table view           
sitting there, okay?            

122
00:05:17,384 --> 00:05:20,319
And so what you see             
here the controller,            

123
00:05:20,321 --> 00:05:21,486
is a UITableViewController,     

124
00:05:21,488 --> 00:05:25,424
and the self.view of            
it is a UITableView.            

125
00:05:25,426 --> 00:05:27,793
Okay, subclass                  
of UIScrollView.                

126
00:05:28,428 --> 00:05:30,595
Now like any other              
ViewController,                 

127
00:05:30,597 --> 00:05:32,731
if you're going to do           
anything with this thing,       

128
00:05:32,733 --> 00:05:34,266
you need to subclass it,        
right?                          

129
00:05:34,268 --> 00:05:36,735
Just like you create a          
calculator view controller or   

130
00:05:36,737 --> 00:05:36,968
graph view controller,          

131
00:05:36,970 --> 00:05:40,706
you need to subclass, your      
UITableViewController as well.  

132
00:05:40,708 --> 00:05:42,507
And you do it the same way,     
right?                          

133
00:05:42,509 --> 00:05:43,909
New files are created.          

134
00:05:43,911 --> 00:05:47,045
It's gonna be                   
a Cocoa Touch Class of course.  

135
00:05:47,047 --> 00:05:49,948
It's gonna be a subclass        
of UITableViewController.       

136
00:05:49,950 --> 00:05:50,515
Make sure you pick that.        

137
00:05:50,517 --> 00:05:52,451
Don't say it's a subclass       
of UIViewController.            

138
00:05:52,453 --> 00:05:56,488
It has to be a subclass         
UITableViewController if you    

139
00:05:56,490 --> 00:05:57,989
want it to work.                

140
00:05:57,991 --> 00:06:01,426
And then you just set it        
in the identity inspector       

141
00:06:01,428 --> 00:06:01,560
Just exactly like any other     
controllers, just that it has   

142
00:06:01,562 --> 00:06:04,396
to be your class.               

143
00:06:04,398 --> 00:06:07,199
to be subclass                  
UITableViewController.          

144
00:06:07,201 --> 00:06:09,801
This UITableViewController      
subclass                        

145
00:06:09,803 --> 00:06:13,472
is also going to serve as       
the data source and delegates.  

146
00:06:13,474 --> 00:06:16,007
Okay, the data source is just   
a special kind of delegate for  

147
00:06:16,009 --> 00:06:18,110
getting the data in the table.  

148
00:06:18,112 --> 00:06:20,078
For the table view              
that's inside of it.            

149
00:06:20,080 --> 00:06:22,581
So, we're gonna talk            
a lot more about that           

150
00:06:22,583 --> 00:06:23,248
down the road here.             

151
00:06:23,250 --> 00:06:26,118
By the way, if you right click  
on the view controller and      

152
00:06:26,120 --> 00:06:28,854
you get that black window to    
come up, you can actually see   

153
00:06:28,856 --> 00:06:30,789
it, if you look down            
towards the bottom there,       

154
00:06:30,791 --> 00:06:32,124
you see data source and         
delegate.                       

155
00:06:32,126 --> 00:06:34,559
Their properties and            
they're pre wired up for you.   

156
00:06:34,561 --> 00:06:37,295
If you use this                 
UITableViewController thing,    

157
00:06:37,297 --> 00:06:38,497
just pre-wires it up.           

158
00:06:38,499 --> 00:06:40,699
That the controller             
is the delegate and             

159
00:06:40,701 --> 00:06:43,435
data source of the table view.  

160
00:06:43,437 --> 00:06:45,370
If you don't use                
UITableViewController,          

161
00:06:45,372 --> 00:06:47,339
by the way,                     
this kinda pre-packaged one?    

162
00:06:47,341 --> 00:06:49,374
Then you'll have to wire        
up the data source and          

163
00:06:49,376 --> 00:06:52,811
delegate, you know,             
either in code by saying        

164
00:06:53,012 --> 00:06:56,014
tableView.delegate = self or    
something like that.            

165
00:06:56,016 --> 00:06:58,183
You'll have to do it yourself   
but 99% of the time you're      

166
00:06:58,185 --> 00:06:59,618
just gonna use this             
UITableViewController.          

167
00:06:59,620 --> 00:07:02,087
Cuz usually the best UI for     
a table view, is for            

168
00:07:02,089 --> 00:07:03,989
it to take over                 
the whole screen.               

169
00:07:03,991 --> 00:07:06,091
For it to fill the whole        
screen, it's rare that you can  

170
00:07:06,093 --> 00:07:08,560
have a table view in            
part of your screen.            

171
00:07:10,229 --> 00:07:13,999
So you can edit the attributes  
of the table view itself,       

172
00:07:14,001 --> 00:07:15,834
of course,                      
by just clicking on it and      

173
00:07:15,836 --> 00:07:17,469
bringing up                     
the attributes inspector.       

174
00:07:17,471 --> 00:07:20,005
One thing that's a little       
frustrating about a table view  

175
00:07:20,007 --> 00:07:23,108
is you've got the table view    
cells, which are UIViews.       

176
00:07:23,110 --> 00:07:26,411
And then you've got the table   
view kind of that they're       

177
00:07:26,413 --> 00:07:26,912
contained in.                   

178
00:07:26,914 --> 00:07:27,946
That's a UIView also.           

179
00:07:27,948 --> 00:07:30,015
And then you've got the table   
view controller behind it.      

180
00:07:30,017 --> 00:07:32,517
And you wanna set attributes    
on all of these things.         

181
00:07:32,519 --> 00:07:37,856
So don't forget you can do      
Ctrl+Shift+Left-click, and      

182
00:07:37,858 --> 00:07:38,323
it'll put up a little menu.     

183
00:07:38,325 --> 00:07:40,258
Says, okay, what thing under    
the mouse do you want?          

184
00:07:40,260 --> 00:07:43,595
Do you want the cell, the       
table view, or the controller?  

185
00:07:43,597 --> 00:07:47,866
And so that'll help you dig     
down to the thing you want.     

186
00:07:47,868 --> 00:07:49,334
All right, but                  
once you have it selected,      

187
00:07:49,336 --> 00:07:50,969
whichever one you want,         
like the TableView or           

188
00:07:50,971 --> 00:07:54,272
the Controller or the Cell,     
you can inspect it of course.   

189
00:07:54,274 --> 00:07:59,010
Now, one important thing is     
this grouped versus plain that  

190
00:07:59,012 --> 00:07:59,978
I showed you at                 
the very beginning.             

191
00:07:59,980 --> 00:08:03,181
So here I'm gonna switch        
this one which is plain         

192
00:08:03,183 --> 00:08:04,115
over to grouped.                

193
00:08:04,117 --> 00:08:06,852
So I'm just picking grouped     
in the style there,             

194
00:08:06,854 --> 00:08:07,452
in the inspector.               

195
00:08:07,454 --> 00:08:10,188
Another important attribute     
is dynamic versus static.       

196
00:08:10,190 --> 00:08:14,025
So dynamic is all the contents  
are coming from some database.  

197
00:08:14,027 --> 00:08:17,796
And static is, I'm gonna put    
all the content right here in   

198
00:08:17,798 --> 00:08:18,697
the story board, okay?          

199
00:08:18,699 --> 00:08:20,198
So here we'll switch            
this one over to static.        

200
00:08:20,200 --> 00:08:24,536
So this is now a static,        
grouped table view.             

201
00:08:24,538 --> 00:08:27,038
And I told you that             
usually static table views      

202
00:08:27,040 --> 00:08:30,675
are grouped, and usually only   
grouped ones are static.        

203
00:08:30,677 --> 00:08:31,877
So usually these                
kinda go together.              

204
00:08:31,879 --> 00:08:35,213
They don't have to, they're     
separate properties, but        

205
00:08:35,215 --> 00:08:36,581
they generally go together.     

206
00:08:36,583 --> 00:08:40,151
Now the UI for these rows,      
most of the time you're         

207
00:08:40,153 --> 00:08:42,687
just going to build             
by dragging UI in.              

208
00:08:42,689 --> 00:08:46,558
So here I'm just dragging the   
label in here, and you know,    

209
00:08:46,560 --> 00:08:50,295
maybe I'll change the name of   
the label, dragging the UI      

210
00:08:50,297 --> 00:08:53,932
switch in there, cuz I want     
to set up some settings.        

211
00:08:53,934 --> 00:08:58,069
Often times, by the way, this   
thing is used for settings and  

212
00:08:58,071 --> 00:08:58,670
things like that.               

213
00:08:58,672 --> 00:09:01,907
And then if I want to talk      
to these switches and           

214
00:09:01,909 --> 00:09:05,443
labels that I brought in        
there, I'm actually gonna       

215
00:09:05,445 --> 00:09:08,580
create outlets to my            
UITableViewController.          

216
00:09:08,582 --> 00:09:11,716
And since what's in             
this table is fixed for         

217
00:09:11,718 --> 00:09:13,685
all time in the storyboard.     

218
00:09:13,687 --> 00:09:15,387
I'm building it                 
in a storyboard,                

219
00:09:15,389 --> 00:09:15,921
that's perfectly fine.          

220
00:09:15,923 --> 00:09:19,057
So I would just Ctrl + drag     
from them to my controller,     

221
00:09:19,059 --> 00:09:22,027
which will work, and then       
I can create an outlet for      

222
00:09:22,029 --> 00:09:25,063
example, my feature             
enabled switch outlet and       

223
00:09:25,065 --> 00:09:26,898
it'll create an outlet here.    

224
00:09:26,900 --> 00:09:28,033
And then in my code and         
my controller,                  

225
00:09:28,035 --> 00:09:30,702
I can obviously do whatever     
I want to that switch.          

226
00:09:30,704 --> 00:09:34,339
So, it's almost like when you   
have a static table view, it's  

227
00:09:34,341 --> 00:09:37,842
almost just like a normal view  
that you would build UI in.     

228
00:09:37,844 --> 00:09:39,744
It's just that it's             
divided into these rows.        

229
00:09:39,746 --> 00:09:41,947
Which is nice for something     
like settings, right?           

230
00:09:41,949 --> 00:09:45,116
If you think about              
the settings app, right,        

231
00:09:45,118 --> 00:09:45,650
on your phone.                  

232
00:09:45,652 --> 00:09:49,988
It's got a lot of UI that's     
kind of in rows right, and      

233
00:09:49,990 --> 00:09:50,155
in tables.                      

234
00:09:50,157 --> 00:09:52,791
So, if you really wanna see     
how static table view works,    

235
00:09:52,793 --> 00:09:55,860
get your phone out, go to       
the general settings app and    

236
00:09:55,862 --> 00:09:56,428
just look around in there.      

237
00:09:56,430 --> 00:10:00,031
That is table view after table  
view after table view where     

238
00:10:00,033 --> 00:10:04,469
the rows are static built in    
some storyboard somewhere by    

239
00:10:04,471 --> 00:10:04,569
Apple.                          

240
00:10:04,571 --> 00:10:10,175
All right, so that's pretty     
much it for static table.       

241
00:10:10,177 --> 00:10:11,876
These are pretty                
straightforward to do.          

242
00:10:11,878 --> 00:10:13,511
So I'm gonna clear              
this UI out of here,            

243
00:10:13,513 --> 00:10:16,448
this featured enabled out of    
there, then we're gonna talk    

244
00:10:16,450 --> 00:10:20,018
about a different kind of       
table view, which is dynamic.   

245
00:10:20,020 --> 00:10:23,288
So a dynamic table view, you    
set it here by picking dynamic  

246
00:10:23,290 --> 00:10:26,891
property, prototypes, rather,   
there instead of static cells,  

247
00:10:26,893 --> 00:10:29,427
really is a totally different   
kind of animal, and             

248
00:10:29,429 --> 00:10:33,198
I'm gonna switch back to plain  
style because usually dynamic   

249
00:10:33,200 --> 00:10:34,633
tables are plain style.         

250
00:10:34,635 --> 00:10:38,436
These rows now instead of       
being something you're          

251
00:10:38,438 --> 00:10:39,337
gonna build the UI and          

252
00:10:39,339 --> 00:10:42,107
they're static,                 
instead they're prototypes.     

253
00:10:42,109 --> 00:10:44,909
They're things that are gonna   
be copied for every row.        

254
00:10:44,911 --> 00:10:48,013
So whatever UI you would        
build in one of these rows.     

255
00:10:48,015 --> 00:10:49,581
And you can build               
customize UI,                   

256
00:10:49,583 --> 00:10:51,149
like we saw with                
the static one.                 

257
00:10:51,151 --> 00:10:53,918
It's gonna be copied for        
every single row.               

258
00:10:53,920 --> 00:10:54,619
So these are prototypes.        

259
00:10:54,621 --> 00:10:55,587
You see what I                  
mean by prototype?              

260
00:10:55,589 --> 00:10:58,123
It's like a template that's     
gonna be copied over and        

261
00:10:58,125 --> 00:11:01,593
over and                        
over to make your table.        

262
00:11:01,595 --> 00:11:04,529
So that's a really              
different kind of               

263
00:11:04,531 --> 00:11:05,063
way of looking at things.       

264
00:11:05,065 --> 00:11:07,165
Because this data that's        
gonna go into these rows is     

265
00:11:07,167 --> 00:11:10,135
coming from some database       
somewhere probably and          

266
00:11:10,137 --> 00:11:11,436
filling out all                 
this information.               

267
00:11:11,438 --> 00:11:13,304
So it's a little more           
complicated to build            

268
00:11:13,306 --> 00:11:15,640
a table like this,              
but not a lot more.             

269
00:11:15,642 --> 00:11:19,344
So you can click on any         
one of the cells and            

270
00:11:19,346 --> 00:11:20,912
you can inspect it, right?      

271
00:11:20,914 --> 00:11:21,780
The prototypes that you want.   

272
00:11:21,782 --> 00:11:25,750
For example you could change    
its type from being custom      

273
00:11:25,752 --> 00:11:26,484
to being subtitle.              

274
00:11:26,486 --> 00:11:28,820
All right, so here's what       
a subtitle cell looks like.     

275
00:11:28,822 --> 00:11:31,122
Remember I showed you in        
the very second slide,          

276
00:11:31,124 --> 00:11:33,758
it's one of                     
the pre-canned types.           

277
00:11:33,760 --> 00:11:34,626
And it just has, you know,      

278
00:11:34,628 --> 00:11:37,896
a text field, like a little     
smaller text field.             

279
00:11:37,898 --> 00:11:39,798
So that's a subtitle.           

280
00:11:39,800 --> 00:11:42,534
You can also set with           
accessory there,                

281
00:11:42,536 --> 00:11:44,335
a little thing that can         
appear on the right.            

282
00:11:44,337 --> 00:11:47,639
It could be a little check      
mark that you turn on and off.  

283
00:11:47,641 --> 00:11:48,606
It could be                     
a disclosure indicator,         

284
00:11:48,608 --> 00:11:52,177
which you want to put there if  
clicking on this row is going   

285
00:11:52,179 --> 00:11:52,644
to segue.                       

286
00:11:52,646 --> 00:11:55,447
Okay, that little disclosure    
indicator is just a little,     

287
00:11:55,449 --> 00:11:57,649
kind of gray arrow thing        
that lets the user know,        

288
00:11:57,651 --> 00:11:59,651
hey if I click on this row,     
it's going to segue.            

289
00:11:59,653 --> 00:12:04,456
There's also kind of a special  
one called detail disclosure.   

290
00:12:04,458 --> 00:12:06,157
And the detail disclosure       
looks like this,                

291
00:12:06,159 --> 00:12:07,158
it's a little "i" in a circle.  

292
00:12:07,160 --> 00:12:09,461
And what's really cool about    
that is you can segue by        

293
00:12:09,463 --> 00:12:13,198
clicking on the row, but if     
you click on the little blue    

294
00:12:13,200 --> 00:12:14,899
I, it does a different segue.   

295
00:12:14,901 --> 00:12:16,935
Okay, so you kind of have       
your row doing two different    

296
00:12:16,937 --> 00:12:19,871
segues, depending on whether    
they touch on the little i or   

297
00:12:19,873 --> 00:12:20,572
touch somewhere else.           

298
00:12:20,574 --> 00:12:23,508
You see the little gray         
arrow next to the i?            

299
00:12:23,510 --> 00:12:25,243
That's the disclosure           
indicator.                      

300
00:12:25,245 --> 00:12:27,912
So if I click on this row,      
it's going to segue.            

301
00:12:27,914 --> 00:12:29,080
If I click on the little i,     

302
00:12:29,082 --> 00:12:31,149
it's gonna do some              
different segue.                

303
00:12:31,151 --> 00:12:34,285
Maybe bring up some modal       
panel with some information or  

304
00:12:34,287 --> 00:12:35,286
something like that.            

305
00:12:35,288 --> 00:12:38,356
We'll talk about how            
that works in a second.         

306
00:12:38,358 --> 00:12:40,391
All right, so I'm gonna         
go back to non-details,         

307
00:12:40,393 --> 00:12:42,293
go ahead and                    
get rid of that thing.          

308
00:12:42,295 --> 00:12:44,863
But another style besides       
the four pre-canned             

309
00:12:44,865 --> 00:12:47,766
ones I talked about in          
the beginning of this lecture   

310
00:12:47,768 --> 00:12:48,833
that you can pick is custom.    

311
00:12:48,835 --> 00:12:52,604
So custom means that,           
that's just a UIView,           

312
00:12:52,606 --> 00:12:54,739
that you can build              
any UI you want.                

313
00:12:54,741 --> 00:12:57,142
Again similar to                
that feature-enabled            

314
00:12:57,144 --> 00:12:58,810
with the switch that I showed.  

315
00:12:58,812 --> 00:13:01,279
But again, this UI is going     
to get copied over and          

316
00:13:01,281 --> 00:13:04,449
over and over for               

317
00:13:04,451 --> 00:13:06,751
Notice, by the way,             
there are multiple prototypes.  

318
00:13:06,753 --> 00:13:09,420
That means you can have         
different setups of UI          

319
00:13:09,422 --> 00:13:12,056
that you could use for          
different rows, okay?           

320
00:13:12,058 --> 00:13:14,259
And we're gonna name each       
of these prototypes so          

321
00:13:14,261 --> 00:13:17,796
that in our code, we can pick   
which prototype we want for     

322
00:13:17,798 --> 00:13:18,329
a certain row.                  

323
00:13:18,331 --> 00:13:20,632
It will copy that prototype.    

324
00:13:20,800 --> 00:13:25,170
Now, these custom cells,        
you can resize them.            

325
00:13:25,172 --> 00:13:29,474
You can drag stuff into them,   
build UI you want.              

326
00:13:29,476 --> 00:13:31,843
Here, I've built this           
complicated UI with text        

327
00:13:31,845 --> 00:13:32,377
fields and an image.            

328
00:13:32,379 --> 00:13:35,013
This is very similar to a UI    
that I'm gonna build in         

329
00:13:35,015 --> 00:13:35,313
All right, now when you build   
this UI you're gonna want       

330
00:13:35,315 --> 00:13:40,118
the demo.                       

331
00:13:40,120 --> 00:13:41,252
to use proper layout.           

332
00:13:41,254 --> 00:13:44,522
So stack views and hooking it   
to the edges just like you did  

333
00:13:44,524 --> 00:13:47,325
with the calculator or          
even stuff on the inside.       

334
00:13:47,327 --> 00:13:49,194
I'll show you a little          
bit of that today,              

335
00:13:49,196 --> 00:13:49,994
a little more auto layout.      

336
00:13:49,996 --> 00:13:53,264
Because if you do that, then    
the table view will be able to  

337
00:13:53,266 --> 00:13:57,302
figure out the size this thing  
needs to be dynamically.        

338
00:13:57,304 --> 00:13:59,037
Okay, if you don't do           
the right auto layout then you  

339
00:13:59,039 --> 00:14:01,172
kind of just have to fix        
the height of the rows, and     

340
00:14:01,174 --> 00:14:04,042
I'm going to talk about         
that in a minute as well.       

341
00:14:04,044 --> 00:14:06,611
So generally you want to        
do auto layout properly         

342
00:14:06,613 --> 00:14:07,478
in there if you can.            

343
00:14:07,480 --> 00:14:10,481
Now ther's no way I             
could wire up these             

344
00:14:10,483 --> 00:14:12,717
elements directly               
to my controller.               

345
00:14:12,719 --> 00:14:13,284
Do you see why?                 

346
00:14:13,286 --> 00:14:17,689
Because ther's only one         
outlet in my controller for     

347
00:14:17,691 --> 00:14:18,957
one of these labels.            

348
00:14:18,959 --> 00:14:20,792
But there                       
are hundreds of rows.           

349
00:14:20,794 --> 00:14:21,793
So how is my one outlet gonna?  

350
00:14:21,795 --> 00:14:24,963
It can't be hooked up           
to 100 at once, okay.           

351
00:14:24,965 --> 00:14:28,066
But I still need outlets        
because how am I gonna          

352
00:14:28,068 --> 00:14:29,334
set these things?               

353
00:14:29,336 --> 00:14:29,701
All right, and so               

354
00:14:29,703 --> 00:14:32,537
the way we're gonna deal with   
that is we're gonna wire these  

355
00:14:32,539 --> 00:14:36,774
things up to outlets in         
the UITableViewCell.            

356
00:14:36,776 --> 00:14:39,711
The UIView that contains them.  

357
00:14:39,713 --> 00:14:41,579
So I told you that              
this cell is a UIView,          

358
00:14:41,581 --> 00:14:45,450
a UITableViewCell, and it       
contains all of these things,   

359
00:14:45,452 --> 00:14:46,618
these labels and stuff.         

360
00:14:46,620 --> 00:14:47,752
So, we're gonna have            
outlets in that.                

361
00:14:47,754 --> 00:14:49,387
Now this is the first           
time you've ever seen           

362
00:14:49,389 --> 00:14:52,223
outlet in anything but          
a controller and pretty much    

363
00:14:52,225 --> 00:14:54,492
this is the only other time     
you're gonna have outlets.      

364
00:14:54,494 --> 00:14:56,594
You can't have outlets          
in a regular view, but          

365
00:14:56,596 --> 00:15:00,498
you can have outlets in these   
special table view cells.       

366
00:15:00,500 --> 00:15:03,568
All right, so let's see a       
little bit of how that works.   

367
00:15:03,570 --> 00:15:06,137
So, one thing,                  
if you're gonna have outlets,   

368
00:15:06,139 --> 00:15:08,940
you know you're gonna need      
to have subclass, right?        

369
00:15:08,942 --> 00:15:11,242
Just like you have              
a controller, you can't use     

370
00:15:11,244 --> 00:15:14,545
a generic UIViewController,     
can't put any outlets in that;  

371
00:15:14,547 --> 00:15:18,049
you have to subclass it so you  
can wire out, same thing here.  

372
00:15:18,051 --> 00:15:20,919
You're gonna have to            
make a custom subclass,         

373
00:15:20,921 --> 00:15:22,053
a UITableViewCell.              

374
00:15:22,055 --> 00:15:23,121
You do that with New File.      

375
00:15:23,123 --> 00:15:26,024
It is still a Cocoa Touch       
Class, but here you're going    

376
00:15:26,026 --> 00:15:28,826
to choose UITableViewCell       
as the super class,             

377
00:15:28,828 --> 00:15:30,561
not UITableViewController.      

378
00:15:30,563 --> 00:15:31,663
UITableViewCell.                

379
00:15:31,665 --> 00:15:35,266
And again UITableViewCell is    
a subclass of UIView also,      

380
00:15:35,268 --> 00:15:35,400
All right, so you're going      
to pick a UITableViewCell,      

381
00:15:35,402 --> 00:15:37,669
by the way.                     

382
00:15:37,671 --> 00:15:40,371
call it something like          
MyTableViewCell or whatever.    

383
00:15:40,373 --> 00:15:43,141
And then you're gonna do the    
exact same thing where you're   

384
00:15:43,143 --> 00:15:44,375
gonna have that cell selected.  

385
00:15:44,377 --> 00:15:46,411
And you're gonna go to          
the identity inspector.         

386
00:15:46,413 --> 00:15:48,680
And you're gonna change         
it from being a generic         

387
00:15:48,682 --> 00:15:50,848
UITableViewCell to              
being MyTableViewCell.          

388
00:15:50,850 --> 00:15:53,418
And this is gonna allow         
you to create outlets           

389
00:15:53,420 --> 00:15:57,322
In MyTableViewCell to these     
things that are contained       

390
00:15:57,324 --> 00:15:59,190
inside MyTableViewCell.         

391
00:15:59,192 --> 00:16:01,292
Okay, so                        
now we can wire them up.        

392
00:16:01,294 --> 00:16:03,695
So remember that                
static elements,                

393
00:16:03,697 --> 00:16:05,763
those things I showed           
you at the beginning,           

394
00:16:05,765 --> 00:16:07,432
those are wired up              
to the controller.              

395
00:16:07,434 --> 00:16:10,401
Dynamic elements, where         
we have these prototypes,       

396
00:16:10,403 --> 00:16:14,238
those are wired up to           
the TableViewCell outlets.      

397
00:16:14,240 --> 00:16:16,808
So what does it look            
like to wire them up?           

398
00:16:16,810 --> 00:16:19,177
I'm gonna have to do the same   
thing with the controller       

399
00:16:19,179 --> 00:16:22,780
where I'm gonna get the UI and  
the code on screen              

400
00:16:22,782 --> 00:16:24,115
at the same time with           
the assistant editor.           

401
00:16:24,117 --> 00:16:28,319
By the way, when you do that,   
if you're in automatic mode,    

402
00:16:28,321 --> 00:16:29,721
there, see where                
it says automatic?              

403
00:16:29,723 --> 00:16:30,488
It's pointing at automatic.     

404
00:16:30,490 --> 00:16:34,025
It's not going to bring up the  
UITableViewCell, even if you    

405
00:16:34,027 --> 00:16:36,227
have the TableViewCell          
selected in the UI.             

406
00:16:36,229 --> 00:16:38,529
It's still gonna bring          
up the controller, okay?        

407
00:16:38,531 --> 00:16:41,966
So if you want to wire up       
outlets to a TableViewCell,     

408
00:16:41,968 --> 00:16:43,167
you have to manually or         

409
00:16:43,169 --> 00:16:45,536
forcibly get that               
TableViewCell- not              

410
00:16:45,538 --> 00:16:48,639
the TableViewController-        
TableViewCell, on this side.    

411
00:16:48,641 --> 00:16:51,943
So one way you can do it is     
by switching from Automatic     

412
00:16:51,945 --> 00:16:55,346
to Manual and then navigating   
over to finding your            

413
00:16:55,348 --> 00:16:58,049
TableViewCell.swift class,      
right?                          

414
00:16:58,051 --> 00:16:59,317
And then choosing that.         

415
00:16:59,319 --> 00:17:00,018
And now you're in manual mode,  

416
00:17:00,020 --> 00:17:01,686
you've got the TableViewCell    
on the right, and               

417
00:17:01,688 --> 00:17:03,187
you've got your                 
storyboard on the left.         

418
00:17:03,189 --> 00:17:04,756
So, now you can Ctrl+drag,      
right?                          

419
00:17:04,758 --> 00:17:06,324
You just need to be             
able to Ctrl+drag               

420
00:17:06,326 --> 00:17:07,191
between them is the problem.    

421
00:17:07,193 --> 00:17:09,027
So you gotta have               
them both on screen.            

422
00:17:09,029 --> 00:17:10,928
All right, so then,             
once I have them on screen,     

423
00:17:10,930 --> 00:17:13,798
I Ctrl+drag,                    
just absolutely normally.       

424
00:17:13,800 --> 00:17:16,267
And it's gonna do all the       
things that an outlet does,     

425
00:17:16,269 --> 00:17:17,869
it's gonna ask me,              
an outlet or action.            

426
00:17:17,871 --> 00:17:19,804
By the way, you can do          
outlet or action here.          

427
00:17:19,806 --> 00:17:20,304
And it's gonna ask.             

428
00:17:20,306 --> 00:17:23,541
So here, I've picked that       
photo, the blue thing.          

429
00:17:23,543 --> 00:17:25,143
Let's say it's a photo.         

430
00:17:25,145 --> 00:17:27,412
And I'm calling this            
my photoImageView.              

431
00:17:27,414 --> 00:17:29,514
And it creates an outlet here.  

432
00:17:29,516 --> 00:17:30,648
Okay, so that's great.          

433
00:17:30,650 --> 00:17:34,085
Now this TableViewCell code     
can talk to that photo.         

434
00:17:34,087 --> 00:17:37,688
The ImageView could for         
example set the image or        

435
00:17:37,690 --> 00:17:37,955
whatever.                       

436
00:17:37,957 --> 00:17:41,526
But of course it needs to       
know what information to put    

437
00:17:41,528 --> 00:17:43,795
in that photo for               
that row, right?                

438
00:17:43,797 --> 00:17:46,731
This thing is gonna be          
repeated 100 times, and         

439
00:17:46,733 --> 00:17:49,967
each one needs to know          
what its row's photo is.        

440
00:17:49,969 --> 00:17:53,271
So you're also gonna need       
some public API on your         

441
00:17:53,273 --> 00:17:57,909
TableViewCell which gives it    
the data it needs to fill up    

442
00:17:57,911 --> 00:17:58,576
all its outlets.                

443
00:17:58,578 --> 00:18:01,012
Okay, so you're gonna           
have some var, which I've       

444
00:18:01,014 --> 00:18:04,949
called infoShownByThisCell,     
could be of any type you want.  

445
00:18:04,951 --> 00:18:08,252
And somebody is gonna set it,   
you'll see soon who sets it.    

446
00:18:08,254 --> 00:18:10,855
And once it sets it,            
now we can update the UI and    

447
00:18:10,857 --> 00:18:13,925
put all this information        
into the outlets.               

448
00:18:13,927 --> 00:18:16,894
Okay, so this is how            
the information at each row in  

449
00:18:16,896 --> 00:18:20,431
the table is going to be        
put into these UI elements.     

450
00:18:20,433 --> 00:18:23,067
You all following me so far?    

451
00:18:23,669 --> 00:18:27,405
All right, let's talk           
about these two protocols,      

452
00:18:27,407 --> 00:18:30,141
the dataSource and              
the delegate, okay.             

453
00:18:30,143 --> 00:18:32,110
They're critical to             
making UITableView work.        

454
00:18:32,112 --> 00:18:35,113
UITableView is a class that     
literally cannot function       

455
00:18:35,115 --> 00:18:36,714
without its dataSource and      
delegate.                       

456
00:18:36,716 --> 00:18:39,383
It's not really like split      
view controller where, eh, you  

457
00:18:39,385 --> 00:18:42,954
don't have to do anything with  
a delegate if you don't want,   

458
00:18:42,956 --> 00:18:43,621
it'll still work.               

459
00:18:43,623 --> 00:18:45,389
This, you really                
have to do it.                  

460
00:18:45,391 --> 00:18:46,190
Especially the dataSource.      

461
00:18:46,192 --> 00:18:47,925
If you don't give it            
a dataSource, the only          

462
00:18:47,927 --> 00:18:50,261
way a table view would work     
without its delegate and        

463
00:18:50,263 --> 00:18:52,530
dataSource is if it were        
purely static table.            

464
00:18:52,532 --> 00:18:55,433
Like the table that had         
the feature enabled with        

465
00:18:55,435 --> 00:18:55,466
the switch.                     

466
00:18:55,468 --> 00:18:57,401
That you could deal             
without the dataSource.         

467
00:18:57,403 --> 00:19:00,104
But otherwise, if it's          
providing dynamic data,         

468
00:19:00,106 --> 00:19:00,972
obviously it needs the data.    

469
00:19:00,974 --> 00:19:02,974
And the only way                
it can get data is              

470
00:19:02,976 --> 00:19:03,975
through its dataSource.         

471
00:19:03,977 --> 00:19:06,544
So, as I already told you,      
UITableViewController           

472
00:19:06,546 --> 00:19:09,647
automatically sets itself as    
its delegate and dataSource.    

473
00:19:09,649 --> 00:19:12,083
So you can just put your code   
for these delegate methods      

474
00:19:12,085 --> 00:19:14,752
right in your subclass of       
UITableViewController, right.   

475
00:19:14,754 --> 00:19:20,691
MyTableViewController, or       
whatever, and put it in there.  

476
00:19:20,693 --> 00:19:24,362
Also, there's a cool var in     
TableViewController called      

477
00:19:24,364 --> 00:19:29,133
tableView, which is basically   
gonna return self.view, but     

478
00:19:29,135 --> 00:19:29,867
as a UITableView.               

479
00:19:29,869 --> 00:19:33,304
And that way you can talk to    
the UITableView that your       

480
00:19:33,306 --> 00:19:35,673
UITableViewController is        
controlling.                    

481
00:19:35,675 --> 00:19:38,376
So when do we need to           
implement the dataSource?       

482
00:19:38,378 --> 00:19:40,745
Anytime we have dynamic data,   
non-static.                     

483
00:19:40,747 --> 00:19:43,781
There are three really          
important methods in this       

484
00:19:43,783 --> 00:19:43,814
One is, how many sections       
are in my table?                

485
00:19:43,816 --> 00:19:47,051
protocol.                       

486
00:19:47,053 --> 00:19:49,187
Could be one section if         
the whole thing is just         

487
00:19:49,189 --> 00:19:49,654
a bunch of rows.                

488
00:19:49,656 --> 00:19:50,621
How many sections, and          

489
00:19:50,623 --> 00:19:52,857
then how many rows              
are in each section?            

490
00:19:52,859 --> 00:19:54,659
You're gonna be                 
asked one by one.               

491
00:19:54,661 --> 00:19:55,059
How many rows in this section?  

492
00:19:55,061 --> 00:19:56,928
How many rows in this section?  
How many are in this section?   

493
00:19:56,930 --> 00:19:59,197
So it knows how many rows       
are in every section.           

494
00:19:59,199 --> 00:20:02,366
And then most importantly,      
give me one of those            

495
00:20:02,368 --> 00:20:04,936
UITableViewCells to             
draw this row.                  

496
00:20:04,938 --> 00:20:08,072
Okay, so for each row that      
the TableView wants to draw,    

497
00:20:08,074 --> 00:20:10,908
i's going to ask you, okay,     
give me a UITableViewCell now,  

498
00:20:10,910 --> 00:20:13,311
cuz I'm going to                
draw this row.                  

499
00:20:13,313 --> 00:20:14,111
Okay, so that's how it works,   

500
00:20:14,113 --> 00:20:15,513
that's fundamentally            
how this works.                 

501
00:20:15,515 --> 00:20:19,350
Now, all these methods are in   
the UITableViewDataSource       

502
00:20:19,352 --> 00:20:19,617
protocol.                       

503
00:20:19,619 --> 00:20:22,720
So let's look at the last one,  
the give me a UITableViewCell,  

504
00:20:22,722 --> 00:20:23,821
cuz it's the most complicated.  

505
00:20:23,823 --> 00:20:25,957
The other ones are super,       
super simple.                   

506
00:20:25,959 --> 00:20:29,727
So the way that you are going   
to give a UITableViewCell       

507
00:20:29,729 --> 00:20:34,165
back to the TableView when      
it's time to draw a certain     

508
00:20:34,167 --> 00:20:36,300
row is by a method              
being called.                   

509
00:20:36,302 --> 00:20:38,636
Now, you might be worried       
here, it's like woah,           

510
00:20:38,638 --> 00:20:41,939
I'm gonna have this big UI      
with all these labels and       

511
00:20:41,941 --> 00:20:46,677
image views in it, and I have,  
what if I have 100,000 rows?    

512
00:20:46,679 --> 00:20:47,812
I'm going to make               
100,000 views.                  

513
00:20:47,814 --> 00:20:50,948
Surely that's going to          
be terrible performance.        

514
00:20:50,950 --> 00:20:53,918
And in fact, that would be      
terrible performance, okay.     

515
00:20:53,920 --> 00:20:55,353
Views are not cheap.            

516
00:20:55,487 --> 00:20:58,856
But no worries, because         
all your UITableViewCells,      

517
00:20:58,858 --> 00:21:02,827
these UIViews that draw         
the rows, they're reused.       

518
00:21:02,829 --> 00:21:05,730
So only the visible ones        
have UITableViewCells.          

519
00:21:05,732 --> 00:21:08,666
As you scroll around, the ones  
that scroll off the top         

520
00:21:08,668 --> 00:21:12,703
get picked up and put around    
and used on the bottom, okay?   

521
00:21:12,705 --> 00:21:15,673
And the new data keeps          
getting pumped into them.       

522
00:21:15,675 --> 00:21:16,841
Do you see what I'm saying?     

523
00:21:16,843 --> 00:21:17,942
So those cells, only the,       

524
00:21:17,944 --> 00:21:19,744
maybe the ones on               
the screen plus two or          

525
00:21:19,746 --> 00:21:22,880
three on either side            
are actually getting created.   

526
00:21:22,882 --> 00:21:23,681
They're just getting reused.    

527
00:21:23,683 --> 00:21:26,884
As you scroll up and down,      
they keep getting reused.       

528
00:21:27,886 --> 00:21:29,487
Now, the thing                  
about that reuse,               

529
00:21:29,489 --> 00:21:30,955
I want you to be                
very careful of.                

530
00:21:30,957 --> 00:21:31,088
I put it in red.                

531
00:21:31,090 --> 00:21:33,491
When I put it in red, you       
know that means wake up and     

532
00:21:33,493 --> 00:21:35,493
watch out, cuz your homework.   

533
00:21:35,495 --> 00:21:38,162
When you're doing               
multithreaded things,           

534
00:21:38,164 --> 00:21:38,296
you've got to be careful,       

535
00:21:38,298 --> 00:21:41,132
because by the time you come    
back from something you asked   

536
00:21:41,134 --> 00:21:46,504
to do on another thread, your   
cell might be reused, okay.     

537
00:21:46,506 --> 00:21:48,606
And so you've got to            
be prepared for that.           

538
00:21:48,608 --> 00:21:51,442
You gotta understand whether    
you're still the cell you       

539
00:21:51,444 --> 00:21:54,879
thought you were when you       
sent something off to go in     

540
00:21:54,881 --> 00:21:56,013
another thread.                 

541
00:21:56,015 --> 00:21:57,481
Okay, so I'm warning you.       

542
00:21:57,483 --> 00:22:00,618
So what does this method look   
like that the UITableView is    

543
00:22:00,620 --> 00:22:03,321
gonna send to its               
data source to say,             

544
00:22:03,323 --> 00:22:04,488
give me a UITableViewCell?      

545
00:22:04,490 --> 00:22:07,825
It's called                     
cellForRowAt indexPath.         

546
00:22:07,827 --> 00:22:09,260
You see it right there.         

547
00:22:09,262 --> 00:22:10,027
That's its signature.           

548
00:22:10,029 --> 00:22:13,164
It really only has that         
one argument, indexPath.        

549
00:22:13,166 --> 00:22:16,167
The indexPath is just           
a little container of           

550
00:22:16,169 --> 00:22:17,368
the section and row.            

551
00:22:17,370 --> 00:22:20,237
You could imagine this is       
even called cellForRowAt        

552
00:22:20,239 --> 00:22:20,504
section and row.                

553
00:22:20,506 --> 00:22:23,441
But it just puts them           
in one argument called          

554
00:22:23,443 --> 00:22:24,241
an indexPath, okay.             

555
00:22:24,243 --> 00:22:26,510
And then all you return         
is a UITableViewCell.           

556
00:22:26,512 --> 00:22:29,680
And it's gonna use that         
UITableViewCell to draw         

557
00:22:29,682 --> 00:22:30,114
that row.                       

558
00:22:30,116 --> 00:22:32,450
So it really couldn't           
be a simpler API.               

559
00:22:32,452 --> 00:22:35,653
It's at the heart of exactly    
what it's asking you to do.     

560
00:22:35,655 --> 00:22:37,321
Now, what are you gonna         
do inside this method?          

561
00:22:37,323 --> 00:22:40,925
Well, first you're going to     
have to get the data from your  

562
00:22:40,927 --> 00:22:44,628
model that you want             
to show in that row.            

563
00:22:45,364 --> 00:22:45,563
Okay.                           

564
00:22:45,565 --> 00:22:46,897
And you can do this             
any way you want.               

565
00:22:46,899 --> 00:22:49,133
I have a very convenient        
data structure here called      

566
00:22:49,135 --> 00:22:52,002
myInternalDataStructure that    
happens to be divided           

567
00:22:52,004 --> 00:22:53,371
in sections and rows.           

568
00:22:53,373 --> 00:22:54,605
So I can just index into it.    

569
00:22:54,607 --> 00:22:56,507
But you might have              
a different data structure.     

570
00:22:56,509 --> 00:22:58,442
But you've gotta take           
the section and row so          

571
00:22:58,444 --> 00:23:01,145
that you know which row         
you're talking about, and       

572
00:23:01,147 --> 00:23:02,480
get the data out                
of your model.                  

573
00:23:02,482 --> 00:23:03,848
Maybe you're doing              
a database query.               

574
00:23:03,850 --> 00:23:06,484
Maybe you're even doing         
a network query in another      

575
00:23:06,486 --> 00:23:09,920
thread and it's gonna return    
and fill this out, whatever.    

576
00:23:09,922 --> 00:23:11,655
You need to figure out          
how to get your data.           

577
00:23:11,657 --> 00:23:14,925
Now, once you have your data,   
you're gonna create a cell.     

578
00:23:14,927 --> 00:23:16,327
I'm gonna show you how          
to do that in a second.         

579
00:23:16,329 --> 00:23:18,596
And then you're just            
gonna load up that cell         

580
00:23:18,598 --> 00:23:19,764
with the data.                  

581
00:23:20,065 --> 00:23:22,666
So let's talk about how         
we create that cell and         

582
00:23:22,668 --> 00:23:22,800
So I'm gonna take this          
little piece of code, and       

583
00:23:22,802 --> 00:23:24,769
load it up.                     

584
00:23:24,771 --> 00:23:27,805
I'm gonna keep it on screen     
while I go back to showing you  

585
00:23:27,807 --> 00:23:30,174
what's happening                
in the UI here.                 

586
00:23:30,176 --> 00:23:36,213
So first let's talk about a     
cell that's not a custom cell.  

587
00:23:36,215 --> 00:23:38,015
It's just a regular             
cell like subtitle.             

588
00:23:38,017 --> 00:23:39,383
You see subtitle up there?      

589
00:23:39,385 --> 00:23:42,520
Okay, so we're gonna use        
this method here called         

590
00:23:42,522 --> 00:23:46,824
dequeueReusableCell(withIdent-  
ifier: for: indexPath).         

591
00:23:46,826 --> 00:23:49,427
And that's just gonna return    
us a UITableViewCell.           

592
00:23:49,429 --> 00:23:53,097
Now, again, this is             
a reused UITableViewCell.       

593
00:23:53,099 --> 00:23:56,267
Okay, being reused,             

594
00:23:56,269 --> 00:24:00,371
now if this cell, if there's    
not enough been created yet,    

595
00:24:00,373 --> 00:24:02,606
then it will create one         
based on your prototype.        

596
00:24:02,608 --> 00:24:04,742
Whatever your prototype         
you pick in there.              

597
00:24:04,744 --> 00:24:08,412
And you pick which              
prototype with this string,     

598
00:24:08,414 --> 00:24:09,280
the identifier string           

599
00:24:09,282 --> 00:24:12,583
which you set in                
the inspector for the cell.     

600
00:24:12,585 --> 00:24:14,385
So, it's just in there,         
it's called identifier,         

601
00:24:14,387 --> 00:24:17,555
the utilities inspector on the  
right is inspecting that cell,  

602
00:24:17,557 --> 00:24:19,857
that top cell that says title,  
subtitle,                       

603
00:24:19,859 --> 00:24:20,157
it's inspecting that.           

604
00:24:20,159 --> 00:24:22,560
And I'm just setting            
the identifier of my cell, so   

605
00:24:22,562 --> 00:24:25,362
now in my code when I say,      
dequeueReuseableCellwithIdent-  

606
00:24:25,364 --> 00:24:30,634
ifier of MyCell, it's gonna     
make a copy of that prototype.  

607
00:24:30,869 --> 00:24:32,636
Unless there's                  
some to be reused,              

608
00:24:32,638 --> 00:24:33,804
then it'll just reuse them.     

609
00:24:33,806 --> 00:24:35,706
But until it gets               
enough to reuse,                

610
00:24:35,708 --> 00:24:36,373
it uses that prototype and      

611
00:24:36,375 --> 00:24:39,043
just makes copies               
of it as necessary.             

612
00:24:39,578 --> 00:24:42,613
Now, this is                    
a non-custom cell, so           

613
00:24:42,615 --> 00:24:44,915
the only, well there's          
a few fields you can set.       

614
00:24:44,917 --> 00:24:49,620
You can go look at the API for  
UITableViewCell to find out.    

615
00:24:49,622 --> 00:24:53,858
But the cell, set those two     
pieces of text, title and       

616
00:24:53,860 --> 00:24:54,391
subtitle there.                 

617
00:24:54,393 --> 00:24:57,795
You just,                       
you use textlabel.text and      

618
00:24:57,797 --> 00:24:59,563
detailtextlabel.text.           

619
00:24:59,565 --> 00:25:01,532
Those are optional,             
so they could be nil,           

620
00:25:01,534 --> 00:25:03,501
because if there's              
a custom cell, for              

621
00:25:03,503 --> 00:25:05,469
example, it might be nil.       

622
00:25:05,604 --> 00:25:07,872
So anyway that's it,            
you just set those,             

623
00:25:07,874 --> 00:25:08,539
those are just UILabels.        

624
00:25:08,541 --> 00:25:12,309
And so you just set the text,   
it couldn't be easier.          

625
00:25:12,311 --> 00:25:12,643
And that's true for             

626
00:25:12,645 --> 00:25:15,012
all the pre-canned ones,        
you're gonna set these.         

627
00:25:15,014 --> 00:25:17,815
There is actually, I can show   
it, but there's an image also,  

628
00:25:17,817 --> 00:25:21,519
that you can set,               
a little image in the cell.     

629
00:25:21,521 --> 00:25:23,053
And that's also in              
the pre-canned ones,            

630
00:25:23,055 --> 00:25:25,055
so you could do that as well,   
okay?                           

631
00:25:25,057 --> 00:25:27,091
So that's it,                   
that's just simple,             

632
00:25:27,093 --> 00:25:29,560
that's all you need to          
do to provide your data         

633
00:25:29,562 --> 00:25:32,930
to the TableViewCell is just    
dequeue one of these cells.     

634
00:25:32,932 --> 00:25:34,665
Just load it up and             
return it, and                  

635
00:25:34,667 --> 00:25:37,968
now the tableView will          
use that to draw.               

636
00:25:37,970 --> 00:25:40,871
But let's talk about            
a custom cell, so               

637
00:25:40,873 --> 00:25:43,407
now I'm talking about           
the second row down.            

638
00:25:43,409 --> 00:25:44,341
And look at its type,           

639
00:25:44,343 --> 00:25:47,444
it's custom- it's not           
subtitle- it's custom.          

640
00:25:47,446 --> 00:25:49,513
Little different for            
a custom cell.                  

641
00:25:49,515 --> 00:25:52,750
You're still gonna do           
dequeueReusableCellwithIdenti-  

642
00:25:52,752 --> 00:25:53,517
fier for index path, okay?      

643
00:25:53,519 --> 00:25:56,487
But of course you're going to   
use a different identifier,     

644
00:25:56,489 --> 00:25:59,924
cuz now I'm talking about       
the second cell down which I'm  

645
00:25:59,926 --> 00:26:00,524
calling my custom cell.         

646
00:26:00,526 --> 00:26:05,229
Now here there's no title and   
subtitle in that second row.    

647
00:26:05,231 --> 00:26:07,197
Presumably there's              
that image and                  

648
00:26:07,199 --> 00:26:09,934
the thing under text under      
it and text on the side.        

649
00:26:09,936 --> 00:26:11,835
All the things,                 
whatever your UI switch,        

650
00:26:11,837 --> 00:26:14,104
whatever you built              
in this custom cell.            

651
00:26:14,106 --> 00:26:17,007
And all that stuff has          
got outlets hooked up to        

652
00:26:17,009 --> 00:26:20,678
the UITableViewCell containing  
it, remember all that we did?   

653
00:26:20,680 --> 00:26:24,515
So you need to just pass the    
data to that UITableViewCell    

654
00:26:24,517 --> 00:26:28,152
and it's responsible for        
loading up all the UI.          

655
00:26:28,154 --> 00:26:29,086
Now how do you do that?         

656
00:26:29,088 --> 00:26:30,754
First thing you need to         
do is take that dequeued        

657
00:26:30,756 --> 00:26:35,426
thing that came back, which     
is of type UITableViewCell.     

658
00:26:35,428 --> 00:26:37,861
And cast it with "as" to be of  

659
00:26:37,863 --> 00:26:40,631
the type of your subclass       
of UITableViewCell.             

660
00:26:40,633 --> 00:26:42,766
Otherwise you won't be able     
to call any of this API.        

661
00:26:42,768 --> 00:26:46,971
Okay, so you're just gonna do,  
if I can let this cell equal    

662
00:26:46,973 --> 00:26:49,373
the dequeued thing              
as MyTableViewCell.             

663
00:26:49,375 --> 00:26:53,377
Then I'm going to talk to       
MyTableViewCell using its API   

664
00:26:53,379 --> 00:26:57,214
and set, for example,           
infoShownByThisCell to be       

665
00:26:57,216 --> 00:26:59,950
the data that's app             
that section in row.            

666
00:26:59,952 --> 00:27:02,953
Okay, so to go back to          
the code I was showing before,  

667
00:27:02,955 --> 00:27:07,191
that info shown by the cell     
is that var right there.        

668
00:27:07,826 --> 00:27:10,361
The var that I made public      
in MyTableViewCell.             

669
00:27:10,363 --> 00:27:13,931
And then it's gonna update UI   
and set all of its outlets and  

670
00:27:13,933 --> 00:27:14,031
all of that.                    

671
00:27:14,033 --> 00:27:15,766
Okay, so that's it,             
that how it works.              

672
00:27:15,768 --> 00:27:18,769
Those are the two cases,        
the kind of pre-canned one and  

673
00:27:18,771 --> 00:27:20,070
the custom one.                 

674
00:27:20,072 --> 00:27:22,473
They're almost identical,       
you're still dequeuing cells,   

675
00:27:22,475 --> 00:27:25,409
you just set the data           
a little bit differently.       

676
00:27:25,411 --> 00:27:31,849
Okay, the data source also has  
to know how many sections and   

677
00:27:31,851 --> 00:27:32,282
rows.                           

678
00:27:32,284 --> 00:27:32,483
It's really simple,             

679
00:27:32,485 --> 00:27:35,152
there's a method called         
numberOfSections in tableView.  

680
00:27:35,154 --> 00:27:36,620
And that's going                
to return int,                  

681
00:27:36,622 --> 00:27:37,988
how many sections there are.    

682
00:27:37,990 --> 00:27:39,089
By the way that                 
one is optional;                

683
00:27:39,091 --> 00:27:40,457
you don't have to               
implement that one.             

684
00:27:40,459 --> 00:27:42,893
If you don't, it will           
assume there's one section,     

685
00:27:42,895 --> 00:27:45,362
that all the rows are in        
this one big section.           

686
00:27:45,364 --> 00:27:48,666
The other one though, which is  
numberOfRowsInSection where it  

687
00:27:48,668 --> 00:27:49,833
passes you a section number,    
and                             

688
00:27:49,835 --> 00:27:52,436
you have to say how many        
rows are in the section.        

689
00:27:52,438 --> 00:27:52,970
That is not optional,           

690
00:27:52,972 --> 00:27:55,939
that is mandatory, and you      
must answer this question for   

691
00:27:55,941 --> 00:27:59,076
every single section that you   
claim that your table has       

692
00:27:59,078 --> 00:28:02,312
with numberOfSections           
in table, okay?                 

693
00:28:02,314 --> 00:28:05,416
So that's it, that's simple,    
why does it need to know how    

694
00:28:05,418 --> 00:28:07,484
many rows and all of            
the sections, by the way?       

695
00:28:07,486 --> 00:28:10,054
Cuz it's a scroll view and it   
needs to know how big a thing,  

696
00:28:10,056 --> 00:28:12,256
it needs to set it's content    
size basically, right?          

697
00:28:12,258 --> 00:28:15,492
It needs to know how big a      
thing it's scrolling over, so   

698
00:28:15,494 --> 00:28:15,592
it needs to know.               

699
00:28:15,594 --> 00:28:19,129
But it also needs to know when  
to ask you for the data and     

700
00:28:19,131 --> 00:28:22,366
all that, so it's pretty        
obvious it needs to know that.  

701
00:28:22,368 --> 00:28:23,634
In a static table by the way,   

702
00:28:23,636 --> 00:28:25,302
it's not gonna ask              
you these questions.            

703
00:28:25,304 --> 00:28:26,370
So don't even                   
worry about that.               

704
00:28:26,372 --> 00:28:29,039
The static table is fixed       
in the StoryBoard, so           

705
00:28:29,041 --> 00:28:30,908
it's never asking you for       
the data.                       

706
00:28:30,910 --> 00:28:34,712
So it's never gonna ask you     
how many rows and sections and  

707
00:28:34,714 --> 00:28:35,946
all that stuff there is.        

708
00:28:35,948 --> 00:28:38,682
So the summary is you set       
the tableView's data source.    

709
00:28:38,684 --> 00:28:41,018
That's automatic if you're      
using UITableViewController.    

710
00:28:41,020 --> 00:28:44,021
You implement numberOfSections  
and numberOfRowsInSection.      

711
00:28:44,023 --> 00:28:46,290
And then you implement          
cellForRowAt.                   

712
00:28:46,292 --> 00:28:47,257
And give back                   
a tableView cell,               

713
00:28:47,259 --> 00:28:49,526
either a custom subclass        
if you're doing custom,         

714
00:28:49,528 --> 00:28:53,330
or just setting                 
the detailed text label and     

715
00:28:53,332 --> 00:28:56,467
then the normal text label      
if you're not, question?        

716
00:28:56,469 --> 00:28:58,302
Okay, so the question is,       
what do I answer for            

717
00:28:58,304 --> 00:29:01,205
that number of sections         
thing if, over time,            

718
00:29:01,207 --> 00:29:02,706
my tableView is growing,        
right?                          

719
00:29:02,708 --> 00:29:04,274
Maybe data is coming in         
from the network, or            

720
00:29:04,276 --> 00:29:07,277
the user is clicking on things  
that makes more table happen.   

721
00:29:07,279 --> 00:29:10,714
You can answer it that          
differently in any time, but    

722
00:29:10,716 --> 00:29:14,685
what you're basically saying    
is, what if my model changes?   

723
00:29:14,687 --> 00:29:17,421
I need my UI, right,            
to keep up with it.             

724
00:29:17,423 --> 00:29:19,923
If my model gets bigger,        
then I need more rows.          

725
00:29:19,925 --> 00:29:23,260
Well, you're gonna see that     
it's really important to,       

726
00:29:23,262 --> 00:29:24,595
every time your model changes,  

727
00:29:24,597 --> 00:29:26,830
you need to tell                
the tableView about it.         

728
00:29:26,832 --> 00:29:28,298
And you're gonna                
tell it things like             

729
00:29:28,300 --> 00:29:29,967
I've added a new section.       

730
00:29:29,969 --> 00:29:30,467
And then it will come back and  

731
00:29:30,469 --> 00:29:33,804
ask you all these               
questions again, all right.     

732
00:29:33,806 --> 00:29:34,638
So, that's how it works.        

733
00:29:34,640 --> 00:29:37,040
It might come back and ask      
you these questions including   

734
00:29:37,042 --> 00:29:39,009
cellForRowAt over and           
over and over.                  

735
00:29:39,011 --> 00:29:41,111
As you tell it that you've      
changed your model.             

736
00:29:41,113 --> 00:29:44,047
But of course, your model       
can change over time.           

737
00:29:45,517 --> 00:29:46,917
By the way,                     
the titles of the sections,     

738
00:29:46,919 --> 00:29:49,653
remember when I showed you the  
countries and it had Japan and  

739
00:29:49,655 --> 00:29:50,320
Mexico as titles.               

740
00:29:50,322 --> 00:29:51,989
Those are considered            
part of the data.               

741
00:29:51,991 --> 00:29:55,526
So, those are part of           
the UITableViewDataSource       

742
00:29:55,528 --> 00:29:56,026
protocol as well.               

743
00:29:56,028 --> 00:29:59,963
This method title for header    
or footer in section, and       

744
00:29:59,965 --> 00:30:01,799
you pass the section number     
and it gives you the thing.     

745
00:30:01,801 --> 00:30:05,035
You can also do it with         
a view, using the delegate.     

746
00:30:05,037 --> 00:30:06,904
But if you want to              
just do it as a string,         

747
00:30:06,906 --> 00:30:08,806
you'd use the data source.      

748
00:30:08,808 --> 00:30:10,774
There's a lot of other          
methods in the protocol.        

749
00:30:10,776 --> 00:30:11,675
I'm not gonna really            
talk about them,                

750
00:30:11,677 --> 00:30:14,344
they have to do with things     
like deleting rows or           

751
00:30:14,346 --> 00:30:17,347
rearranging the rows,           
things like that.               

752
00:30:17,349 --> 00:30:19,817
If your model allows            
those things to happen,         

753
00:30:19,819 --> 00:30:20,450
like things being deleted.      

754
00:30:20,452 --> 00:30:22,719
Then you're gonna have          
to teach yourself this.         

755
00:30:22,721 --> 00:30:25,556
Most of you will probably       
end up doing this for           

756
00:30:25,558 --> 00:30:26,056
your final project.             

757
00:30:26,058 --> 00:30:27,658
I'm not gonna ask you to        
do it in the homework, but      

758
00:30:27,660 --> 00:30:29,259
you'll probably do it for       
your final project.             

759
00:30:29,261 --> 00:30:30,460
It's extra credit               
in the homework,                

760
00:30:30,462 --> 00:30:33,096
if you wanna get                
a head start on that.           

761
00:30:33,098 --> 00:30:36,033
All right let's talk            
about seguing from a row.       

762
00:30:36,035 --> 00:30:37,000
So I've got a row there, okay,  

763
00:30:37,002 --> 00:30:40,103
this one actually has a detail  
disclosure in there as well.    

764
00:30:40,105 --> 00:30:44,474
And I wanna segue out of that   
thing, how do I do that?        

765
00:30:45,043 --> 00:30:45,242
Very simple,                    

766
00:30:45,244 --> 00:30:47,945
I do it just like any other     
segueing from the button.       

767
00:30:47,947 --> 00:30:53,116
I'm just gonna Ctrl+drag from   
the row to the MVC I want to    

768
00:30:53,118 --> 00:30:53,317
segue to.                       

769
00:30:53,319 --> 00:30:55,819
And it's going to put           
up this black window.           

770
00:30:55,821 --> 00:30:56,253
Now, this black window          

771
00:30:56,255 --> 00:30:57,421
is a little different           
than other segues.              

772
00:30:57,423 --> 00:31:01,859
Because you see it has two      
sections, Selection Segue and   

773
00:31:01,861 --> 00:31:03,594
Accessory Action, okay?         

774
00:31:03,596 --> 00:31:06,763
So the Selection Segue is if    
they click on the row and       

775
00:31:06,765 --> 00:31:08,432
the Accessory Action            
is if they click on             

776
00:31:08,434 --> 00:31:10,234
the little accessory button.    

777
00:31:11,035 --> 00:31:15,772
But it's just a normal segue,   
once you create the segue,      

778
00:31:15,774 --> 00:31:19,476
you can click on it and         
inspect it.                     

779
00:31:19,478 --> 00:31:20,711
Just like any other segue,      

780
00:31:20,713 --> 00:31:23,814
you can set its identifier      
up there to something.          

781
00:31:23,816 --> 00:31:25,616
And then you're gonna           
have prepare for segue.         

782
00:31:25,618 --> 00:31:29,119
So, here I've set               
the identifier to be AbcSegue.  

783
00:31:29,121 --> 00:31:30,954
So lets take a look             
at what prepare for             

784
00:31:30,956 --> 00:31:34,258
segue looks like when you're    
doing this kinda segue.         

785
00:31:34,260 --> 00:31:36,059
It looks almost                 
exactly the same,               

786
00:31:36,061 --> 00:31:37,794
here I've got a prepare for     
segue.                          

787
00:31:37,796 --> 00:31:40,030
I've noticed that               
the sender there is Any.        

788
00:31:40,032 --> 00:31:42,266
And when you're segueing        
into tableView,                 

789
00:31:42,268 --> 00:31:44,635
what do you think               
that Any is gonna be?           

790
00:31:44,637 --> 00:31:48,438
UITableViewCell, okay, that     
view that contains the row.     

791
00:31:48,440 --> 00:31:51,008
So that is going                
to be the sender.               

792
00:31:51,709 --> 00:31:52,743
Just like a button              
is the sender                   

793
00:31:52,745 --> 00:31:54,745
if you click on a button        
to segue, the row,              

794
00:31:54,747 --> 00:31:58,382
the UITableViewCell,            
is the sender in that case.     

795
00:31:59,150 --> 00:32:00,784
So the first thing              
you're gonna wanna              

796
00:32:00,786 --> 00:32:03,420
do is convert the sender        
to a TableViewCell.             

797
00:32:03,422 --> 00:32:07,224
And specifically to your        
subclass or table view cell.    

798
00:32:07,226 --> 00:32:10,193
If you have a custom            
cell in case you wanna          

799
00:32:10,195 --> 00:32:12,729
do anything that's specific     
to your TableView cell.         

800
00:32:12,731 --> 00:32:16,400
If not then you can just        
do it to UITableViewCell.       

801
00:32:16,402 --> 00:32:19,469
And then you wanna get          
the index path of that cell so  

802
00:32:19,471 --> 00:32:22,105
that you know what row          
where you're segueing from.     

803
00:32:22,107 --> 00:32:25,175
Because every row, you can      
click on it, it will segue.     

804
00:32:25,177 --> 00:32:26,910
So, you need to                 
know which row.                 

805
00:32:26,912 --> 00:32:30,480
And you do that by              

806
00:32:30,482 --> 00:32:32,849
And you can't pass any to       
that, you have to pass          

807
00:32:32,851 --> 00:32:36,687
UITableViewCell or subclass     
thereof, indexPath(for: cell).  

808
00:32:36,689 --> 00:32:38,822
Now, I'm gonna give you         
one of those index path         

809
00:32:38,824 --> 00:32:42,159
things remember?                

810
00:32:42,161 --> 00:32:43,593
and row.                        

811
00:32:43,595 --> 00:32:47,164
Then, you're gonna get          
your seguedToMVC as usual.      

812
00:32:47,166 --> 00:32:51,868
And you're going to prepare     
your Segue to public API, and   

813
00:32:51,870 --> 00:32:55,772
you're going to do it using     
the data in your model based    

814
00:32:55,774 --> 00:32:59,776
on the section and              
row that was clicked on.        

815
00:33:01,045 --> 00:33:02,112
Got it?                         

816
00:33:02,114 --> 00:33:04,614
So pretty easy segue from it.   

817
00:33:04,983 --> 00:33:07,317
So yes you're gonna use         
your public API of your         

818
00:33:07,319 --> 00:33:08,585
segue to MVC.                   

819
00:33:08,753 --> 00:33:10,721
What about the table            
view's delegate?                

820
00:33:10,723 --> 00:33:11,221
We talked about the data        

821
00:33:11,223 --> 00:33:13,056
source; what about              
the table view's delegate?      

822
00:33:13,058 --> 00:33:14,491
It's got a kind of              
a miscellaneous                 

823
00:33:14,493 --> 00:33:17,060
bunch of stuff in there but     
generally the delegate          

824
00:33:17,062 --> 00:33:19,863
is talking about how the table  
view is displayed, and          

825
00:33:19,865 --> 00:33:24,267
the data source is what data    
is actually in the table.       

826
00:33:24,269 --> 00:33:24,768
Okay so that's the difference.  

827
00:33:24,770 --> 00:33:29,172
So the delegate we're           
talking about things,           

828
00:33:29,174 --> 00:33:30,340
yeah they're usually            
the same object.                

829
00:33:30,342 --> 00:33:35,045
So the delegate also has all    
the will, did, should things.   

830
00:33:35,047 --> 00:33:37,447
That you could watch what's     
happening in the table view.    

831
00:33:37,449 --> 00:33:39,683
This row did get selected,      
things like that.               

832
00:33:39,685 --> 00:33:43,754
For example, here's table       
view target action, so          

833
00:33:43,756 --> 00:33:46,289
if when you click on a row,     
if you don't want a segue, but  

834
00:33:46,291 --> 00:33:49,159
you just want to be target      
action like a button,           

835
00:33:49,161 --> 00:33:49,926
well you can't really do that.  

836
00:33:49,928 --> 00:33:52,763
You can't do target action      
because a row is not            

837
00:33:52,765 --> 00:33:52,896
a UIButton.                     

838
00:33:52,898 --> 00:33:56,133
But you can implement this      
delegate method tableView       

839
00:33:56,135 --> 00:33:57,934
didSelectRowAt indexPath.       

840
00:33:57,936 --> 00:34:00,103
And when someone                
touches on that row,            

841
00:34:00,105 --> 00:34:01,204
this is gonna get called.       

842
00:34:01,206 --> 00:34:02,873
So, it's just like              
target action right.            

843
00:34:02,875 --> 00:34:04,341
It told you what happened.      

844
00:34:04,343 --> 00:34:06,977
So, now you can look at the     
index path row in section to    

845
00:34:06,979 --> 00:34:10,781
know which row was selected so  
we call that target action.     

846
00:34:10,783 --> 00:34:12,983
You did the same thing          
with that detail                

847
00:34:12,985 --> 00:34:13,350
disclosure by the way.          

848
00:34:13,352 --> 00:34:16,219
So I'm gonna click on the       
detail disclosure we're gonna   

849
00:34:16,221 --> 00:34:17,888
get this method in              
your delegate called            

850
00:34:17,890 --> 00:34:21,124
accessoryButtonTappedForRow-    
With indexPath.                 

851
00:34:21,126 --> 00:34:22,459
Okay, so now you know           
which row is that.              

852
00:34:22,461 --> 00:34:24,961
So when things are clicked on,  
you can use segue or            

853
00:34:24,963 --> 00:34:28,331
you can use these to find out   
things were clicked on and      

854
00:34:28,333 --> 00:34:29,699
do whatever you want.           

855
00:34:29,901 --> 00:34:32,235
So yeah, a lot of wills and     
dids and all those things.      

856
00:34:32,237 --> 00:34:34,604
You can look at                 
the documentation for           

857
00:34:34,606 --> 00:34:36,339
UITableViewDelegate.            

858
00:34:36,341 --> 00:34:38,308
Now back to what this           
guy was asking before.          

859
00:34:38,310 --> 00:34:40,243
What happens if                 
my model changes?               

860
00:34:40,245 --> 00:34:40,610
It gets bigger?                 

861
00:34:40,612 --> 00:34:42,245
Or even gets smaller or         
whatever?                       

862
00:34:42,247 --> 00:34:45,549
One thing you can do            
that's kind of a hammer is      

863
00:34:45,551 --> 00:34:46,616
reloadData.                     

864
00:34:46,618 --> 00:34:49,386
If you go reloadData on your    
table view it's going to call   

865
00:34:49,388 --> 00:34:50,787
all of your data                
source methods again.           

866
00:34:50,789 --> 00:34:53,256
How many sections you got,      
how many rows in each section?  

867
00:34:53,258 --> 00:34:55,625
Give me a cell for              
every single visible row.       

868
00:34:55,627 --> 00:34:55,692
You see what I mean?            

869
00:34:55,694 --> 00:34:57,494
It's going to do the whole      
thing all over again.           

870
00:34:57,496 --> 00:35:00,597
It's kind of a hammer because   
if you know that you only       

871
00:35:00,599 --> 00:35:02,532
changed one section okay?       

872
00:35:02,534 --> 00:35:05,702
Then you can call something     
like reloadRows (at             

873
00:35:05,704 --> 00:35:06,336
indexPaths...).                 

874
00:35:06,338 --> 00:35:09,406
And indexPaths would tell       
the sections and rows.          

875
00:35:09,408 --> 00:35:10,607
With some animation.            

876
00:35:10,609 --> 00:35:13,710
And animations can              
be like fade in or              

877
00:35:13,712 --> 00:35:16,580
slide from the bottom or        
things like that.               

878
00:35:16,582 --> 00:35:18,348
So there are lighter            
weight ones you can call.       

879
00:35:18,350 --> 00:35:19,649
And I'm actually gonna          
show you in the demo,           

880
00:35:19,651 --> 00:35:22,719
we're gonna call one where      
we're just gonna tell           

881
00:35:22,721 --> 00:35:25,222
the table view that we          
inserted a section and          

882
00:35:25,224 --> 00:35:27,390
it's going to                   
immediately just ask me         

883
00:35:27,392 --> 00:35:31,394
the data source message about   
that section and nothing else.  

884
00:35:31,396 --> 00:35:34,731
So you do need to               
tell the table view             

885
00:35:34,733 --> 00:35:37,000
every time you                  
change your model.              

886
00:35:37,002 --> 00:35:37,367
If you change your model in     

887
00:35:37,369 --> 00:35:40,704
any way that would change the   
number of sections and rows.    

888
00:35:40,706 --> 00:35:41,872
Or even the display of a row,   

889
00:35:41,874 --> 00:35:43,707
you need to tell                
the table view.                 

890
00:35:43,709 --> 00:35:45,642
So, just always think           
about that when you're          

891
00:35:45,644 --> 00:35:46,343
writing table view code.        

892
00:35:46,345 --> 00:35:49,279
Change my model,                
tell the table view.            

893
00:35:49,281 --> 00:35:49,412
Right away.                     

894
00:35:49,414 --> 00:35:51,014
You want to tell the table      
view right away.                

895
00:35:51,016 --> 00:35:53,817
And change your model first,    
then change your table view.    

896
00:35:53,819 --> 00:35:54,651
Because when you                
tell your table view            

897
00:35:54,653 --> 00:35:57,754
things have changed, it's       
gonna go back and ask you, so   

898
00:35:57,756 --> 00:35:59,256
for IndexPath,                  
number of sections,             

899
00:35:59,258 --> 00:36:01,658
it'll ask you those questions,  
some of them again.             

900
00:36:01,660 --> 00:36:03,793
So make sure your models        
are already changed and         

901
00:36:03,795 --> 00:36:06,096
ready to answer                 
those questions.                

902
00:36:06,098 --> 00:36:08,932
Le's talk about                 
the height of rows.             

903
00:36:09,867 --> 00:36:10,534
The height of the row           

904
00:36:10,536 --> 00:36:12,435
generally set in                
the Storyboard.                 

905
00:36:12,437 --> 00:36:16,673
So you could resize it and set  
it and tha's what it is but     

906
00:36:16,675 --> 00:36:19,009
you can also ask the delegate.  

907
00:36:19,011 --> 00:36:21,678
You can also implement          
a method in the delegate and    

908
00:36:21,680 --> 00:36:24,748
it'll ask the delegate, what    
height should this row be?      

909
00:36:24,750 --> 00:36:28,084
This might be very useful in    
your homework, by the way.      

910
00:36:28,086 --> 00:36:30,554
But this is for when you have   

911
00:36:30,556 --> 00:36:34,991
the rows that change height     
in some calculated way.         

912
00:36:35,293 --> 00:36:36,359
Maybe you have                  
an image in there, and          

913
00:36:36,361 --> 00:36:39,996
it's got different aspect       
ratios, for example.            

914
00:36:39,998 --> 00:36:42,566
And so it's different           
heights sometimes, whatever.    

915
00:36:42,568 --> 00:36:44,901
So you can answer it this way.  

916
00:36:45,136 --> 00:36:47,637
Of course, the other way        
you can control the height      

917
00:36:47,639 --> 00:36:49,406
is by doing auto layout, and    

918
00:36:49,408 --> 00:36:52,209
setting your height to          
be automatic dimension.         

919
00:36:52,211 --> 00:36:55,579
If you set your height to be    
UITableViewAutomaticDimension,  

920
00:36:55,581 --> 00:36:59,349
that means go figure it out     
from the auto layout please.    

921
00:36:59,351 --> 00:37:00,884
So those are the three was      
you can set the height.         

922
00:37:00,886 --> 00:37:04,654
Set it fixed in the story       
board, answer this delegate     

923
00:37:04,656 --> 00:37:06,790
method here,                    
heightForRowAt indexPath,       

924
00:37:06,792 --> 00:37:08,858
or set it to                    
the automatic dimension.        

925
00:37:08,860 --> 00:37:13,163
If you do the automatic ways    
then you also probably want to  

926
00:37:13,165 --> 00:37:14,965
set the estimated row height.   

927
00:37:14,967 --> 00:37:18,201
That just tells the table view  
calculate from auto layout but  

928
00:37:18,203 --> 00:37:21,037
for all those cells             
the 100,000 cells that aren't   

929
00:37:21,039 --> 00:37:24,808
on screen please don't do auto  
layout for 100,000 cells.       

930
00:37:24,810 --> 00:37:27,644
Just estimate them to be about  
this and as they start to come  

931
00:37:27,646 --> 00:37:30,046
on screen then it's gonna       
do the auto layout and          

932
00:37:30,048 --> 00:37:32,882
pick the exact                  
right height okay.              

933
00:37:32,884 --> 00:37:34,284
So that's why you               
need to estimate.               

934
00:37:34,286 --> 00:37:35,552
And there's also                
a delicate method,              

935
00:37:35,554 --> 00:37:38,655
estimated height per            
row at whatever.                

936
00:37:38,657 --> 00:37:41,825
So there's dozens of methods    
also, in table view itself.     

937
00:37:41,827 --> 00:37:44,728
Not in its delegates, but       
in table view itself.           

938
00:37:44,730 --> 00:37:47,897
You can scroll to a row         
cuz it's a scroll view.         

939
00:37:47,899 --> 00:37:48,465
It knows how to do scrolling.   

940
00:37:48,467 --> 00:37:52,369
You can control the look,       
the separators between rows.    

941
00:37:52,371 --> 00:37:52,902
All those kind of things.       

942
00:37:52,904 --> 00:37:55,639
So you're definitely want       
to familiarize yourself         

943
00:37:55,641 --> 00:37:58,108
with the table                  
view API itself.                

944
00:37:58,110 --> 00:37:58,441
Don't forget about that.        

945
00:37:58,443 --> 00:38:01,544
All right, so I'm not           
coming back to this slide.      

946
00:38:01,546 --> 00:38:04,047
So just give you                
a quick coming up here.         

947
00:38:04,049 --> 00:38:05,315
We have collection              
view on Friday.                 

948
00:38:05,317 --> 00:38:07,417
So collection view is very      
similar to table view,          

949
00:38:07,419 --> 00:38:10,453
but the layout doesn't have     
to be in a strict table.        

950
00:38:10,455 --> 00:38:12,522
It can be kind of laid          
out any way you want.           

951
00:38:12,524 --> 00:38:14,457
But it's the same kind of       
thing where there's data and    

952
00:38:14,459 --> 00:38:17,360
it's gonna ask you how many     
sections there, how many row,   

953
00:38:17,362 --> 00:38:20,363
not rows but items in that      
section, then it's gonna have   

954
00:38:20,365 --> 00:38:23,033
this little extra mechanism     
for doing a lay out.            

955
00:38:23,035 --> 00:38:23,500
So it's really awesome.         

956
00:38:23,502 --> 00:38:25,602
I'd love to have time to        
teach it in lecture not in      

957
00:38:25,604 --> 00:38:28,204
the optional section but I've   
got so much to teach in this    

958
00:38:28,206 --> 00:38:31,041
course and you really need to   
understand TableView first,     

959
00:38:31,043 --> 00:38:33,176
which is a little simpler,      
before you can move onto        

960
00:38:33,178 --> 00:38:35,245
CollectionView- but             
really don't miss Friday.       

961
00:38:35,247 --> 00:38:39,582
It will be a good way to        
really it much more powerful    

962
00:38:39,584 --> 00:38:41,618
kind of data presentation UI.   

963
00:38:41,620 --> 00:38:44,220
And then next week we gonna     
talk about Core Data,           

964
00:38:44,222 --> 00:38:47,123
which is the object-oriented    
database in iOS,                

965
00:38:47,125 --> 00:38:48,825
really powerful mechanism.      

966
00:38:48,827 --> 00:38:52,095
Right now, I'm gonna be         
doing a big demo that shows     

967
00:38:52,097 --> 00:38:53,863
how to do all this              
TableView stuff and             

968
00:38:53,865 --> 00:38:56,299
also TextField and              
some other things.              

969
00:38:56,301 --> 00:38:57,567
And your Assignment 4 is out,   

970
00:38:57,569 --> 00:39:00,303
and it's due in one week,       
on Wednesday and it's           

971
00:39:00,305 --> 00:39:04,741
basically to take what I do     
today and build a better one.   

972
00:39:04,743 --> 00:39:06,843
More feature-full.              

973
00:39:06,845 --> 00:39:06,943
So that's why you               

974
00:39:06,945 --> 00:39:09,579
always want to understand what  
I'm doing in lecture, because   

975
00:39:09,581 --> 00:39:12,248
I'm almost always just asking   
you to do the same thing.       

976
00:39:12,250 --> 00:39:14,384
Okay so                         
I'm gonna build a completely    

977
00:39:14,386 --> 00:39:15,185
fresh app from scratch.         

978
00:39:15,187 --> 00:39:17,654
Like I said before it's         
gonna be a Twitter client.      

979
00:39:17,656 --> 00:39:20,990
We're gonna be doing            
Twitter searches.               

980
00:39:20,992 --> 00:39:22,826
It's gonna be                   
a single view app.              

981
00:39:22,828 --> 00:39:22,859
i'm gonna call it Smashtag,     
kind of like hashtag.           

982
00:39:22,861 --> 00:39:27,297
As always,                      

983
00:39:27,299 --> 00:39:29,132
This is gonna be                
an iPhone-only app.             

984
00:39:29,134 --> 00:39:30,900
And that's true for             
your homework as well.          

985
00:39:30,902 --> 00:39:33,536
Okay, iPhone-only, we're        
not gonna do an iPad thing.     

986
00:39:33,538 --> 00:39:35,572
You already learned that        
with assignment three.          

987
00:39:35,574 --> 00:39:38,408
Trying to keep what             
you're learning                 

988
00:39:38,410 --> 00:39:40,176
as new as possible              
with each one.                  

989
00:39:40,178 --> 00:39:42,879
I'm gonna put this where        
I always put everything.        

990
00:39:42,881 --> 00:39:46,416
Here we go, I'm gonna get rid   
of some of these things over    

991
00:39:46,418 --> 00:39:49,119
here that we don't              
really use very much.           

992
00:39:49,121 --> 00:39:51,921
Actually I'm gonna leave        
plist as you'll see.            

993
00:39:51,923 --> 00:39:56,860
New group, we'll do             
Supporting Files here, and      

994
00:39:56,862 --> 00:39:58,294
I will move that down.          

995
00:39:58,296 --> 00:40:01,831
Now I'm gonna start by taking   
my Storyboard here and          

996
00:40:01,833 --> 00:40:02,966
just totally wiping it out.     

997
00:40:02,968 --> 00:40:05,568
Okay, I'm just gonna take       
the one controller that I got,  

998
00:40:05,570 --> 00:40:06,569
the free one, and               
just delete it.                 

999
00:40:06,571 --> 00:40:08,872
I'm even gonna go over to       
this code right here and        

1000
00:40:08,874 --> 00:40:11,708
delete that, same thing         
I did in the last demo.         

1001
00:40:11,710 --> 00:40:13,510
Cuz I don't need any of that,   

1002
00:40:13,512 --> 00:40:16,312
I'm gonna start                 
from scratch here.              

1003
00:40:16,314 --> 00:40:17,614
So, we're building              
a table view app, so            

1004
00:40:17,616 --> 00:40:20,417
let's grab a table view,        
I'm gonna scroll down here.     

1005
00:40:20,419 --> 00:40:23,086
Here's a table view right       
here, I just drag it out.       

1006
00:40:23,088 --> 00:40:27,424
Now this table view if we       
wanna use it as a delegate and  

1007
00:40:27,426 --> 00:40:30,460
data source, or if we wanna     
have outlets to it, we,         

1008
00:40:30,462 --> 00:40:31,728
of course,                      
need a subclass of it.          

1009
00:40:31,730 --> 00:40:36,633
So let's go ahead and           
do that, New > File, okay.      

1010
00:40:36,635 --> 00:40:39,335
It's gonna be                   
a Cocoa Touch subclass,         

1011
00:40:39,337 --> 00:40:41,337
namely a                        
UITableViewController.          

1012
00:40:41,339 --> 00:40:44,607
And I'm gonna call this my      
TweetTableViewController,       

1013
00:40:44,609 --> 00:40:46,309
because it's gonna              
show tweets.                    

1014
00:40:46,311 --> 00:40:48,878
All right, and I'm gonna be     
very careful to put it here,    

1015
00:40:48,880 --> 00:40:52,215
not at the top level            
of my project there.            

1016
00:40:52,516 --> 00:40:55,118
And here we go,                 
here's our code right here.     

1017
00:40:55,120 --> 00:40:59,189
I'm gonna delete this           
View Controller Lifecycle       

1018
00:40:59,191 --> 00:40:59,689
stuff, as usual.                

1019
00:40:59,691 --> 00:41:01,491
But you'll notice               
the TableViewController         

1020
00:41:01,493 --> 00:41:02,692
also has some extra stuff.      

1021
00:41:02,694 --> 00:41:05,528
You recognize those methods,    
numberOfSections, okay,         

1022
00:41:05,530 --> 00:41:09,199
numberOfRowsInSection, and      
cellForRowAt indexPath.         

1023
00:41:09,201 --> 00:41:15,171
These are the key               
UITableViewDataSource           

1024
00:41:15,173 --> 00:41:16,673
methods here.                   

1025
00:41:16,675 --> 00:41:19,609
Now there's some other          
UITableViewDataSource           

1026
00:41:19,611 --> 00:41:21,778
methods here as well,           
these are for                   

1027
00:41:21,780 --> 00:41:24,214
things like deleting rows,      
moving rows.                    

1028
00:41:24,216 --> 00:41:26,249
So when you're doing            
your extra credit, or           

1029
00:41:26,251 --> 00:41:27,917
when you're doing               
your final project,             

1030
00:41:27,919 --> 00:41:29,252
you'll be wanting to            
not delete those.               

1031
00:41:29,254 --> 00:41:33,957
But I will delete those just    
to make our code a little bit   

1032
00:41:33,959 --> 00:41:35,492
cleaner here.                   

1033
00:41:35,494 --> 00:41:36,759
So that's our                   
UITableViewController           

1034
00:41:36,761 --> 00:41:39,262
subclass, we'll have to         
implement these in a second.    

1035
00:41:39,264 --> 00:41:40,697
But let's go back               
to our Storyboard.              

1036
00:41:40,699 --> 00:41:46,102
We also obviously wanna set     
our identity here to instead    

1037
00:41:46,104 --> 00:41:50,640
of being just generic           
UITableViewController,          

1038
00:41:50,642 --> 00:41:55,144
we want it to be                
a TweetTableViewController.     

1039
00:41:55,146 --> 00:41:56,746
Also, where's our               
arrow coming in?                

1040
00:41:56,748 --> 00:41:59,215
There's no arrow, so            
let's select it again and       

1041
00:41:59,217 --> 00:42:03,286
go back to attributes and pick  
is initial view controller, so  

1042
00:42:03,288 --> 00:42:04,687
we get this arrow coming in.    

1043
00:42:04,689 --> 00:42:06,489
Okay, otherwise,                
when we launch our app,         

1044
00:42:06,491 --> 00:42:10,126
it's not gonna know what MVC    
to start with, all right?       

1045
00:42:10,128 --> 00:42:12,729
Now whenever we                 
have a new MVC,                 

1046
00:42:12,731 --> 00:42:16,132
what's one of the first         
things we always wanna do?      

1047
00:42:16,134 --> 00:42:17,300
Define its model.               

1048
00:42:17,302 --> 00:42:20,503
Understand what this            
MVC is all about.               

1049
00:42:20,505 --> 00:42:22,438
What does it show or do?        

1050
00:42:22,440 --> 00:42:28,845
And I'm going to pick my model  
to be an array of tweets.       

1051
00:42:28,847 --> 00:42:30,346
Okay, I'm gonna                 
call it tweets.                 

1052
00:42:30,348 --> 00:42:34,350
But I'm actually gonna          
make it be an array             

1053
00:42:34,352 --> 00:42:36,119
of array of tweets.             

1054
00:42:36,121 --> 00:42:39,656
Okay, why am I making an array  
of an array of tweets?          

1055
00:42:39,658 --> 00:42:43,159
Because I'm going to be able    
to put some tweets in my table  

1056
00:42:43,161 --> 00:42:45,428
and then go fetch some          
more and put more in.           

1057
00:42:45,430 --> 00:42:48,598
And every time I put more in,   
I'm gonna put it as a new       

1058
00:42:48,600 --> 00:42:51,167
section, okay,                  
table view section.             

1059
00:42:51,169 --> 00:42:54,237
So each array on                
the inside of this array        

1060
00:42:54,239 --> 00:42:55,471
is another batch of tweets.     

1061
00:42:55,473 --> 00:42:57,807
And the outer array is          
all of my sections.             

1062
00:42:57,809 --> 00:42:59,375
So I have a really nice         
data structure here.            

1063
00:42:59,377 --> 00:43:01,344
It really matches up            
nicely with table view.         

1064
00:43:01,346 --> 00:43:04,581
And it's kind of nice to have   
that kind of data structure.    

1065
00:43:04,583 --> 00:43:06,716
And I kind of recommend that    
in the homework if you can      

1066
00:43:06,718 --> 00:43:09,319
make your data structure        
match up with sections and      

1067
00:43:09,321 --> 00:43:11,054
rows, then it makes             
the implementation              

1068
00:43:11,056 --> 00:43:14,757
of all these methods            
down here a lot simpler.        

1069
00:43:14,858 --> 00:43:18,494
All right, so, I've got         
another part of my model,       

1070
00:43:18,496 --> 00:43:21,197
though, which is                
some searchText.                

1071
00:43:21,199 --> 00:43:23,600
So the searchText               
is like #stanford,              

1072
00:43:23,602 --> 00:43:25,935
that's what I                   
wanna search for.               

1073
00:43:25,937 --> 00:43:28,771
So this searchText is           
what I'm searching for          

1074
00:43:28,773 --> 00:43:29,973
to find my tweets.              

1075
00:43:29,975 --> 00:43:31,140
And I'm making                  
this one public,                

1076
00:43:31,142 --> 00:43:33,309
this is gonna be a public       
part of my model.               

1077
00:43:33,311 --> 00:43:37,146
So anyone using my MVC,         
they set the search text.       

1078
00:43:37,148 --> 00:43:39,582
I will show those tweets.       

1079
00:43:39,584 --> 00:43:40,917
That's what I do.               

1080
00:43:41,251 --> 00:43:44,354
All right, and I'm gonna do     
that by populating this part    

1081
00:43:44,356 --> 00:43:46,522
of my model over                
here to show them.              

1082
00:43:46,524 --> 00:43:50,226
So what do I need to do         
if the searchText is set?       

1083
00:43:50,228 --> 00:43:53,062
So I need to do some didSet     
here, so the public model,      

1084
00:43:53,064 --> 00:43:55,598
if something sets it,           
I have to react well to it.     

1085
00:43:55,600 --> 00:43:58,468
I mean, one thing that I'm      
gonna wanna do is remove        

1086
00:43:58,470 --> 00:44:01,104
all the tweets that             
are already in my table.        

1087
00:44:01,106 --> 00:44:04,440
And when I remove those         
from my model up here,          

1088
00:44:04,442 --> 00:44:06,609
I need to tell the table        
view about it.                  

1089
00:44:06,611 --> 00:44:09,212
So I'm gonna have the           
tableView.reloadData(), which   

1090
00:44:09,214 --> 00:44:12,482
is the hammer, which is okay,   
because I removed everything,   

1091
00:44:12,484 --> 00:44:14,617
so the hammer's gonna           
be pretty light,                

1092
00:44:14,619 --> 00:44:15,618
a little ball-peen hammer.      

1093
00:44:15,620 --> 00:44:17,887
Okay, just going to             
clear the table out, so         

1094
00:44:17,889 --> 00:44:20,723
tha's perfectly                 
fine in this case.              

1095
00:44:21,358 --> 00:44:21,624
What else do I need to do?      

1096
00:44:21,626 --> 00:44:23,926
Well, I, now I need             
to search for tweets.           

1097
00:44:23,928 --> 00:44:27,563
So I have to write a function   
to do that to search for        

1098
00:44:27,565 --> 00:44:27,864
some tweet.                     

1099
00:44:27,866 --> 00:44:31,300
I'm also gonna set my title     
equal to the searchText.        

1100
00:44:31,302 --> 00:44:33,536
That way if I happen to be in   
a navigation controller or      

1101
00:44:33,538 --> 00:44:36,305
something like that, it'll      
show whatever I'm searching     

1102
00:44:36,307 --> 00:44:39,308
for, #stanford or               
whatever at the top, so         

1103
00:44:39,310 --> 00:44:43,613
I'll just make my               
UI look nice there.             

1104
00:44:44,314 --> 00:44:44,480
All right, so                   

1105
00:44:44,482 --> 00:44:48,384
we got to do this private       
func searchForTweets.           

1106
00:44:49,720 --> 00:44:51,921
Okay, so this is the thing      
that needs to go off and        

1107
00:44:51,923 --> 00:44:56,859
find these tweets, and so       
we'll do that in a moment.      

1108
00:44:56,861 --> 00:44:59,762
One thing I'm also gonna do     
is I'm gonna do viewDidLoad,    

1109
00:44:59,764 --> 00:45:00,430
just for testing purposes.      

1110
00:45:00,432 --> 00:45:03,833
You notice I do this a lot      
when I'm developing, and        

1111
00:45:03,835 --> 00:45:04,901
I wanna have some testing,      

1112
00:45:04,903 --> 00:45:07,103
I'm gonna just set my           
model to something.             

1113
00:45:07,105 --> 00:45:10,973
So we'll do #stanford,          
okay, just for testing.         

1114
00:45:10,975 --> 00:45:12,308
Once we're got                  
our MVC working,                

1115
00:45:12,310 --> 00:45:16,412
its public API is working,      
then we will remove this code.  

1116
00:45:16,414 --> 00:45:17,914
It's just testing code.         

1117
00:45:18,182 --> 00:45:19,949
Okay, now,                      
we have an error here.          

1118
00:45:19,951 --> 00:45:24,153
And this error is Swift         
saying excuse me.               

1119
00:45:24,155 --> 00:45:25,755
What is tweet?                  

1120
00:45:26,790 --> 00:45:27,824
What is that type?              

1121
00:45:27,826 --> 00:45:31,127
And I didn't really want you    
to be wasting your time in      

1122
00:45:31,129 --> 00:45:34,130
your homework figuring          
out how to go fetch             

1123
00:45:34,132 --> 00:45:37,200
a tweet from Twitter and        
do a request and all that.      

1124
00:45:37,202 --> 00:45:40,636
So I wrote a framework          
that did it for you.            

1125
00:45:40,638 --> 00:45:43,239
And by framework,               
I mean a framework like this.   

1126
00:45:43,241 --> 00:45:46,809
Like UIKit, right, UIKit is     
this like library of a whole    

1127
00:45:46,811 --> 00:45:49,479
bunch of data structures that   
you can use to build your app.  

1128
00:45:49,481 --> 00:45:53,149
Well, I wrote one for you that  
will do Twitter stuff for it.   

1129
00:45:53,151 --> 00:45:54,617
And it has something            
in it called tweet.             

1130
00:45:54,619 --> 00:45:56,953
And it also has something       
called request that lets        

1131
00:45:56,955 --> 00:45:58,654
you make a Twitter request.     

1132
00:45:58,656 --> 00:46:02,258
All right, so                   
that thing is right over here.  

1133
00:46:02,260 --> 00:46:05,161
Now, how do frameworks work?    

1134
00:46:05,163 --> 00:46:08,164
How do you use them when        
they're not built into          

1135
00:46:08,166 --> 00:46:08,998
the system like Apple?          

1136
00:46:09,000 --> 00:46:13,936
And the answer is, you need to  
build a higher level structure  

1137
00:46:13,938 --> 00:46:17,039
for Xcode to work with          
called a workspace.             

1138
00:46:17,041 --> 00:46:20,710
So I'm actually gonna           
close this project.             

1139
00:46:20,712 --> 00:46:21,511
I'm closing this project.       

1140
00:46:21,513 --> 00:46:24,514
And I'm going to Xcode, and     
I'm gonna create a new thing,   

1141
00:46:24,516 --> 00:46:28,184
which you've never seen         
before, called a workspace.     

1142
00:46:28,352 --> 00:46:29,685
Now when I create               
this workspace,                 

1143
00:46:29,687 --> 00:46:31,053
it wants to know                
where to put it.                

1144
00:46:31,055 --> 00:46:31,621
Be careful here, look,          

1145
00:46:31,623 --> 00:46:34,290
it's trying to put it           
inside my Smashtag project,     

1146
00:46:34,292 --> 00:46:35,158
which I don't wanna do that.    

1147
00:46:35,160 --> 00:46:39,028
I wanna put it up the top       
of my Developer level here,     

1148
00:46:39,030 --> 00:46:40,830
same place I put all            
of my projects, okay,           

1149
00:46:40,832 --> 00:46:42,498
so really be                    
careful about that.             

1150
00:46:42,500 --> 00:46:46,002
So I'm gonna call this L9,      
this is lecture 9, so           

1151
00:46:46,004 --> 00:46:46,636
we'll call it L9.               

1152
00:46:46,638 --> 00:46:48,905
And I hit Save, and             
this created this workspace.    

1153
00:46:48,907 --> 00:46:52,341
But notice in the navigator,    
there's nothing there.          

1154
00:46:52,709 --> 00:46:54,043
So what do we put               
in a workspace?                 

1155
00:46:54,045 --> 00:46:56,879
Well, what we put in a          
workspace are other projects.   

1156
00:46:56,881 --> 00:46:59,682
And this workspace is just      
gonna collect all those         

1157
00:46:59,684 --> 00:47:01,450
projects, because they          
kind of go together.            

1158
00:47:01,452 --> 00:47:04,787
And obviously, this Twitter     
framework that I'm providing    

1159
00:47:04,789 --> 00:47:07,190
to you right here goes          
together with Smashtag,         

1160
00:47:07,192 --> 00:47:10,593
which is this thing we've       
been working on so far.         

1161
00:47:10,595 --> 00:47:13,696
Now what you drag down in       
here is the .xcodeproj,         

1162
00:47:13,698 --> 00:47:17,867
because it's the project        
itself that you wanna put in    

1163
00:47:17,869 --> 00:47:18,534
this workspace.                 

1164
00:47:18,536 --> 00:47:20,870
So you just drag that in for    
both of them, so                

1165
00:47:20,872 --> 00:47:22,572
I'm gonna open                  
this one as well.               

1166
00:47:22,574 --> 00:47:25,575
Here's the Xcode project for    
this Twitter thing.             

1167
00:47:25,577 --> 00:47:28,211
Drag in, now be careful         
not to put it inside,           

1168
00:47:28,213 --> 00:47:31,547
see how that's trying to put    
it inside Smashtag there?       

1169
00:47:31,549 --> 00:47:34,116
Put it outside, so              
that they're siblings.          

1170
00:47:34,118 --> 00:47:37,320
Now I have this workspace       
right here that has two         

1171
00:47:37,322 --> 00:47:42,158
projects in it, and you even    
go here and hide others.        

1172
00:47:42,160 --> 00:47:44,961
And if we look in the Smashtag  
one, woo, looks familiar.       

1173
00:47:44,963 --> 00:47:48,297
This is the code we were        
just working on, right?         

1174
00:47:48,299 --> 00:47:49,732
If we look in the Twitter one,  

1175
00:47:49,734 --> 00:47:51,601
this is the code I              
am providing you.               

1176
00:47:51,603 --> 00:47:52,835
Now, what's in here?            

1177
00:47:52,837 --> 00:47:54,871
Here's tweet which              
is this struct and              

1178
00:47:54,873 --> 00:47:57,840
it's got all the things you     
would expect in a tweet.        

1179
00:47:57,842 --> 00:48:00,276
The text of the tweet,          
the user who created it,        

1180
00:48:00,278 --> 00:48:02,078
which is another thing,         
user right here,                

1181
00:48:02,080 --> 00:48:04,981
and the user has a screen name  
that's at sign something,       

1182
00:48:04,983 --> 00:48:08,251
the actual name, a unique       
identifier for the user.        

1183
00:48:08,253 --> 00:48:11,687
Back to tweet, it's also        
got a unique identifier.        

1184
00:48:11,689 --> 00:48:15,358
It's also got things that       
are embedded in the tweet like  

1185
00:48:15,360 --> 00:48:15,791
other hashtags and              

1186
00:48:15,793 --> 00:48:18,327
other users that are            
referenced inside the tweet.    

1187
00:48:18,329 --> 00:48:20,329
And even media cuz you          
know a lot of times             

1188
00:48:20,331 --> 00:48:22,698
tweets have an image            
with them too.                  

1189
00:48:22,700 --> 00:48:25,167
And the other thing that's of   
importance in this Twitter      

1190
00:48:25,169 --> 00:48:27,970
framework that I'm giving       
you is this class Request,      

1191
00:48:27,972 --> 00:48:29,038
Twitter Request right here.     

1192
00:48:29,040 --> 00:48:34,110
And this Request class is the   
thing you use to make requests  

1193
00:48:34,112 --> 00:48:34,343
for Twitter.                    

1194
00:48:34,345 --> 00:48:38,247
Now, you don't need to look     
at any of the implementation    

1195
00:48:38,249 --> 00:48:41,150
of any of this, and             
in fact, you can go and         

1196
00:48:41,152 --> 00:48:42,952
do assistant editor.            

1197
00:48:42,954 --> 00:48:45,955
And if you do assistant editor  
on something like this,         

1198
00:48:45,957 --> 00:48:49,425
you're actually gonna           
see its public API here.        

1199
00:48:49,427 --> 00:48:52,028
See all those public,           
public public, public,          

1200
00:48:52,030 --> 00:48:56,499
public; now we have not seen    
this public keyword before,     

1201
00:48:56,501 --> 00:48:59,568
all we've seen is private or    
fileprivate.                    

1202
00:48:59,570 --> 00:49:01,604
So what does this               
public thing mean?              

1203
00:49:01,606 --> 00:49:05,541
Look, I put public in all       
this these things over here.    

1204
00:49:05,543 --> 00:49:08,911
Public means that not only      
is it not private but           

1205
00:49:08,913 --> 00:49:12,248
you can see it even if this     
framework is being used by      

1206
00:49:12,250 --> 00:49:13,382
some other project.             

1207
00:49:13,384 --> 00:49:18,354
So public means public outside  
of this framework, right,       

1208
00:49:18,356 --> 00:49:18,387
make sense?                     

1209
00:49:18,389 --> 00:49:20,489
So in UIKit a lot of            
things are marked public.       

1210
00:49:20,491 --> 00:49:22,658
All the things you can use      
have to be marked public cuz    

1211
00:49:22,660 --> 00:49:24,393
it's in a different             
framework than your app.        

1212
00:49:24,395 --> 00:49:29,665
Your app is kind of             
a framework, in a sense, so     

1213
00:49:29,667 --> 00:49:29,799
that's public.                  

1214
00:49:29,801 --> 00:49:31,400
And then,                       
also notice farther down,       

1215
00:49:31,402 --> 00:49:33,903
these methods are marked        
internal; that means I can      

1216
00:49:33,905 --> 00:49:37,540
only use them inside my         
framework, so I can't call any  

1217
00:49:37,542 --> 00:49:40,509
of these methods from           
Smashtag, they're internal.     

1218
00:49:40,511 --> 00:49:43,245
This actually, you haven't      
seen this keyword because       

1219
00:49:43,247 --> 00:49:46,248
it's the default, all the       
methods you've ever created     

1220
00:49:46,250 --> 00:49:50,619
that you didn't mark private    
or fileprivate are internal.    

1221
00:49:50,621 --> 00:49:51,187
It's the default, so            

1222
00:49:51,189 --> 00:49:55,024
you haven't put the word        
internal there, okay.           

1223
00:49:55,026 --> 00:49:55,858
So, let's look at               
the public API.                 

1224
00:49:55,860 --> 00:49:58,394
Let's not even pay any          
attention to that, and          

1225
00:49:58,396 --> 00:49:59,362
look at the public API.         

1226
00:49:59,364 --> 00:50:02,498
This public API of Request,     
for making requests,            

1227
00:50:02,500 --> 00:50:04,333
we're only going to             
use three things.               

1228
00:50:04,335 --> 00:50:06,635
One is this convenience         
initializer                     

1229
00:50:06,637 --> 00:50:09,572
where you just give it          
something to search for and     

1230
00:50:09,574 --> 00:50:11,140
how many results you want.      

1231
00:50:11,142 --> 00:50:13,843
And then this method            
fetchTweets where you just      

1232
00:50:13,845 --> 00:50:17,213
give it this closure which      
it will call when it's done.    

1233
00:50:17,215 --> 00:50:19,749
It's gonna go off and           
do it on another thread and     

1234
00:50:19,751 --> 00:50:21,050
when it's done it will call.    

1235
00:50:21,052 --> 00:50:24,053
And that's going to have an     
array of the tweets it found    

1236
00:50:24,055 --> 00:50:26,155
that match your search.         

1237
00:50:26,157 --> 00:50:26,255
what we're gonna use is this    
one down here, newer where if   

1238
00:50:26,257 --> 00:50:28,958
And then last,                  

1239
00:50:28,960 --> 00:50:31,027
you ask it a request,           
give me a newer request.        

1240
00:50:31,029 --> 00:50:34,864
It'll give your request that    
you can use to get newer        

1241
00:50:34,866 --> 00:50:34,897
tweets.                         

1242
00:50:34,899 --> 00:50:36,265
Tweets that have                
been tweeted after              

1243
00:50:36,267 --> 00:50:38,100
the previous one                
that you've got.                

1244
00:50:38,102 --> 00:50:38,934
So, that's all we're            
gonna use here.                 

1245
00:50:38,936 --> 00:50:42,438
We're not really gonna          
use any of the other API        

1246
00:50:42,440 --> 00:50:42,772
in this request.                

1247
00:50:42,774 --> 00:50:45,541
In your homework, you'll have   
to know this API here of        

1248
00:50:45,543 --> 00:50:47,810
Tweet cause you'll have to      
be able to get the text and     

1249
00:50:47,812 --> 00:50:50,880
the user information and        
also MediaItems so              

1250
00:50:50,882 --> 00:50:56,018
you can get the URLs of images  
that are in there, etc.         

1251
00:50:56,020 --> 00:50:58,287
But you never have to look at   
the private implementation of   

1252
00:50:58,289 --> 00:51:01,090
this framework so don't even    
waste your time looking there.  

1253
00:51:01,092 --> 00:51:02,792
Just look at things             
marked public,                  

1254
00:51:02,794 --> 00:51:06,695
there's not a lot of things     
marked public- that's the only  

1255
00:51:06,697 --> 00:51:08,898
thing you're going              
to look for.                    

1256
00:51:08,900 --> 00:51:11,500
Now how do I use                
this framework,                 

1257
00:51:11,502 --> 00:51:14,270
this Twitter framework          
in Smashtag?                    

1258
00:51:14,272 --> 00:51:15,371
Well, you have to do one step.  

1259
00:51:15,373 --> 00:51:18,374
You can't just put them         
in the same workspace and       

1260
00:51:18,376 --> 00:51:18,908
start working.                  

1261
00:51:18,910 --> 00:51:22,978
Well, two steps, one is I       
need to say import Twitter.     

1262
00:51:22,980 --> 00:51:25,714
Just like I say import UIKit,   
if I want to use this Twitter   

1263
00:51:25,716 --> 00:51:28,117
framework up here I have        
to say import Twitter.          

1264
00:51:28,119 --> 00:51:30,553
That's gonna cause this         
tweet to start being            

1265
00:51:30,555 --> 00:51:33,656
recognized as a type            
because it's gonna see this     

1266
00:51:33,658 --> 00:51:35,291
tweet type right over here.     

1267
00:51:35,293 --> 00:51:38,828
But the other important thing,  
don't forget,                   

1268
00:51:38,830 --> 00:51:43,833
is you need to tell Xcode that  
when you build Smashtag that    

1269
00:51:43,835 --> 00:51:46,068
app includes Twitter in it.     

1270
00:51:46,070 --> 00:51:50,239
And you do that by going to     
the Smashtag project, okay,     

1271
00:51:50,241 --> 00:51:50,606
the project settings.           

1272
00:51:50,608 --> 00:51:52,675
And go all the way to           
the bottom where it says        

1273
00:51:52,677 --> 00:51:53,609
Embedded Binaries.              

1274
00:51:53,611 --> 00:51:58,013
And just pick up the product    
of your Twitter framework.      

1275
00:51:58,015 --> 00:51:59,415
You see where it says           
Products right here?            

1276
00:51:59,417 --> 00:52:03,619
Just pick that up and drag      
it in here, and that says,      

1277
00:52:03,621 --> 00:52:08,224
please put Twitter              
framework into my Smashtag,     

1278
00:52:08,226 --> 00:52:08,924
because my Smashtag uses it.    

1279
00:52:08,926 --> 00:52:11,560
If you don't do this step,      
then it'll all compile but      

1280
00:52:11,562 --> 00:52:14,663
then when Smashtag runs,        
Twitter won't be there, and     

1281
00:52:14,665 --> 00:52:15,965
so it will fail.                

1282
00:52:17,434 --> 00:52:19,635
Now, I'm gonna make you         
do that step as part of         

1283
00:52:19,637 --> 00:52:20,035
your homework.                  

1284
00:52:20,037 --> 00:52:22,771
I will post this code for       
Smashtag, but                   

1285
00:52:22,773 --> 00:52:25,074
I'm not gonna post              
the workspace, so               

1286
00:52:25,076 --> 00:52:29,245
you're gonna have to build      
the workspace on your own.      

1287
00:52:29,247 --> 00:52:29,979
All right, so let's continue.   

1288
00:52:29,981 --> 00:52:31,914
Now that we've got              
this array of tweets,           

1289
00:52:31,916 --> 00:52:34,216
what are we gonna do with       
this array of tweets?           

1290
00:52:34,218 --> 00:52:39,922
Let's start by doing a fetch    
for our search text.            

1291
00:52:39,924 --> 00:52:40,789
So we got our search text,      

1292
00:52:40,791 --> 00:52:42,925
we wanna go fetch all           
those things on there.          

1293
00:52:42,927 --> 00:52:45,995
That's what we're supposed      
to do in search for tweets.     

1294
00:52:46,196 --> 00:52:47,429
Let's make another              
function here,                  

1295
00:52:47,431 --> 00:52:49,231
another little private func.    

1296
00:52:49,233 --> 00:52:51,867
I'm gonna call it               
twitterRequest,                 

1297
00:52:51,869 --> 00:52:55,304
which is gonna return           
a Twitter.Request.              

1298
00:52:55,306 --> 00:52:56,772
But yeah,                       
here's another thing.           

1299
00:52:56,774 --> 00:52:59,675
This I can call tweet because   
I'm importing this Twitter      

1300
00:52:59,677 --> 00:53:02,978
framework and there's no        
other class called tweet, so    

1301
00:53:02,980 --> 00:53:03,846
i just have to call it tweet.   

1302
00:53:03,848 --> 00:53:07,016
Its full name is                
actually Twitter.Tweet.         

1303
00:53:07,018 --> 00:53:10,686
Just like, you know,            
UITableViewController,          

1304
00:53:10,688 --> 00:53:14,323
it's full name is               
UIKit.UITableViewController.    

1305
00:53:14,325 --> 00:53:14,390
use Twitter.Tweet because I     
think in Assignment 5, you      

1306
00:53:14,392 --> 00:53:17,059
Now i'm gonna                   

1307
00:53:17,061 --> 00:53:20,696
might end up wanting to have    
you own local tweet class.      

1308
00:53:20,698 --> 00:53:21,897
So I'm gonna use                
Twitter.Tweet and               

1309
00:53:21,899 --> 00:53:24,833
Twitter.Request everywhere but  
I wouldn't have to as long as   

1310
00:53:24,835 --> 00:53:27,536
I didn't have a class called    
Tweet or Request otherwise.     

1311
00:53:27,538 --> 00:53:30,573
But this is a pretty generic    
name request so putting         

1312
00:53:30,575 --> 00:53:35,644
the Twitter dot on front might  
be kind of a good idea anyway.  

1313
00:53:36,313 --> 00:53:36,512
All right so                    

1314
00:53:36,514 --> 00:53:39,215
the Twitter.Request function    
here is just going to return    

1315
00:53:39,217 --> 00:53:43,586
a Twitter request that          
matches this search text.       

1316
00:53:43,588 --> 00:53:44,386
And that's really,              
really simple,                  

1317
00:53:44,388 --> 00:53:47,656
I'm just gonna say,             
if I can let the query for      

1318
00:53:47,658 --> 00:53:50,292
the search term equal           
the search text.                

1319
00:53:50,294 --> 00:53:53,829
And I wanna make sure that      
that query is not empty.        

1320
00:53:53,831 --> 00:53:57,766
So I don't wanna search for     
nil or for the empty string.    

1321
00:53:57,768 --> 00:54:00,269
So I'm just keeping that        
out of it right here.           

1322
00:54:00,271 --> 00:54:03,038
And otherwise I'm just gonna    
return a Twitter request using  

1323
00:54:03,040 --> 00:54:07,042
that convenient initializer I   
told you about called Search.   

1324
00:54:07,277 --> 00:54:10,379
And I'm just gonna              
pass that query and,            

1325
00:54:10,381 --> 00:54:11,614
well let's get 100 of them.     

1326
00:54:11,616 --> 00:54:15,351
Okay, so we're gonna, we'll     
grab 100 tweets at a time.      

1327
00:54:15,819 --> 00:54:19,121
And if that's not true,         
if the search term is nil or    

1328
00:54:19,123 --> 00:54:22,424
it's empty, then I'm gonna      
return nil from this.           

1329
00:54:22,426 --> 00:54:25,628
So let's make this be,          
you know, optional.             

1330
00:54:25,962 --> 00:54:27,429
Okay, so everyone understand    
what this function does?        

1331
00:54:27,431 --> 00:54:30,933
It just makes a Twitter         
request that will search for    

1332
00:54:30,935 --> 00:54:34,169
our searchText,                 
that's all it does.             

1333
00:54:34,171 --> 00:54:35,337
So now down here in             
searchForTweets,                

1334
00:54:35,339 --> 00:54:40,676
I can say if I can let request  
equal the twitterRequest,       

1335
00:54:40,678 --> 00:54:42,444
which hopefully it can make.    

1336
00:54:42,446 --> 00:54:44,980
Okay, now I have a request.     

1337
00:54:44,982 --> 00:54:49,652
Now I just need to cause        
that request to happen.         

1338
00:54:49,654 --> 00:54:57,593
So I'm just gonna say this      
Twitter request.fetchTweets.    

1339
00:54:57,595 --> 00:55:01,864
So this fetchTweets function    
right there, you see it?        

1340
00:55:01,866 --> 00:55:02,698
The top one, okay,              

1341
00:55:02,700 --> 00:55:06,402
it takes this closure           
right here as an argument.      

1342
00:55:06,404 --> 00:55:10,005
I'm gonna double click on it,   
to show what it does here.      

1343
00:55:10,007 --> 00:55:13,742
I'm going to use trailing       
closure syntax to get rid of    

1344
00:55:13,744 --> 00:55:15,878
the parentheses there.          

1345
00:55:15,880 --> 00:55:16,245
Now what's this?                

1346
00:55:16,247 --> 00:55:18,781
This is the only                
argument in my closure.         

1347
00:55:18,783 --> 00:55:21,116
Those are the tweets            
that it fetched.                

1348
00:55:21,118 --> 00:55:22,718
See it's an array of tweets.    

1349
00:55:22,720 --> 00:55:23,252
I'll call this newTweets.       

1350
00:55:23,254 --> 00:55:25,421
Okay, so that's going to        
be an array of tweets,          

1351
00:55:25,423 --> 00:55:28,957
I don't even need the           
parentheses here by the way.    

1352
00:55:28,959 --> 00:55:29,091
So I have newTweets.            

1353
00:55:29,093 --> 00:55:31,794
So newTweets is gonna be        
an array of Tweet that it       

1354
00:55:31,796 --> 00:55:32,728
fetched; now, of course,        

1355
00:55:32,730 --> 00:55:34,863
it's doing this off             
the main queue, right?          

1356
00:55:34,865 --> 00:55:37,199
It's gotta go do that           
Twitter request,                

1357
00:55:37,201 --> 00:55:39,101
what if it's a really           
slow network?                   

1358
00:55:39,103 --> 00:55:42,371
Or Twitter is really slow       
that time or whatever.          

1359
00:55:42,373 --> 00:55:42,438
I finally got these new tweets  
back, what do I wanna do?       

1360
00:55:42,440 --> 00:55:45,407
So inside here,                 

1361
00:55:45,409 --> 00:55:49,812
Well I just want to add them    
on to the end of my model,      

1362
00:55:49,814 --> 00:55:50,012
Here's my model, it's           
an array of array of tweets.    

1363
00:55:50,014 --> 00:55:53,315
right?                          

1364
00:55:53,317 --> 00:55:57,986
Here's an array, so I'm just    
going to take my model, and     

1365
00:55:57,988 --> 00:56:01,056
append onto it this             
array of tweets.                

1366
00:56:01,058 --> 00:56:04,560
And actually, I'm not gonna     
append it on the end because    

1367
00:56:04,562 --> 00:56:07,930
I want all my new tweets to     
show up at the beginning,       

1368
00:56:07,932 --> 00:56:10,099
so in section zero              
at the beginning, so            

1369
00:56:10,101 --> 00:56:13,836
I'm gonna insert these new      
tweets at 0 in my array.        

1370
00:56:13,838 --> 00:56:14,536
So right at the top.            

1371
00:56:14,538 --> 00:56:17,573
So my new tweets are gonna      
come in at the top.             

1372
00:56:18,341 --> 00:56:18,707
Make sense?                     

1373
00:56:18,709 --> 00:56:20,042
Now, we have an error there.    

1374
00:56:20,044 --> 00:56:23,779
Can anyone guess why this       
error is here before I          

1375
00:56:23,781 --> 00:56:24,346
open it?                        

1376
00:56:24,348 --> 00:56:24,747
>> Mutating.                    

1377
00:56:24,749 --> 00:56:26,849
>> What?                        
>> Yeah, mutating.              

1378
00:56:26,851 --> 00:56:27,282
>> Mutating.                    

1379
00:56:27,284 --> 00:56:28,317
That's a good guess but no.     

1380
00:56:28,319 --> 00:56:34,189
It's because self, it's         
the old closure cycle problem,  

1381
00:56:34,191 --> 00:56:34,690
right?                          

1382
00:56:34,692 --> 00:56:36,558
Since we're                     
accessing self here,            

1383
00:56:36,560 --> 00:56:38,394
these tweets as                 
part of our self.               

1384
00:56:38,396 --> 00:56:40,529
We need to explicitly           
say that so                     

1385
00:56:40,531 --> 00:56:43,599
that we can notice,             
we might have a memory cycle.   

1386
00:56:43,601 --> 00:56:46,235
And do we have                  
a memory cycle here?            

1387
00:56:46,237 --> 00:56:47,469
In fact we do.                  

1388
00:56:47,471 --> 00:56:50,172
Because what if this view       
controller goes off to          

1389
00:56:50,174 --> 00:56:52,207
fetch some tweets and           
it takes forever.               

1390
00:56:52,209 --> 00:56:56,011
And so the person says, I'll    
search for something else.      

1391
00:56:56,013 --> 00:56:58,414
Now they said the search        
text is on the else and         

1392
00:56:58,416 --> 00:56:59,248
another fetch goes off.         

1393
00:56:59,250 --> 00:57:02,651
And now here comes the first    
fetch and it's irrelevant now   

1394
00:57:02,653 --> 00:57:04,486
because I already looked for    
something else.                 

1395
00:57:04,488 --> 00:57:07,556
So we do here,                  
want to be careful to ignore    

1396
00:57:07,558 --> 00:57:11,293
this when it comes back and we  
also, if someone searches and   

1397
00:57:11,295 --> 00:57:14,096
it's taking forever and they    
hit back, we want our view      

1398
00:57:14,098 --> 00:57:16,799
controllers to be able          
to leave memory as well.        

1399
00:57:16,801 --> 00:57:18,534
So we don't want the closure,   
the cycle here,                 

1400
00:57:18,536 --> 00:57:20,869
we don't want this closure      
holding our self in memory.     

1401
00:57:20,871 --> 00:57:23,505
So we don't want this to        
be a strong pointer and         

1402
00:57:23,507 --> 00:57:26,842
we need to check to make        
sure that when we get back,     

1403
00:57:26,844 --> 00:57:29,077
it's still what                 
we're interested in.            

1404
00:57:29,079 --> 00:57:30,813
So how can we                   
break this cycle?               

1405
00:57:30,815 --> 00:57:30,846
We're just gonna use our        
friend weak self, okay?         

1406
00:57:30,848 --> 00:57:34,983
That's easy.                    

1407
00:57:34,985 --> 00:57:36,885
And that turns this             
into an optional.               

1408
00:57:36,887 --> 00:57:38,620
So we added a question mark.    

1409
00:57:38,622 --> 00:57:39,288
Boom, we broke that cycle.      

1410
00:57:39,290 --> 00:57:41,256
So even if this fetch is        
sitting out there fetching,     

1411
00:57:41,258 --> 00:57:43,425
it's not gonna be keeping our   
view controller in memory.      

1412
00:57:43,427 --> 00:57:45,527
Our view control can            
leave memory, and               

1413
00:57:45,529 --> 00:57:45,661
if it comes back and            

1414
00:57:45,663 --> 00:57:48,730
it's gone, then this line       
of code will not execute.       

1415
00:57:48,732 --> 00:57:51,834
How about dealing with the      
fact that our request might     

1416
00:57:51,836 --> 00:57:53,135
have changed?                   

1417
00:57:53,137 --> 00:57:53,802
Well, to do that,               

1418
00:57:53,804 --> 00:57:58,106
I'm gonna have to keep track    
of our lastTwitterRequest,      

1419
00:57:58,108 --> 00:58:02,211
actually we've got to           
put it inside here.             

1420
00:58:03,246 --> 00:58:07,282
Okay, I'm gonna keep            
track of it, and                

1421
00:58:07,284 --> 00:58:12,488
then in here I'm not going      
to do this unless our           

1422
00:58:12,490 --> 00:58:16,859
request equals                  
the lastTwitterRequest.         

1423
00:58:16,861 --> 00:58:20,229
So if this request that came    
back is not the last one we     

1424
00:58:20,231 --> 00:58:22,130
issued, then I'm                
not gonna do it.                

1425
00:58:22,132 --> 00:58:23,966
And so let me go up here and    

1426
00:58:23,968 --> 00:58:27,135
say private var                 
lastTwitterRequest and          

1427
00:58:27,137 --> 00:58:32,040
that's going to be              
a Twitter.Request of course.    

1428
00:58:32,042 --> 00:58:37,145
Request, optional,              
is not always set.              

1429
00:58:37,147 --> 00:58:38,680
Everyone kinda see              
what I'm doing there?           

1430
00:58:38,682 --> 00:58:41,416
And of course this is saying    
self again, so we'll put self   

1431
00:58:41,418 --> 00:58:44,920
in there and of course self     
is weak so we'll do that.       

1432
00:58:45,455 --> 00:58:46,054
So that's all good.             

1433
00:58:46,056 --> 00:58:48,357
Any other problems you          
can see with this?              

1434
00:58:48,359 --> 00:58:51,493
I don't see any so far.         

1435
00:58:51,828 --> 00:58:52,528
So it's all good.               
So,                             

1436
00:58:52,530 --> 00:58:54,129
before we go hooking            
up our table view,              

1437
00:58:54,131 --> 00:58:58,200
let's just make sure that our   
Twitter fetches are working.    

1438
00:58:58,202 --> 00:59:01,003
And I'm gonna do that           
by putting a didSet             

1439
00:59:01,005 --> 00:59:05,140
up here on my model, and        
every time my model changes,    

1440
00:59:05,142 --> 00:59:07,643
I'm just gonna print            
the tweets out.                 

1441
00:59:07,645 --> 00:59:08,911
Now luckily I've made it so     

1442
00:59:08,913 --> 00:59:11,346
the tweet is                    
CustomStringConvertible,        

1443
00:59:11,348 --> 00:59:12,781
it implements description.      

1444
00:59:12,783 --> 00:59:14,750
It can print itself             
as a string so                  

1445
00:59:14,752 --> 00:59:15,784
this is an array of those.      

1446
00:59:15,786 --> 00:59:18,420
So this will print out          
an array, actually an array     

1447
00:59:18,422 --> 00:59:21,290
of an array of this tweet       
printed out as a string.        

1448
00:59:21,292 --> 00:59:25,494
So we're just gonna             
print it out there.             

1449
00:59:25,496 --> 00:59:26,828
Just seems like                 
it should work?                 

1450
00:59:26,830 --> 00:59:30,232
Let's go give it a try and      
find out.                       

1451
00:59:30,234 --> 00:59:33,068
We'll do this on iPhone 7.      

1452
00:59:36,172 --> 00:59:38,006
Pay attention right             
now because this                

1453
00:59:38,008 --> 00:59:39,541
is not in fact going to work.   

1454
00:59:39,543 --> 00:59:42,010
And this won't work for you     
either and you're gonna need    

1455
00:59:42,012 --> 00:59:45,581
to do a couple of things to     
make a Twitter fetch work.      

1456
00:59:45,715 --> 00:59:48,884
By the way you see we have      
these prototype cells that      

1457
00:59:48,886 --> 00:59:52,588
have to have reuse              
identifiers; gotta remember to  

1458
00:59:52,590 --> 00:59:54,122
fix that later.                 

1459
00:59:54,124 --> 00:59:59,728
Alright, so we run, and look    
at this thing it puts up here,  

1460
00:59:59,730 --> 01:00:01,797
Smashtag would like to          
access Twitter accounts.        

1461
01:00:01,799 --> 01:00:03,999
So you're not allowed to        
write an app that just starts   

1462
01:00:04,001 --> 01:00:06,768
posting things for people on    
Twitter behind the scenes.      

1463
01:00:06,770 --> 01:00:10,539
Okay, when you write an app     
it is always going to ask,      

1464
01:00:10,541 --> 01:00:13,508
the first time you try to use   
Twitter, whether it's allowed.  

1465
01:00:13,510 --> 01:00:18,013
So I'll click okay, and let's   
go look in our console and      

1466
01:00:18,015 --> 01:00:19,214
see if it printed.              

1467
01:00:20,116 --> 01:00:23,151
It didn't, all it printed out   
here is, couldn't discover      

1468
01:00:23,153 --> 01:00:26,488
Twitter account type, hm,       
why would it say that?          

1469
01:00:26,490 --> 01:00:29,825
Well, that's because your       
simulator, it's just a device,  

1470
01:00:29,827 --> 01:00:33,295
it needs to have Twitter,       
a Twitter account, basically,   

1471
01:00:33,297 --> 01:00:34,896
your device needs               
a Twitter account, so           

1472
01:00:34,898 --> 01:00:35,497
where do we set that?           

1473
01:00:35,499 --> 01:00:37,165
So let's go back                
to our simulator,               

1474
01:00:37,167 --> 01:00:41,903
here it is, I'm gonna go        
hardware, home button, okay,    

1475
01:00:41,905 --> 01:00:43,805
you can also do command,        
shift, F.                       

1476
01:00:43,807 --> 01:00:44,072
Is hardware home button.        

1477
01:00:44,074 --> 01:00:48,543
And I'm gonna go over to the    
Settings app on my simulator.   

1478
01:00:48,545 --> 01:00:50,445
But you can do it on            
your device as well.            

1479
01:00:50,447 --> 01:00:53,649
And if you go down in           
settings, here's Twitter.       

1480
01:00:53,651 --> 01:00:54,383
Look at that.                   

1481
01:00:54,385 --> 01:00:54,750
Twitter right there.            

1482
01:00:54,752 --> 01:00:56,518
And here's where                
you type in your                

1483
01:00:56,520 --> 01:00:57,686
Twitter username and password.  

1484
01:00:57,688 --> 01:00:58,820
And if you don't type this in,  

1485
01:00:58,822 --> 01:01:02,257
then no apps on your            
system can access Twitter.      

1486
01:01:02,259 --> 01:01:04,860
Cuz how would they- they'd      
have to know who you are.       

1487
01:01:04,862 --> 01:01:07,863
So I'm gonna type this here,    
I'm gonna do it off screen cuz  

1488
01:01:07,865 --> 01:01:10,666
I don't want you to             
see my password.                

1489
01:01:10,668 --> 01:01:14,269
So now I am logged              
in on Twitter.                  

1490
01:01:14,604 --> 01:01:17,139
So now if I go back and         
start my app                    

1491
01:01:17,740 --> 01:01:21,276
It will both be in allowed      
because I clicked OK.           

1492
01:01:21,278 --> 01:01:22,811
And I'll be logged in so        

1493
01:01:22,813 --> 01:01:24,946
it'll have an actual Twitter    
user that can do it.            

1494
01:01:24,948 --> 01:01:26,581
And sure enough,                
look down here at the bottom.   

1495
01:01:26,583 --> 01:01:30,686
We're getting all kinds of      
tweets being printed out here.  

1496
01:01:30,688 --> 01:01:31,820
So here's a tweet.              

1497
01:01:31,822 --> 01:01:33,922
Here's its unique ID.           

1498
01:01:33,924 --> 01:01:36,024
Here's the person               
who tweeted it.                 

1499
01:01:36,026 --> 01:01:37,859
Here's when it was tweeted.     

1500
01:01:37,861 --> 01:01:40,862
Here is the text of the tweet.  

1501
01:01:40,864 --> 01:01:43,899
This one's got                  
an embedded URL, etc.           

1502
01:01:43,901 --> 01:01:44,900
So we're doing well.            

1503
01:01:44,902 --> 01:01:46,635
We've got our                   
tweets coming in.               

1504
01:01:46,637 --> 01:01:50,238
So now all we need to do        
is load them up into our        

1505
01:01:50,240 --> 01:01:50,439
table view.                     

1506
01:01:50,441 --> 01:01:53,141
So what do we need to do        
to load this thing up in        

1507
01:01:53,143 --> 01:01:53,275
the table view?                 

1508
01:01:53,277 --> 01:01:56,645
Now, surprisingly simple        
actually, the two pieces we     

1509
01:01:56,647 --> 01:02:00,048
have to do, one is every time   
we change our model we have     

1510
01:02:00,050 --> 01:02:03,418
to tell the table view that     
it changed and then we have     

1511
01:02:03,420 --> 01:02:07,155
to implement those table        
view data source methods.       

1512
01:02:07,157 --> 01:02:08,256
So let's start with             
the first one.                  

1513
01:02:08,258 --> 01:02:11,893
Actually we have already        
changed our model once.         

1514
01:02:11,895 --> 01:02:13,895
Right here,                     
we changed our model and        

1515
01:02:13,897 --> 01:02:17,265
we told the table view          
about it, so that's good.       

1516
01:02:17,267 --> 01:02:19,034
Here we're changing our model.  

1517
01:02:19,036 --> 01:02:22,604
So we need to tell              
the table view about it.        

1518
01:02:22,606 --> 01:02:25,340
So self?.tableView.             

1519
01:02:25,342 --> 01:02:26,908
And what did I do               
here to my model?               

1520
01:02:26,910 --> 01:02:29,544
I just inserted a section       
at the beginning.               

1521
01:02:29,546 --> 01:02:34,449
So there happens to be          
a tableView method called       

1522
01:02:34,451 --> 01:02:35,450
insertSection.                  

1523
01:02:35,452 --> 01:02:38,019
And it just says,               
you inserted some sections.     

1524
01:02:38,021 --> 01:02:38,553
Which ones?                     

1525
01:02:38,555 --> 01:02:38,620
ask you about those and         
put the rows in there for you.  

1526
01:02:38,622 --> 01:02:41,957
I will go and                   

1527
01:02:41,959 --> 01:02:43,892
And this sections               
is an index set,                

1528
01:02:43,894 --> 01:02:46,628
which you can give              
it an array literal.            

1529
01:02:46,630 --> 01:02:48,630
So I just inserted              
section zero.                   

1530
01:02:48,632 --> 01:02:51,199
So I'll just put an array       
with just zero in it.           

1531
01:02:51,201 --> 01:02:54,102
And I'm gonna use               
the fade animation              

1532
01:02:54,104 --> 01:02:56,138
to show that fading in.         

1533
01:02:57,607 --> 01:02:58,306
So, insertSections.             

1534
01:02:58,308 --> 01:03:02,310
So, this is me telling the      
tableView, I changed my model,  

1535
01:03:02,312 --> 01:03:03,545
so ask me again.                

1536
01:03:03,547 --> 01:03:04,546
Ask me those tableView          
data source.                    

1537
01:03:04,548 --> 01:03:07,282
Now, since I told it exactly    
what I did it's only gonna ask  

1538
01:03:07,284 --> 01:03:10,352
me about that section, which    
is nice, higher performance.    

1539
01:03:10,354 --> 01:03:12,254
Then reloadData,                
the hammer reloadData,          

1540
01:03:12,256 --> 01:03:15,157
in which case it would ask me   
for all rows in all sections    

1541
01:03:15,159 --> 01:03:19,427
again; so here I know           
exactly what I did.             

1542
01:03:19,429 --> 01:03:23,298
Now this actually is            
dangerous code here.            

1543
01:03:23,300 --> 01:03:25,634
This is really easy to          
add this line of code and       

1544
01:03:25,636 --> 01:03:27,302
now your app just acts weird.   

1545
01:03:27,304 --> 01:03:29,404
It just acts weird              
all the time.                   

1546
01:03:29,406 --> 01:03:31,973
Can anyone, want,               
guess why this                  

1547
01:03:31,975 --> 01:03:36,144
adding this line of code would  
cause my app to go all weird?   

1548
01:03:36,779 --> 01:03:41,449
It's because this               
is a UI call.                   

1549
01:03:41,451 --> 01:03:45,353
And what queue are we on here?  

1550
01:03:45,355 --> 01:03:46,555
Some queue,                     
not the main queue.             

1551
01:03:46,557 --> 01:03:49,925
Whatever queue we fetched       
those tweets on, okay?          

1552
01:03:49,927 --> 01:03:51,359
So we're not on                 
the main queue.                 

1553
01:03:51,361 --> 01:03:53,628
So we can't make                
a UI call here.                 

1554
01:03:53,630 --> 01:04:00,035
Right, so we have to dispatch   
this back to the main queue.    

1555
01:04:01,270 --> 01:04:02,204
So this is something that,      

1556
01:04:02,206 --> 01:04:04,005
will just take some             
getting used to for             

1557
01:04:04,007 --> 01:04:05,307
you guys with this              
multithreading,                 

1558
01:04:05,309 --> 01:04:07,809
cuz you're gonna do these       
things in this other queue,     

1559
01:04:07,811 --> 01:04:10,245
and you're gonna update         
your table view, and then       

1560
01:04:10,247 --> 01:04:13,381
it's like what's going on my    
app is just acting so strange.  

1561
01:04:13,383 --> 01:04:15,150
And that's why-                 
because you can do              

1562
01:04:15,152 --> 01:04:16,084
UI stuff on the main queue.     

1563
01:04:16,086 --> 01:04:18,186
And it's not gonna warn you or  
necessarily crash,              

1564
01:04:18,188 --> 01:04:21,556
it might eventually crash,      
it's just gonna act all weird.  

1565
01:04:21,558 --> 01:04:26,728
So, fixed that.                 

1566
01:04:26,730 --> 01:04:26,962
This is good.                   

1567
01:04:26,964 --> 01:04:28,930
We've got the table view        
updating our model and we've    

1568
01:04:28,932 --> 01:04:31,366
got the table view knowing      
about change to the model.      

1569
01:04:31,368 --> 01:04:34,436
So now all we need to           
do is implement this            

1570
01:04:34,438 --> 01:04:37,873
UITableViewDataSource protocol  
so                              

1571
01:04:37,875 --> 01:04:41,610
that it can get                 
the data from us.               

1572
01:04:41,612 --> 01:04:41,877
So let's do it.                 

1573
01:04:41,879 --> 01:04:47,449
Number of sections, how many    
sections are in our table?      

1574
01:04:47,451 --> 01:04:49,784
Anyone know?                    

1575
01:04:51,120 --> 01:04:53,321
Yeah.                           

1576
01:04:53,323 --> 01:04:57,559
Exactly, candy thrown at you    
cuz that's exactly right.       

1577
01:04:57,561 --> 01:04:58,159
tweets.count.                   

1578
01:04:58,161 --> 01:05:02,230
It's just the number of arrays  
that we have in our model here  

1579
01:05:02,232 --> 01:05:07,269
because each of this arrays     
inside here are a section, so   

1580
01:05:07,271 --> 01:05:07,802
perfect.                        

1581
01:05:07,804 --> 01:05:09,905
And then what about this one?   

1582
01:05:09,907 --> 01:05:15,043
Here we're being asked how      
many rows are there in tweets   

1583
01:05:15,045 --> 01:05:16,444
subsection?                     

1584
01:05:16,446 --> 01:05:20,215
That's just count also.         

1585
01:05:20,750 --> 01:05:22,584
So we've designed our           
data structure so               

1586
01:05:22,586 --> 01:05:24,185
that these are super            
easy to implement,              

1587
01:05:24,187 --> 01:05:26,288
which I highly recommend        
if you can do it.               

1588
01:05:26,290 --> 01:05:27,155
You can't always do it.         

1589
01:05:27,157 --> 01:05:28,757
But if you can it's nice.       

1590
01:05:28,759 --> 01:05:31,493
So now a little more            
difficult, only a little        

1591
01:05:31,495 --> 01:05:34,462
though, is cellForRowAt         
index path right here.          

1592
01:05:34,464 --> 01:05:37,966
So here's where we have to      
return the UITableViewCell      

1593
01:05:37,968 --> 01:05:39,401
that we're gonna use to draw.   

1594
01:05:39,403 --> 01:05:43,271
Now, let's go back to           
our Storyboard here and         

1595
01:05:43,273 --> 01:05:47,375
let's just start out            
with something simple.          

1596
01:05:47,377 --> 01:05:50,779
Let's try using here            
a subtitle cell.                

1597
01:05:50,781 --> 01:05:52,047
So I'm gonna click              
on this cell.                   

1598
01:05:52,049 --> 01:05:55,116
And will change its             
style from being custom         

1599
01:05:55,118 --> 01:05:56,084
to being subtitle.              

1600
01:05:56,086 --> 01:05:56,484
So there's title and subtitle.  

1601
01:05:56,486 --> 01:05:59,955
And I'm gonna set the title to  
be the text with the tweet.     

1602
01:05:59,957 --> 01:06:01,289
And I'm gonna set the subtitle  

1603
01:06:01,291 --> 01:06:03,525
to be the person                
who tweeted it.                 

1604
01:06:04,493 --> 01:06:07,262
So let's try that and           
see how that looks.             

1605
01:06:07,264 --> 01:06:08,897
So how am I gonna do that?      

1606
01:06:08,899 --> 01:06:10,265
Two things I need to do here.   

1607
01:06:10,267 --> 01:06:13,101
One is I need to dequeue        
a reusable cell, and            

1608
01:06:13,103 --> 01:06:18,573
I to tell iOS which             
prototype to use,               

1609
01:06:18,575 --> 01:06:19,908
which prototype in              
the Storyboard.                 

1610
01:06:19,910 --> 01:06:22,677
So lets go back to              
our Storyboard.                 

1611
01:06:22,679 --> 01:06:24,446
And I only have one prototype.  

1612
01:06:24,448 --> 01:06:24,946
It's this one.                  

1613
01:06:24,948 --> 01:06:26,181
That's the one I wanna use.     

1614
01:06:26,183 --> 01:06:27,949
So I need to give               
it an identifier.               

1615
01:06:27,951 --> 01:06:29,017
I'm gonna call it Tweet,        

1616
01:06:29,019 --> 01:06:31,886
because that's what             
this cell shows.                

1617
01:06:31,888 --> 01:06:32,320
It shows a tweet.               

1618
01:06:32,322 --> 01:06:34,656
Notice that caused my           
warning to go away.             

1619
01:06:34,658 --> 01:06:36,324
Because all these               
prototype cells                 

1620
01:06:36,326 --> 01:06:38,093
always need an identifier.      

1621
01:06:38,095 --> 01:06:39,060
And now when I go back here,    

1622
01:06:39,062 --> 01:06:42,597
I can change this from          
reuseIdentifier to Tweet.       

1623
01:06:42,599 --> 01:06:46,267
Okay, so now, I am able         
to dequeueReusableCell          

1624
01:06:46,269 --> 01:06:49,104
that will be a copy of that     
prototype that's subtitled.     

1625
01:06:49,106 --> 01:06:52,741
So all my rows are gonna        
be subtitle rows.               

1626
01:06:53,009 --> 01:06:54,142
So now I've got this cell,      

1627
01:06:54,144 --> 01:06:56,478
it's of type                    
UITableViewCell by the way,     

1628
01:06:56,480 --> 01:06:59,214
since it's a standard           
type not a custom type.         

1629
01:06:59,216 --> 01:06:59,514
How do I configure it?          

1630
01:06:59,516 --> 01:07:02,684
Well, for me to configure the   
cells, to set the title and     

1631
01:07:02,686 --> 01:07:02,717
I need to know which Tweet      
it's asking me for here.        

1632
01:07:02,719 --> 01:07:06,688
the subtitle,                   

1633
01:07:06,690 --> 01:07:09,124
And I know which Tweet          
it's asking because it's        

1634
01:07:09,126 --> 01:07:10,825
saying cellForRowAt.            

1635
01:07:10,827 --> 01:07:15,030
This is the row that's          
the tweet that is asking        

1636
01:07:15,032 --> 01:07:19,434
me to give it                   
a UITableViewCell for.          

1637
01:07:19,436 --> 01:07:24,472
So I'm gonna let tweet equal    

1638
01:07:24,474 --> 01:07:31,613
my model sub                    
indexPath.section and           

1639
01:07:31,615 --> 01:07:34,549
indexPath.row.                  

1640
01:07:34,551 --> 01:07:37,452
So I'm just getting this        
row in this section,            

1641
01:07:37,454 --> 01:07:40,488
this gets the first array,      
the section,                    

1642
01:07:40,490 --> 01:07:41,589
I'm just getting                
the row out of it.              

1643
01:07:41,591 --> 01:07:45,727
So now I got the tweet, so      
now I can just update the cell  

1644
01:07:45,729 --> 01:07:50,698
really easily, cell.textLabel.  

1645
01:07:50,700 --> 01:07:52,934
It might be an optional         
?.text equals,                  

1646
01:07:52,936 --> 01:07:55,537
let's have that be              
the tweet's text.               

1647
01:07:55,539 --> 01:07:58,940
This is something that          
you'll see in here, we go to    

1648
01:07:58,942 --> 01:08:02,510
the Twitter, and look for the   
Twitter framework at Tweet,     

1649
01:08:02,512 --> 01:08:05,980
and you'll see that the very    
first one in fact, is text.     

1650
01:08:05,982 --> 01:08:09,884
And then we'll make this        
cell detailTextLabel,           

1651
01:08:09,886 --> 01:08:14,789
its text will be the tweet's    
user's name, let's say.         

1652
01:08:14,791 --> 01:08:19,260
So again, Tweet,                
user, username.                 

1653
01:08:19,262 --> 01:08:23,665
So, that's why I'm              
getting that information.       

1654
01:08:23,667 --> 01:08:24,866
Do you understand that?         

1655
01:08:24,868 --> 01:08:26,067
Part of it, okay?               

1656
01:08:26,069 --> 01:08:28,169
So, that I'll came              
out of this Tweet.              

1657
01:08:28,171 --> 01:08:31,272
This is of type Tweet.          

1658
01:08:34,343 --> 01:08:34,809
Everybody got that?             

1659
01:08:34,811 --> 01:08:38,813
All right, so is that it?       

1660
01:08:38,815 --> 01:08:43,251
Do we need to do anything else  
to hook this thing up and       

1661
01:08:43,253 --> 01:08:44,119
make it work?                   

1662
01:08:44,121 --> 01:08:46,421
Turns out no.                   

1663
01:08:46,423 --> 01:08:47,956
So let's just run.              

1664
01:08:50,993 --> 01:08:52,227
Okay, there it is.              

1665
01:08:52,229 --> 01:08:54,929
The world's greatest            
Twitter client.                 

1666
01:08:54,931 --> 01:08:55,430
Look at that.                   

1667
01:08:55,432 --> 01:08:56,965
It looks beautiful.             

1668
01:08:57,533 --> 01:08:57,665
No, of course, in fact,         

1669
01:08:57,667 --> 01:09:00,969
this is the world's ugliest     
Twitter client right here.      

1670
01:09:00,971 --> 01:09:01,970
But it is working.              

1671
01:09:01,972 --> 01:09:02,670
These are tweets.               

1672
01:09:02,672 --> 01:09:05,206
But anyway, you can see         
here's the tweets and           

1673
01:09:05,208 --> 01:09:09,110
here are the person             
who tweeted it.                 

1674
01:09:09,578 --> 01:09:12,714
Now obviously,                  
this is awful UI.               

1675
01:09:12,716 --> 01:09:13,581
Just absolutely horrendous UI.  

1676
01:09:13,583 --> 01:09:15,817
You would never have            
a Twitter client like this.     

1677
01:09:15,819 --> 01:09:19,154
We want our UI in these         
cells to look much nicer,       

1678
01:09:19,156 --> 01:09:21,156
much more customized            
to a tweet.                     

1679
01:09:21,158 --> 01:09:23,625
So we're gonna go back          
to our Storyboard here.         

1680
01:09:23,627 --> 01:09:28,163
And instead of using this       
awful subtitle style cell,      

1681
01:09:28,165 --> 01:09:29,430
we're gonna build               
a custom cell.                  

1682
01:09:29,432 --> 01:09:34,269
And this custom cell is gonna   
have more good looking and      

1683
01:09:34,271 --> 01:09:38,072
more of the data that           
comes with a Tweet.             

1684
01:09:38,074 --> 01:09:38,573
So let's just build it.         

1685
01:09:38,575 --> 01:09:42,510
Let's go here and make this a   
little bigger, make some room.  

1686
01:09:42,512 --> 01:09:44,445
All right, I'm gonna grab       
some labels out of here.        

1687
01:09:44,447 --> 01:09:47,282
There's a label,                
this will maybe be,             

1688
01:09:47,284 --> 01:09:48,650
let's say this is the Tweeter.  

1689
01:09:48,652 --> 01:09:50,652
This is the person              
who's doing the Tweet.          

1690
01:09:50,654 --> 01:09:54,622
By the way, this is a case      
where we're showing user        

1691
01:09:54,624 --> 01:09:55,557
content really.                 

1692
01:09:55,559 --> 01:09:56,491
These tweets are content.       

1693
01:09:56,493 --> 01:09:58,526
They're not like the title      
of a button or something,       

1694
01:09:58,528 --> 01:10:02,330
it's actually the content that  
the user has requested to see.  

1695
01:10:02,332 --> 01:10:04,098
So I'm gonna use a font here.   

1696
01:10:04,100 --> 01:10:04,566
You see this font?              

1697
01:10:04,568 --> 01:10:05,700
I'm not gonna use               
the system font.                

1698
01:10:05,702 --> 01:10:09,170
I'm going to go down and        
start using this text styles.   

1699
01:10:09,172 --> 01:10:12,006
So the Tweeter is going         
to be at the top.               

1700
01:10:12,008 --> 01:10:14,542
I'm gonna have that             
be a headline font.             

1701
01:10:14,544 --> 01:10:16,211
So this is gonna be             
the headline font and           

1702
01:10:16,213 --> 01:10:19,214
this could change over time,    
okay, whatever the system       

1703
01:10:19,216 --> 01:10:21,849
thinks headline font is and     
it'll be true in every app.     

1704
01:10:21,851 --> 01:10:25,153
The headline will always be     
using this font in every app    

1705
01:10:25,155 --> 01:10:27,589
and users could even            
go into settings and            

1706
01:10:27,591 --> 01:10:29,557
change the size                 
of their fonts.                 

1707
01:10:29,559 --> 01:10:30,158
If they're like me and          

1708
01:10:30,160 --> 01:10:32,961
they're visions going           
they can set them bigger.       

1709
01:10:32,963 --> 01:10:36,231
And the fonts will get          
bigger automatically so         

1710
01:10:36,233 --> 01:10:40,568
ther's big advantage to         
using these font styles.        

1711
01:10:40,570 --> 01:10:41,769
So there's that one.            

1712
01:10:41,771 --> 01:10:44,505
There is the text of            
the tweet itself, so            

1713
01:10:44,507 --> 01:10:46,441
we'll just call that text.      

1714
01:10:46,443 --> 01:10:46,507
maybe a good font is body font  
because this is really, this    

1715
01:10:46,509 --> 01:10:49,711
For this one,                   

1716
01:10:49,713 --> 01:10:52,180
is the heart of what we're      
doing here, this body thing.    

1717
01:10:52,182 --> 01:10:55,083
One thing that's kinda cool     
with UILabel, the text          

1718
01:10:55,085 --> 01:10:57,785
in the tweet is probably        
gonna be multiple lines, and    

1719
01:10:57,787 --> 01:10:58,553
it's gonna wrap.                

1720
01:10:58,555 --> 01:11:00,388
When you have a UI              
label like that,                

1721
01:11:00,390 --> 01:11:04,659
you wanna set this              
property lines to be zero.      

1722
01:11:04,661 --> 01:11:08,229
If you have zero predefined     
lines then the UILabel          

1723
01:11:08,231 --> 01:11:11,499
will be however many            
lines it needs to be fit        

1724
01:11:11,501 --> 01:11:14,102
the information with wrapping.  

1725
01:11:14,104 --> 01:11:17,272
Whereas this one is line        
one this all one line.          

1726
01:11:17,274 --> 01:11:22,076
And if it's too long it just    
gets dot dot dot at the end,    

1727
01:11:22,078 --> 01:11:22,610
all right?                      

1728
01:11:22,612 --> 01:11:23,544
What else do I wanna do here?   

1729
01:11:23,546 --> 01:11:25,413
Let's do another                
label here for                  

1730
01:11:25,415 --> 01:11:29,050
when the tweet was tweeted      
out, when it was created.       

1731
01:11:29,052 --> 01:11:33,521
That one is probably something  
like a caption, we'll say.      

1732
01:11:33,523 --> 01:11:35,657
Small little text               
at the bottom.                  

1733
01:11:35,659 --> 01:11:39,494
We'll go ahead and              
center than right there.        

1734
01:11:39,496 --> 01:11:40,828
Let's also get an image.        

1735
01:11:40,830 --> 01:11:43,531
Let's go down and               
find the image view down here.  

1736
01:11:43,533 --> 01:11:44,432
Where is our image view?        

1737
01:11:44,434 --> 01:11:44,632
Here it is.                     

1738
01:11:44,634 --> 01:11:47,635
Drag it out here.               
This is gonna be the profile    

1739
01:11:47,637 --> 01:11:48,736
image of the Tweeter.           

1740
01:11:48,738 --> 01:11:52,607
So whoever tweeted this will    
have their little image here.   

1741
01:11:53,042 --> 01:11:53,474
This one, by the way,           

1742
01:11:53,476 --> 01:11:56,778
I don't know how big profile    
images are on Twitter.          

1743
01:11:56,780 --> 01:11:59,847
And I don't care because        
I'm gonna make this thing       

1744
01:11:59,849 --> 01:12:01,082
always be a fixed size.         

1745
01:12:01,084 --> 01:12:04,919
So how do we make an image      
like this be a fixed size       

1746
01:12:04,921 --> 01:12:04,952
using auto layout?              

1747
01:12:04,954 --> 01:12:09,457
And it turns out what you do    
is you Ctrl+Drag to itself.     

1748
01:12:09,459 --> 01:12:09,924
And when you do,                

1749
01:12:09,926 --> 01:12:13,695
you'll see that you have        
the option to fix its width.    

1750
01:12:13,697 --> 01:12:16,230
And you can Ctrl+Drag,          
and fix its height.             

1751
01:12:16,232 --> 01:12:17,832
You can also to both            
at the same time.               

1752
01:12:17,834 --> 01:12:20,301
And, so what width and          
height has it fixed it to?      

1753
01:12:20,303 --> 01:12:22,937
Well, we can look over here     
in the size inspector,          

1754
01:12:22,939 --> 01:12:24,872
and see that it's               
fixed it to 71 by 67.           

1755
01:12:24,874 --> 01:12:30,178
That doesn't sound very         
computer science-y,             

1756
01:12:30,180 --> 01:12:33,815
I'm gonna fix it to 64 by 64.   

1757
01:12:33,817 --> 01:12:34,415
So I've made it so              

1758
01:12:34,417 --> 01:12:37,185
this image view is always       
gonna be 64 by 64.              

1759
01:12:37,187 --> 01:12:40,588
I don't care how big the        
person's actual profile image   

1760
01:12:40,590 --> 01:12:41,723
is, I always want               
it to be that way.              

1761
01:12:41,725 --> 01:12:44,125
Okay, so there's another        
little auto layout              

1762
01:12:44,127 --> 01:12:45,426
tidbit for you.                 

1763
01:12:45,861 --> 01:12:46,094
speaking of auto layouts,       
I need to lay this stuff out.   

1764
01:12:46,096 --> 01:12:48,830
All right, so                   

1765
01:12:48,832 --> 01:12:52,233
I kinda want it to look,        
eh, something like this.        

1766
01:12:52,235 --> 01:12:52,667
See what I mean?                

1767
01:12:52,669 --> 01:12:55,236
Approximately, and so           
I'm just gonna use stack view.  

1768
01:12:55,238 --> 01:13:00,575
So we'll stack those two        
things together, like that.     

1769
01:13:00,577 --> 01:13:02,310
Look at our things here,        
fill and fill.                  

1770
01:13:02,312 --> 01:13:04,312
That's perfectly fine.          

1771
01:13:04,314 --> 01:13:05,913
Let's go over here.             

1772
01:13:05,915 --> 01:13:07,048
Let's stack those together.     

1773
01:13:07,050 --> 01:13:08,616
That's fill and fill.           

1774
01:13:08,618 --> 01:13:11,352
One thing about these two,      
by the way, they're gonna be    

1775
01:13:11,354 --> 01:13:15,656
sharing the space in            
this stack view equally.        

1776
01:13:15,658 --> 01:13:18,393
But I don't want them           
sharing equally.                

1777
01:13:18,395 --> 01:13:23,231
I actually want the text        
to get more of this space.      

1778
01:13:23,233 --> 01:13:25,933
So I'm gonna click              
on the Tweeter.                 

1779
01:13:25,935 --> 01:13:28,269
And I'm gonna go over           
to this size inspector.         

1780
01:13:28,271 --> 01:13:29,437
And I'm gonna do                
something cool,                 

1781
01:13:29,439 --> 01:13:31,739
which is set its content        
hugging priority.               

1782
01:13:31,741 --> 01:13:34,142
I'm gonna set its               
vertical content                

1783
01:13:34,144 --> 01:13:37,378
hugging priority to be          
higher than the other one.      

1784
01:13:37,380 --> 01:13:37,678
So they're both 251.            

1785
01:13:37,680 --> 01:13:40,415
You see, that one's 251,        
that one's 251.                 

1786
01:13:40,417 --> 01:13:42,383
So I'm gonna set                
this one to be 300,             

1787
01:13:42,385 --> 01:13:43,317
just anything higher than 251.  

1788
01:13:43,319 --> 01:13:46,854
And that means that when        
the space is being allocated    

1789
01:13:46,856 --> 01:13:47,355
between this tweeter and        

1790
01:13:47,357 --> 01:13:51,426
the text, it's gonna hug        
the tweeter's content.          

1791
01:13:51,428 --> 01:13:54,362
And the text is gonna           
get all the rest.               

1792
01:13:54,364 --> 01:13:55,296
So that's a way                 
that you can kinda,             

1793
01:13:55,298 --> 01:13:58,733
when you're sharing space       
between two things.             

1794
01:13:58,735 --> 01:14:02,203
All right, so now let's         
put these two in a stack.       

1795
01:14:02,205 --> 01:14:06,941
Maybe we'll put some spacing    
here, something like that.      

1796
01:14:06,943 --> 01:14:09,977
Alignment here, top is good,    
I want them both at the top.    

1797
01:14:09,979 --> 01:14:13,114
I think that's good,            
lined up at the top.            

1798
01:14:13,116 --> 01:14:16,417
If I like that and              
fill is fine, I've got this.    

1799
01:14:16,419 --> 01:14:18,152
Now I'm gonna do the same       
thing we did before,            

1800
01:14:18,154 --> 01:14:20,521
which is I'm gonna put          
this in the corner.             

1801
01:14:20,523 --> 01:14:23,491
And I'm gonna Ctrl              
drag to the top.                

1802
01:14:23,493 --> 01:14:27,061
I'm gonna Ctrl drag             
to the leading edge.            

1803
01:14:27,063 --> 01:14:30,097
I'm gonna Ctrl drag             
to the trailing edge.           

1804
01:14:30,099 --> 01:14:33,367
And I'm gonna Ctrl drag         
to the bottom edge.             

1805
01:14:33,369 --> 01:14:34,402
So I want that out there.       

1806
01:14:34,404 --> 01:14:34,969
And again, the same thing.      

1807
01:14:34,971 --> 01:14:39,040
I'm gonna take this and change  
it to standard if I can.        

1808
01:14:39,042 --> 01:14:40,374
I can't, so we'll go 0.         

1809
01:14:40,376 --> 01:14:42,443
And same thing here.            

1810
01:14:42,611 --> 01:14:46,881
Standard if I can,              
can't, we'll do 0.              

1811
01:14:46,883 --> 01:14:49,951
So I've made this stock         
view that contains all          

1812
01:14:49,953 --> 01:14:50,585
the stuff fit in there.         

1813
01:14:50,587 --> 01:14:55,423
So I basically done the auto    
layout necessary to make this   

1814
01:14:55,425 --> 01:14:57,592
thing use the space properly.   

1815
01:14:57,594 --> 01:15:00,461
And I can still change the      
size of the cell, all right?    

1816
01:15:00,463 --> 01:15:04,031
I can click on it and I can     
make it a little bit smaller    

1817
01:15:04,033 --> 01:15:05,700
and all that stuff is           
going to, you know,             

1818
01:15:05,702 --> 01:15:07,902
stick to the edges,             
so that'll be fine.             

1819
01:15:07,904 --> 01:15:08,669
Now, this is great,             

1820
01:15:08,671 --> 01:15:12,039
in fact if we go back to our    
table view controller and       

1821
01:15:12,041 --> 01:15:15,943
if I comment out this cell      
configuration because we don't  

1822
01:15:15,945 --> 01:15:19,714
have a subtitle so these don't  
make any sense any more.        

1823
01:15:19,716 --> 01:15:23,384
And we run, then we gonna       
see that our UI hopefully,      

1824
01:15:23,386 --> 01:15:26,220
if we didn't forget anything.   

1825
01:15:26,655 --> 01:15:30,024
It's going to look in some      
ways a little better.           

1826
01:15:30,026 --> 01:15:31,025
Yeah, so                        
it kinda looks better.          

1827
01:15:31,027 --> 01:15:34,362
Now, the only thing that's not  
better is we lost our data      

1828
01:15:34,364 --> 01:15:37,732
because I commented out         
the data loading right here.    

1829
01:15:37,734 --> 01:15:41,202
So this is what we want UI      
to look like basically with     

1830
01:15:41,204 --> 01:15:42,603
an image here and that there.   

1831
01:15:42,605 --> 01:15:44,972
But we need to set              
all this data.                  

1832
01:15:44,974 --> 01:15:45,506
So how do we that?              

1833
01:15:45,508 --> 01:15:48,242
Since this is a custom          
cell over here.                 

1834
01:15:48,244 --> 01:15:50,945
We have to do with              
a custom subclass               

1835
01:15:50,947 --> 01:15:53,214
of this UI table view           
cell right here.                

1836
01:15:53,216 --> 01:15:55,316
So, I'm gonna create            
one of those, New File.         

1837
01:15:55,318 --> 01:16:00,254
Let's go here and New File.     

1838
01:16:00,256 --> 01:16:02,557
Again, Cocoa Touch Class;       
this time though,               

1839
01:16:02,559 --> 01:16:06,193
it's not a TableViewController  
it's a TableViewCell.           

1840
01:16:06,195 --> 01:16:08,496
I'm gonna call it               
TweetTableViewCell cuz          

1841
01:16:08,498 --> 01:16:09,797
it shows the tweet,             

1842
01:16:09,799 --> 01:16:13,801
put in the same place as all    
the rest of my stuff there.     

1843
01:16:13,803 --> 01:16:16,571
Here's my table table view      
cell, it gives me awakeFromNib  

1844
01:16:16,573 --> 01:16:19,173
which is kinda nice but I       
don't need it and setSelected   

1845
01:16:19,175 --> 01:16:21,642
I don't do anything special     
when my table view cell is      

1846
01:16:21,644 --> 01:16:24,412
selected but I could, I could   
draw a blue background or       

1847
01:16:24,414 --> 01:16:27,615
something like that if          
I wanted, but I don't.          

1848
01:16:27,617 --> 01:16:29,850
So, I have this                 
TableViewCell subclass.         

1849
01:16:29,852 --> 01:16:31,752
I'm gonna go back to            
my Storyboard and               

1850
01:16:31,754 --> 01:16:34,722
make sure that I                
set the identity,               

1851
01:16:34,724 --> 01:16:36,123
don't forget this step.         

1852
01:16:36,125 --> 01:16:39,694
Set the identity to be          
a TweetTableViewCell.           

1853
01:16:39,696 --> 01:16:40,127
If you forget this step,        

1854
01:16:40,129 --> 01:16:43,464
you won't be able to do any     
outlets or anything like that.  

1855
01:16:44,066 --> 01:16:47,168
Now, I wanna wire outlets       
up to this new class I          

1856
01:16:47,170 --> 01:16:49,470
just created, so I need to      
get them both on screen,        

1857
01:16:49,472 --> 01:16:51,439
I'll show you kind of           
a cool way to do that.          

1858
01:16:51,441 --> 01:16:53,374
Let's get the assistant         
editor up here,                 

1859
01:16:53,376 --> 01:16:55,276
remember I could do manual,     
blah, blah, blah,               

1860
01:16:55,278 --> 01:16:58,479
but another way is to hold      
down the option key, and        

1861
01:16:58,481 --> 01:17:01,315
just click on the thing that    
you want to be on the right,    

1862
01:17:01,317 --> 01:17:03,618
I think I showed this before,   
but option                      

1863
01:17:03,620 --> 01:17:07,755
clicking in the navigator will  
put that thing on the right.    

1864
01:17:07,757 --> 01:17:11,959
All right so let's move this    
over more, some space there.    

1865
01:17:11,961 --> 01:17:14,095
All right, so I need to wire    
up outlets to these four        

1866
01:17:14,097 --> 01:17:16,597
things, right, the tweet or     
the text or the image.          

1867
01:17:16,599 --> 01:17:17,832
So let's just do that.          

1868
01:17:17,834 --> 01:17:18,566
We'll go here, Ctrl+drag,       

1869
01:17:18,568 --> 01:17:23,804
screen out, I'll call this my   
tweet, what did I call this,    

1870
01:17:23,806 --> 01:17:29,210
my tweetProfileImageView.       

1871
01:17:29,212 --> 01:17:31,712
Cuz it's gonna be               
a UIImageView that shows        

1872
01:17:31,714 --> 01:17:34,015
the Tweeter's profile.          

1873
01:17:34,017 --> 01:17:37,852
Let's do the little             
create down here,               

1874
01:17:37,854 --> 01:17:40,187
Ctrl+Drag, from that.           

1875
01:17:40,189 --> 01:17:43,524
We'll call that                 
tweetCreatedLabel.              

1876
01:17:43,526 --> 01:17:45,526
To label it.                    

1877
01:17:45,528 --> 01:17:49,463
Shows when it was created;      
let's do out little tweeter     

1878
01:17:49,465 --> 01:17:54,335
right here and we call          
that our tweetUserLabel,        

1879
01:17:54,337 --> 01:17:56,637
this is gonna show              
the label of the tweet          

1880
01:17:56,639 --> 01:17:59,640
user and then we have the text  
right here that's gonna show    

1881
01:17:59,642 --> 01:18:02,943
the actual tweetText,           
tweetTextLabel.                 

1882
01:18:05,514 --> 01:18:08,749
So I've got these nice          
little outlets right here.      

1883
01:18:08,751 --> 01:18:11,519
Now of course I need to be      
able to set these outlets with  

1884
01:18:11,521 --> 01:18:15,089
something and here's where      
I need public API in my         

1885
01:18:15,091 --> 01:18:18,893
table view cell, that gives me  
the data I need to do that.     

1886
01:18:18,895 --> 01:18:22,897
And I'm just going to have      
my public API be tweet,         

1887
01:18:22,899 --> 01:18:26,767
give me the Twitter.Tweet       
that you want and               

1888
01:18:26,769 --> 01:18:29,170
I'll load these babies up.      

1889
01:18:29,371 --> 01:18:30,104
That's what it's saying here.   

1890
01:18:30,106 --> 01:18:33,541
Of course we need               
to import Twitter.              

1891
01:18:33,775 --> 01:18:35,943
Cuz we're using                 
it in this class.               

1892
01:18:35,945 --> 01:18:39,780
And when you set this Tweet     
I'm just going to on didSet.    

1893
01:18:39,782 --> 01:18:42,049
Update my UI just like          
I was a controller but          

1894
01:18:42,051 --> 01:18:45,019
I'm not, I'm not a controller,  
I'm a view actually.            

1895
01:18:45,021 --> 01:18:48,656
It's the only time a view       
can have these outlets.         

1896
01:18:48,658 --> 01:18:54,095
So I need some private          
func to do that updateUI.       

1897
01:18:55,430 --> 01:18:59,066
Now, time is running            
a little bit short here, so     

1898
01:18:59,068 --> 01:19:01,902
I'm just going to type          
this in real quick              

1899
01:19:01,904 --> 01:19:04,071
I believe I have tweet cell.    

1900
01:19:04,073 --> 01:19:05,506
There it is, okay?              

1901
01:19:06,141 --> 01:19:06,741
But you can look                
at this later.                  

1902
01:19:06,743 --> 01:19:09,076
But I'm just basically          
setting all the outlets here.   

1903
01:19:09,078 --> 01:19:12,146
See how I'm just setting these  
outlets like setting the tweet  

1904
01:19:12,148 --> 01:19:14,181
label, text to be               
the tweet's text,               

1905
01:19:14,183 --> 01:19:17,118
setting the user label to       
be the user description.        

1906
01:19:17,120 --> 01:19:20,521
Notice by the way I'm blocking  
the main thread here.           

1907
01:19:21,456 --> 01:19:24,658
If this was my homework,        
bam I just got dinged.          

1908
01:19:24,660 --> 01:19:26,160
So make sure you fix this,      
okay?                           

1909
01:19:26,162 --> 01:19:29,830
If you're gonna use my code     
in any way in your homework,    

1910
01:19:29,832 --> 01:19:31,031
which you probably want to,     

1911
01:19:31,033 --> 01:19:33,634
then you're gonna               
wanna fix this.                 

1912
01:19:33,636 --> 01:19:35,002
Don't do this on                
the main thread.                

1913
01:19:35,004 --> 01:19:35,703
Don't block the main thread.    

1914
01:19:35,705 --> 01:19:38,139
But, does anyone understand     
what updateUI is doing here?    

1915
01:19:38,141 --> 01:19:40,508
It's just taking this           
Tweet that I was giving,        

1916
01:19:40,510 --> 01:19:41,842
and loading this up.            

1917
01:19:41,844 --> 01:19:43,577
And this is happening over and  
over for                        

1918
01:19:43,579 --> 01:19:46,447
every row in the table          
that gets displayed.            

1919
01:19:46,449 --> 01:19:50,050
This is happening, the copy of  
this class has been made and    

1920
01:19:50,052 --> 01:19:51,252
this is happening.              

1921
01:19:51,254 --> 01:19:52,453
Now, how do we set this?        

1922
01:19:52,455 --> 01:19:57,525
We set this back over here and  
our TweetTableViewController.   

1923
01:19:57,527 --> 01:20:01,929
In the same place that we       
configured the cell here for    

1924
01:20:01,931 --> 01:20:02,930
the subtitle one.               

1925
01:20:02,932 --> 01:20:06,367
And in fact, I still need the   
tweet, but I don't need that.   

1926
01:20:06,369 --> 01:20:07,234
I'll leave those there, so      

1927
01:20:07,236 --> 01:20:09,737
you can remember that code      
when you look at it later.      

1928
01:20:09,739 --> 01:20:12,706
But instead of setting          
those things, I just want       

1929
01:20:12,708 --> 01:20:16,377
to set that tweet, I wanna      
set this var right here.        

1930
01:20:16,379 --> 01:20:18,012
But for                         
me to set the var right here,   

1931
01:20:18,014 --> 01:20:20,681
I need to get my table          
view to be one of these.        

1932
01:20:20,683 --> 01:20:21,849
So, I need to use an as.        

1933
01:20:21,851 --> 01:20:23,517
So, I'm gonna say,              

1934
01:20:23,519 --> 01:20:27,488
if I can let the tweetCell      
equal the cell,                 

1935
01:20:27,490 --> 01:20:33,360
this reusable cell that I got,  
as a TweetTableViewCell,        

1936
01:20:33,362 --> 01:20:38,666
then, I can say, cell set       
your tweet to be my tweet.      

1937
01:20:38,668 --> 01:20:43,571
That goes in this row,          
section, and row.               

1938
01:20:43,573 --> 01:20:50,377
Now, we set the, what,          
sorry, tweetCell.tweet.         

1939
01:20:50,379 --> 01:20:54,548
We set the class of these,      
of this prototype right here,   

1940
01:20:54,550 --> 01:20:56,817
the prototype for this cell.    

1941
01:20:56,819 --> 01:20:58,118
We set it with the identity     

1942
01:20:58,120 --> 01:21:00,721
inspector to be                 
a TweetTableViewCell.           

1943
01:21:00,723 --> 01:21:03,290
So, when we come in here,       
it will, in fact,               

1944
01:21:03,292 --> 01:21:04,358
this as will work.              

1945
01:21:04,360 --> 01:21:06,927
Okay, it will be a              
TweetTableViewCell cuz we said  

1946
01:21:06,929 --> 01:21:11,165
that in the Storyboard, so,     
it created that kind of thing,  

1947
01:21:11,167 --> 01:21:11,565
all right?                      

1948
01:21:11,567 --> 01:21:13,634
So, let see if this works.      

1949
01:21:17,873 --> 01:21:18,739
Okay, it is working.            

1950
01:21:18,741 --> 01:21:21,876
Look, we've got the time        
the person tweeted this,        

1951
01:21:21,878 --> 01:21:23,544
it's got the person             
who tweeted it,                 

1952
01:21:23,546 --> 01:21:27,748
it's got the text of the        
tweeting, but we get no image.  

1953
01:21:27,750 --> 01:21:31,185
Why didn't we get               
people's images here?           

1954
01:21:31,187 --> 01:21:33,087
Okay, why do you think          
we didn't get these,            

1955
01:21:33,089 --> 01:21:34,355
these images?                   

1956
01:21:34,357 --> 01:21:37,157
Well, let's go look             
at our console.                 

1957
01:21:37,159 --> 01:21:38,792
What does it say?               

1958
01:21:38,794 --> 01:21:39,026
No!                             

1959
01:21:39,028 --> 01:21:40,594
App Transport Security.         

1960
01:21:40,596 --> 01:21:42,496
You recognize that              
from last time?                 

1961
01:21:42,498 --> 01:21:47,134
It's because these profiles     
are http something not          

1962
01:21:47,136 --> 01:21:48,435
https something.                

1963
01:21:48,437 --> 01:21:49,370
So, we know how to fix that.    

1964
01:21:49,372 --> 01:21:52,273
We'll just go back to           
Info.plist right here.          

1965
01:21:52,275 --> 01:21:55,743
And add a row for               
App Transport Security.         

1966
01:21:55,745 --> 01:22:00,247
We'll open that up, we'll       
add Arbitrary Loads here,       

1967
01:22:00,249 --> 01:22:04,752
we'll make that be, yes,        
we allow arbitrary loads.       

1968
01:22:04,754 --> 01:22:06,453
There's another                 
problem here though.            

1969
01:22:06,455 --> 01:22:07,588
Look at all these tweets.       

1970
01:22:07,590 --> 01:22:09,990
Look how they're cut off,       
you see?                        

1971
01:22:09,992 --> 01:22:14,395
Every row is the same size and  
it's not big enough for         

1972
01:22:14,397 --> 01:22:14,795
most of the tweets.             

1973
01:22:14,797 --> 01:22:16,597
It's just dot, dot,             
dot, dot, dot, dot.             

1974
01:22:16,599 --> 01:22:19,967
Wouldn't it be cool if these    
rows could be different sizes   

1975
01:22:19,969 --> 01:22:22,169
depending on how                
big the tweet is?               

1976
01:22:22,171 --> 01:22:24,204
Well, of course                 
we can do that.                 

1977
01:22:24,206 --> 01:22:24,571
Let's do it.                    

1978
01:22:24,573 --> 01:22:27,574
Let's go see how this size      
is being said right now.        

1979
01:22:27,576 --> 01:22:30,377
Right now, it's being said,     
if we go and                    

1980
01:22:30,379 --> 01:22:33,681
inspect this cell in its        
size inspector, look,           

1981
01:22:33,683 --> 01:22:37,451
the row height is 96, so,       
every single row is 96.         

1982
01:22:37,453 --> 01:22:42,022
What we wanna do is in our      
viewDidLoad right here,         

1983
01:22:42,024 --> 01:22:46,927
we wanna say that our           
tableView's row height is not   

1984
01:22:46,929 --> 01:22:51,165
96, it's                        
UITableViewAutomaticDimension.  

1985
01:22:51,167 --> 01:22:54,802
But as I said before, we also   
want to give it a little help   

1986
01:22:54,804 --> 01:22:58,839
by setting its estimated        
row height to something.        

1987
01:22:58,841 --> 01:22:59,139
And I'll tell you what,         

1988
01:22:59,141 --> 01:23:01,208
let's set it to what's          
in the Storyboard.              

1989
01:23:01,210 --> 01:23:03,677
tableView.rowHeight, okay?      

1990
01:23:03,679 --> 01:23:06,246
So, I'm getting the rowHeight   
out of the Storyboard,          

1991
01:23:06,248 --> 01:23:07,514
using it as the estimate.       

1992
01:23:07,516 --> 01:23:08,048
And then, I'm resetting         

1993
01:23:08,050 --> 01:23:10,918
the rowHeight to be             
the AutomaticDimension.         

1994
01:23:16,992 --> 01:23:18,092
And sure enough, see, look,     

1995
01:23:18,094 --> 01:23:19,727
this tall tweet is              
getting extra space and         

1996
01:23:19,729 --> 01:23:22,563
some of the smaller tweets,     
I don't know if we have any,    

1997
01:23:22,565 --> 01:23:24,832
you can probably see            
it if we go like this.          

1998
01:23:24,834 --> 01:23:29,903
The smaller tweets              
get less space, okay?           

1999
01:23:29,905 --> 01:23:30,704
So, that's good.                

2000
01:23:30,706 --> 01:23:34,041
We're out of time, so,          
if you have to go, feel free.   

2001
01:23:34,043 --> 01:23:36,910
The last thing I'm gonna do     
here in a little over time is   

2002
01:23:36,912 --> 01:23:39,346
add a text field at the top     
that lets us type in what       

2003
01:23:39,348 --> 01:23:42,683
we wanna search for instead of  
always looking for Stanford.    

2004
01:23:42,685 --> 01:23:45,853
So, we're gonna get Stanford    
out of there, okay?             

2005
01:23:45,855 --> 01:23:46,920
So, how do we do that?          

2006
01:23:46,922 --> 01:23:47,621
It's real easy.                 

2007
01:23:47,623 --> 01:23:48,389
We have, if you remember,       

2008
01:23:48,391 --> 01:23:51,325
the table view, it's got this   
little header view at the top.  

2009
01:23:51,327 --> 01:23:53,360
So, I'm just gonna              
take a UITextField.             

2010
01:23:53,362 --> 01:23:55,896
Remember this editable text     
field we learned about in       

2011
01:23:55,898 --> 01:23:56,330
the last lecture?               

2012
01:23:56,332 --> 01:23:57,498
And I'm gonna put               
it on the top.                  

2013
01:23:57,500 --> 01:24:00,367
It's a little hard, sometimes,  
to see where it's going,        

2014
01:24:00,369 --> 01:24:03,303
but when it looks like this,    
the width of the table, then,   

2015
01:24:03,305 --> 01:24:05,072
you've got it,                  
it's dropping it in there.      

2016
01:24:05,074 --> 01:24:07,608
It's also a little hard         
to select and click on.         

2017
01:24:07,610 --> 01:24:10,310
So, you're gonna wanna use      
that Ctrl + Shift + Click.      

2018
01:24:10,312 --> 01:24:12,646
And that way, you can pick      
either the controller, or       

2019
01:24:12,648 --> 01:24:15,382
the table view, or              
in this case, the text field.   

2020
01:24:15,384 --> 01:24:17,251
I'm gonna inspect it and        
change it a little bit.         

2021
01:24:17,253 --> 01:24:20,788
I'm just gonna make the font    
a little bit bigger,            

2022
01:24:20,790 --> 01:24:20,988
we'll say 22.                   

2023
01:24:20,990 --> 01:24:24,558
Now, notice I can also set all  
those text field things I was   

2024
01:24:24,560 --> 01:24:24,892
talking about.                  

2025
01:24:24,894 --> 01:24:26,560
Like, I don't want              
it auto-correcting.             

2026
01:24:26,562 --> 01:24:29,997
I don't wanna say, search for   
hashtag SuperBowl and           

2027
01:24:29,999 --> 01:24:32,800
change it hashtag               
SuperSpaceBowl, okay?           

2028
01:24:32,802 --> 01:24:34,802
So, I don't want any            
correction going on.            

2029
01:24:34,804 --> 01:24:36,003
Keyboard type, ooh, look,       

2030
01:24:36,005 --> 01:24:37,304
there's a Twitter               
keyboard type.                  

2031
01:24:37,306 --> 01:24:40,808
It's probably got # and         
@ sign, things like that.       

2032
01:24:40,810 --> 01:24:41,141
The return key,                 

2033
01:24:41,143 --> 01:24:43,911
that's just the key on          
the things says return.         

2034
01:24:43,913 --> 01:24:46,046
I'm searching here, so,         
I wanted to say search.         

2035
01:24:46,048 --> 01:24:49,550
So, that means the return       
keys gonna say, I'd search.     

2036
01:24:49,552 --> 01:24:51,652
Also, a little clear            
button would be cool,           

2037
01:24:51,654 --> 01:24:54,321
button you can press the clear  
out what's going on.            

2038
01:24:54,323 --> 01:24:57,891
So, you can kinda configure     
this in any way you want        

2039
01:24:57,893 --> 01:24:58,592
to make it work in there.       

2040
01:24:58,594 --> 01:25:01,962
Now, normally I would run this  
and show you that it's there,   

2041
01:25:01,964 --> 01:25:02,062
let's wire it up first, so,     
it actually does something.     

2042
01:25:02,064 --> 01:25:04,865
but of course,                  

2043
01:25:04,867 --> 01:25:06,867
It's real easy to wire up       
a text field if you just        

2044
01:25:06,869 --> 01:25:09,903
wanna hook it up to an outlet   
and set its delegate, and       

2045
01:25:09,905 --> 01:25:12,940
then, you can find out when     
the return key is pressed.      

2046
01:25:12,942 --> 01:25:13,607
So, let's do that.              

2047
01:25:13,609 --> 01:25:17,077
We'll go here, let's get our    
TweetTableViewController on     

2048
01:25:17,079 --> 01:25:17,845
screen at the same time.        

2049
01:25:17,847 --> 01:25:20,414
We just wanna create            
an outlet to that thing.        

2050
01:25:20,416 --> 01:25:22,749
I'll put it, right in here.     

2051
01:25:22,751 --> 01:25:23,183
So, I'm just,                   

2052
01:25:23,185 --> 01:25:27,888
again, I will probably wanna    
Shift + Click to select it.     

2053
01:25:27,890 --> 01:25:30,190
I, oops, picked the wrong one.  

2054
01:25:30,825 --> 01:25:33,627
So, let's Shift + Click,        
click this, select this,        

2055
01:25:33,629 --> 01:25:38,499
and Ctrl + Drag from it, and    
see it's a UITextField, and     

2056
01:25:38,501 --> 01:25:41,969
I'm gonna call this             
my searchTextField.             

2057
01:25:42,604 --> 01:25:42,703
Simple as that.                 

2058
01:25:42,705 --> 01:25:48,942
When it's set, I'm going to     
set myself as its delegates.    

2059
01:25:48,944 --> 01:25:52,713
searchTextField.delegate =      
self.                           

2060
01:25:52,715 --> 01:25:56,984
Of course, for me to be         
its delegate, I have to go      

2061
01:25:56,986 --> 01:26:01,221
up here and say yes,            
I am a UITextFieldDelegate.     

2062
01:26:01,223 --> 01:26:04,124
Okay, they're all the methods   
are optional in there, so,      

2063
01:26:04,126 --> 01:26:07,694
I have now successfully         
implemented that protocol.      

2064
01:26:07,696 --> 01:26:10,264
Ooh, what happened here?        

2065
01:26:10,266 --> 01:26:13,300
Yes, okay, so that's so         
I've set the delegate.          

2066
01:26:13,302 --> 01:26:16,203
Now, I'm gonna implement        
the delegate method I want,     

2067
01:26:16,205 --> 01:26:17,137
which is that should return.    

2068
01:26:17,139 --> 01:26:19,873
It get sent to me when          
the return button is sent.      

2069
01:26:19,875 --> 01:26:20,641
So that is textField,           

2070
01:26:20,643 --> 01:26:23,110
notice as I type textField      
it shows me them all,           

2071
01:26:23,112 --> 01:26:26,547
and it is this one right        
here textFieldShouldReturn.     

2072
01:26:26,549 --> 01:26:30,050
Let me make this bigger,        
bigger so                       

2073
01:26:30,052 --> 01:26:32,052
you can see it better.          

2074
01:26:32,054 --> 01:26:33,187
Okay, so here should return.    

2075
01:26:33,189 --> 01:26:35,722
If I get return, I'm            
actually gonna check to make    

2076
01:26:35,724 --> 01:26:38,025
sure I'm getting this           
from my searchTextField,        

2077
01:26:38,027 --> 01:26:40,894
because someday I might have    
other text fields and I wanna   

2078
01:26:40,896 --> 01:26:44,264
make sure I'm getting, I know   
which one I'm talking about.    

2079
01:26:44,266 --> 01:26:46,166
So textField is this            
argument right here, and        

2080
01:26:46,168 --> 01:26:47,935
I'm just checking to            
make sure it's me.              

2081
01:26:47,937 --> 01:26:52,239
And if that is true then        
I'm just gonna set my           

2082
01:26:52,241 --> 01:26:57,711
searchText =                    
searchTextFields.text, okay?    

2083
01:26:57,713 --> 01:26:59,513
Makes sense and                 
when I set my searchText,       

2084
01:26:59,515 --> 01:27:02,549
that's immediately going        
to start it going.              

2085
01:27:02,551 --> 01:27:04,685
Notice that ShouldReturn        
also returns a Bool which is    

2086
01:27:04,687 --> 01:27:08,288
whether to do what it normally  
does when return is pressed.    

2087
01:27:08,290 --> 01:27:09,289
Which in this case is nothing,  

2088
01:27:09,291 --> 01:27:10,824
cuz we don't have               
any target action or            

2089
01:27:10,826 --> 01:27:12,159
anything else, but              
we'll return true.              

2090
01:27:12,161 --> 01:27:14,995
Sure do what you normally do,   
now the only other thing        

2091
01:27:14,997 --> 01:27:17,464
here is now that we have        
the searchTextField,            

2092
01:27:17,466 --> 01:27:19,566
up here when we set             
our searchText.                 

2093
01:27:19,568 --> 01:27:23,003
We wanna update our             
searchTextField.                

2094
01:27:24,072 --> 01:27:27,374
And I'll be careful here in     
case I'm doing it in prepare.   

2095
01:27:27,376 --> 01:27:30,777
We'll set it to the searchText  
that we just set it to.         

2096
01:27:30,779 --> 01:27:33,280
Also I'm going to have          
my searchTextField              

2097
01:27:33,282 --> 01:27:35,882
resignFirstResponder here.      

2098
01:27:35,884 --> 01:27:39,386
That's if somebody types        
something and hits go search,   

2099
01:27:39,388 --> 01:27:41,688
and we search for               
something and put it in there.  

2100
01:27:41,690 --> 01:27:42,856
I'm gonna take                  
the keyboard away.              

2101
01:27:42,858 --> 01:27:44,791
Cuz I just don't wanna          
have the keyboard blocking      

2102
01:27:44,793 --> 01:27:46,627
the results that                
they just asked for.            

2103
01:27:46,629 --> 01:27:48,061
And also someone                
sets it in code.                

2104
01:27:48,063 --> 01:27:49,396
I'm gonna get rid of keyboard.  

2105
01:27:49,398 --> 01:27:50,764
Someone might be in             
the middle of typing but        

2106
01:27:50,766 --> 01:27:52,299
if someone sets it in           
code rather than typing.        

2107
01:27:52,301 --> 01:27:56,236
Let's get that keyboard         
out of the way, all right?      

2108
01:27:56,238 --> 01:27:57,537
So let's go do that.            

2109
01:27:58,139 --> 01:28:01,642
Leave this code on the screen   
so you can see it.              

2110
01:28:06,314 --> 01:28:10,317
All right, so here is our text  
field, it's kinda of hard to    

2111
01:28:10,319 --> 01:28:13,954
see under this carrier,         
we'll fix that in a second.     

2112
01:28:13,956 --> 01:28:16,290
Let's go and search for         
#stanford again.                

2113
01:28:16,292 --> 01:28:18,592
Oops, I'm not gonna do this,    
watch this.                     

2114
01:28:18,594 --> 01:28:20,627
Okay that looked easy to type,  
didn't it?                      

2115
01:28:20,629 --> 01:28:21,728
Well let's go here and          

2116
01:28:21,730 --> 01:28:27,668
say Keyboard, turn off          
the hardware keyboard.          

2117
01:28:27,670 --> 01:28:28,835
Now when we click in here,      

2118
01:28:28,837 --> 01:28:30,003
ooh, it's a lot                 
harder to type.                 

2119
01:28:30,005 --> 01:28:34,041
#stanford, okay so              
now you're getting into what    

2120
01:28:34,043 --> 01:28:38,779
I'm saying about learn to       
type like your users will be.   

2121
01:28:38,781 --> 01:28:42,149
So here I'm going to search,    
goes in stanford and            

2122
01:28:42,151 --> 01:28:42,449
search for it.                  

2123
01:28:42,451 --> 01:28:46,019
Let's go and search for         
something else here.            

2124
01:28:46,021 --> 01:28:47,487
Maybe we'll search for,         

2125
01:28:47,489 --> 01:28:52,659
this is kind of dangerous       
because people might say, but   

2126
01:28:52,661 --> 01:28:58,598
Trump                           
>> Okay,                        

2127
01:28:58,600 --> 01:29:01,468
there's some Trump ones.        

2128
01:29:02,403 --> 01:29:03,603
Now, we've done all this.       

2129
01:29:03,605 --> 01:29:04,671
I wanna fix this thing though,  

2130
01:29:04,673 --> 01:29:07,240
where this looks really         
bad at the top here.            

2131
01:29:07,242 --> 01:29:08,909
And there's this really         
easy fix to that.               

2132
01:29:08,911 --> 01:29:10,744
Which is I'm just going to,     
this is the fix.                

2133
01:29:10,746 --> 01:29:12,846
The fix is everything in        
the UI as you've learned.       

2134
01:29:12,848 --> 01:29:16,650
I'm just gonna embed this       
in a navigation controller.     

2135
01:29:16,652 --> 01:29:20,954
Okay, when you embed this in a  
navigation controller and run,  

2136
01:29:20,956 --> 01:29:24,424
you can see that it makes       
a nice title at the top,        

2137
01:29:24,426 --> 01:29:26,259
it moves the text field down,   

2138
01:29:26,261 --> 01:29:28,295
it's just much                  
nicer all around.               

2139
01:29:28,297 --> 01:29:30,997
Okay, see how it has done       
that from a bit down here.      

2140
01:29:30,999 --> 01:29:34,067
One other thing I'm gonna do    
is put placeholder text in      

2141
01:29:34,069 --> 01:29:35,335
there, I meant to               
show you that.                  

2142
01:29:35,337 --> 01:29:40,040
Sorry, let's do that, if I      
go back to here click this.     

2143
01:29:40,042 --> 01:29:42,843
That thing in here,             
swipe this guide.               

2144
01:29:42,845 --> 01:29:47,681
You can put a placeholder text  
like this, Twitter Search and   

2145
01:29:47,683 --> 01:29:49,850
see it shows it in there,       
kinda like gray.                

2146
01:29:49,852 --> 01:29:53,487
So that when you run,           
it's more obvious to the user,  

2147
01:29:53,489 --> 01:29:56,623
what is that big white space,   
all right?                      

2148
01:29:56,625 --> 01:30:00,093
Be clear to them that           
it's a Twitter search.          

2149
01:30:00,561 --> 01:30:03,296
You know all you need to        
know to do your homework.       

2150
01:30:03,298 --> 01:30:04,464
Good luck with it.              

2151
01:30:04,999 --> 01:30:05,031
>> For more, please visit       
us at Stanford.edu.             

